// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use crate::SettingMacvlanMode;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::fmt;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use std::{boxed::Box as Box_, mem::transmute};

glib::wrapper! {
    /// MAC VLAN Settings
    ///
    /// ## Properties
    ///
    ///
    /// #### `mode`
    ///  The macvlan mode, which specifies the communication mechanism between multiple
    /// macvlans on the same lower device.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `parent`
    ///  If given, specifies the parent interface name or parent connection UUID
    /// from which this MAC-VLAN interface should be created. If this property is
    /// not specified, the connection must contain an [`SettingWired`][crate::SettingWired] setting
    /// with a [`mac-address`][struct@crate::SettingWired#mac-address] property.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `promiscuous`
    ///  Whether the interface should be put in promiscuous mode.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `tap`
    ///  Whether the interface should be a MACVTAP.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Setting</h4></summary>
    ///
    ///
    /// #### `name`
    ///  The setting's name, which uniquely identifies the setting within the
    /// connection. Each setting type has a name unique to that type, for
    /// example "ppp" or "802-11-wireless" or "802-3-ethernet".
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`SettingExt`][trait@crate::prelude::SettingExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMSettingMacvlan")]
    pub struct SettingMacvlan(Object<ffi::NMSettingMacvlan, ffi::NMSettingMacvlanClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_macvlan_get_type(),
    }
}

impl SettingMacvlan {
    /// Creates a new [`SettingMacvlan`][crate::SettingMacvlan] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingMacvlan`][crate::SettingMacvlan] object
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_macvlan_new")]
    pub fn new() -> SettingMacvlan {
        unsafe { Setting::from_glib_full(ffi::nm_setting_macvlan_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the [`mode`][struct@crate::SettingMacvlan#mode] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_macvlan_get_mode")]
    #[doc(alias = "get_mode")]
    pub fn mode(&self) -> SettingMacvlanMode {
        unsafe { from_glib(ffi::nm_setting_macvlan_get_mode(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`parent`][struct@crate::SettingMacvlan#parent] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_macvlan_get_parent")]
    #[doc(alias = "get_parent")]
    pub fn parent(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_macvlan_get_parent(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`promiscuous`][struct@crate::SettingMacvlan#promiscuous] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_macvlan_get_promiscuous")]
    #[doc(alias = "get_promiscuous")]
    pub fn is_promiscuous(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_macvlan_get_promiscuous(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`tap`][struct@crate::SettingMacvlan#tap] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_macvlan_get_tap")]
    #[doc(alias = "get_tap")]
    pub fn is_tap(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_macvlan_get_tap(self.to_glib_none().0)) }
    }

    /// The macvlan mode, which specifies the communication mechanism between multiple
    /// macvlans on the same lower device.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_mode(&self, mode: u32) {
        glib::ObjectExt::set_property(self, "mode", &mode)
    }

    /// If given, specifies the parent interface name or parent connection UUID
    /// from which this MAC-VLAN interface should be created. If this property is
    /// not specified, the connection must contain an [`SettingWired`][crate::SettingWired] setting
    /// with a [`mac-address`][struct@crate::SettingWired#mac-address] property.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_parent(&self, parent: Option<&str>) {
        glib::ObjectExt::set_property(self, "parent", &parent)
    }

    /// Whether the interface should be put in promiscuous mode.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_promiscuous(&self, promiscuous: bool) {
        glib::ObjectExt::set_property(self, "promiscuous", &promiscuous)
    }

    /// Whether the interface should be a MACVTAP.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_tap(&self, tap: bool) {
        glib::ObjectExt::set_property(self, "tap", &tap)
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "mode")]
    pub fn connect_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mode_trampoline<F: Fn(&SettingMacvlan) + 'static>(
            this: *mut ffi::NMSettingMacvlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "parent")]
    pub fn connect_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<F: Fn(&SettingMacvlan) + 'static>(
            this: *mut ffi::NMSettingMacvlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parent_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "promiscuous")]
    pub fn connect_promiscuous_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_promiscuous_trampoline<F: Fn(&SettingMacvlan) + 'static>(
            this: *mut ffi::NMSettingMacvlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::promiscuous\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_promiscuous_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "tap")]
    pub fn connect_tap_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tap_trampoline<F: Fn(&SettingMacvlan) + 'static>(
            this: *mut ffi::NMSettingMacvlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tap\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tap_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
impl Default for SettingMacvlan {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingMacvlan {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingMacvlan")
    }
}
