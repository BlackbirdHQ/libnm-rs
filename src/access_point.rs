// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Connection;
use crate::Object;
use crate::_80211ApFlags;
use crate::_80211ApSecurityFlags;
use crate::_80211Mode;
use glib;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct AccessPoint(Object<nm_sys::NMAccessPoint, nm_sys::NMAccessPointClass, AccessPointClass>) @extends Object;

    match fn {
        get_type => || nm_sys::nm_access_point_get_type(),
    }
}

impl AccessPoint {
    /// Validates a given connection against a given Wi-Fi access point to ensure that
    /// the connection may be activated with that AP. The connection must match the
    /// `self`'s SSID, (if given) BSSID, and other attributes like security settings,
    /// channel, band, etc.
    /// ## `connection`
    /// an `Connection` to validate against `self`
    ///
    /// # Returns
    ///
    /// `true` if the connection may be activated with this Wi-Fi AP,
    /// `false` if it cannot be.
    pub fn connection_valid<P: IsA<Connection>>(&self, connection: &P) -> bool {
        unsafe {
            from_glib(nm_sys::nm_access_point_connection_valid(
                self.to_glib_none().0,
                connection.as_ref().to_glib_none().0,
            ))
        }
    }

    /// Filters a given array of connections for a given `AccessPoint` object and
    /// returns connections which may be activated with the access point. Any
    /// returned connections will match the `self`'s SSID and (if given) BSSID and
    /// other attributes like security settings, channel, etc.
    ///
    /// To obtain the list of connections that are compatible with this access point,
    /// use `Client::get_connections` and then filter the returned list for a given
    /// `Device` using `DeviceExt::filter_connections` and finally filter that list
    /// with this function.
    /// ## `connections`
    /// an array of `NMConnections` to
    /// filter
    ///
    /// # Returns
    ///
    /// an array of
    /// `NMConnections` that could be activated with the given `self`. The array should
    /// be freed with `glib::PtrArray::unref` when it is no longer required.
    pub fn filter_connections(&self, connections: &[Connection]) -> Vec<Connection> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(nm_sys::nm_access_point_filter_connections(
                self.to_glib_none().0,
                connections.to_glib_none().0,
            ))
        }
    }

    /// Gets the Basic Service Set ID (BSSID) of the Wi-Fi access point.
    ///
    /// # Returns
    ///
    /// the BSSID of the access point. This is an internal string and must
    /// not be modified or freed.
    pub fn get_bssid(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_access_point_get_bssid(self.to_glib_none().0)) }
    }

    /// Gets the flags of the access point.
    ///
    /// # Returns
    ///
    /// the flags
    pub fn get_flags(&self) -> _80211ApFlags {
        unsafe { from_glib(nm_sys::nm_access_point_get_flags(self.to_glib_none().0)) }
    }

    /// Gets the frequency of the access point in MHz.
    ///
    /// # Returns
    ///
    /// the frequency in MHz
    pub fn get_frequency(&self) -> u32 {
        unsafe { nm_sys::nm_access_point_get_frequency(self.to_glib_none().0) }
    }

    /// Returns the timestamp (in CLOCK_BOOTTIME seconds) for the last time the
    /// access point was found in scan results. A value of -1 means the access
    /// point has not been found in a scan.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the last seen time in seconds
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_last_seen(&self) -> i32 {
        unsafe { nm_sys::nm_access_point_get_last_seen(self.to_glib_none().0) }
    }

    /// Gets the maximum bit rate of the access point in kbit/s.
    ///
    /// # Returns
    ///
    /// the maximum bit rate (kbit/s)
    pub fn get_max_bitrate(&self) -> u32 {
        unsafe { nm_sys::nm_access_point_get_max_bitrate(self.to_glib_none().0) }
    }

    /// Gets the mode of the access point.
    ///
    /// # Returns
    ///
    /// the mode
    pub fn get_mode(&self) -> _80211Mode {
        unsafe { from_glib(nm_sys::nm_access_point_get_mode(self.to_glib_none().0)) }
    }

    /// Gets the RSN (Robust Secure Network, ie WPA version 2) flags of the access
    /// point.
    ///
    /// # Returns
    ///
    /// the RSN flags
    pub fn get_rsn_flags(&self) -> _80211ApSecurityFlags {
        unsafe { from_glib(nm_sys::nm_access_point_get_rsn_flags(self.to_glib_none().0)) }
    }

    /// Gets the SSID of the access point.
    ///
    /// # Returns
    ///
    /// the `glib::Bytes` containing the SSID, or `None` if the
    ///  SSID is unknown.
    pub fn get_ssid(&self) -> Option<glib::Bytes> {
        unsafe { from_glib_none(nm_sys::nm_access_point_get_ssid(self.to_glib_none().0)) }
    }

    /// Gets the current signal strength of the access point as a percentage.
    ///
    /// # Returns
    ///
    /// the signal strength (0 to 100)
    pub fn get_strength(&self) -> u8 {
        unsafe { nm_sys::nm_access_point_get_strength(self.to_glib_none().0) }
    }

    /// Gets the WPA (version 1) flags of the access point.
    ///
    /// # Returns
    ///
    /// the WPA flags
    pub fn get_wpa_flags(&self) -> _80211ApSecurityFlags {
        unsafe { from_glib(nm_sys::nm_access_point_get_wpa_flags(self.to_glib_none().0)) }
    }

    /// Alias for `AccessPoint:bssid`.
    ///
    /// # Deprecated since 1.0
    ///
    /// Use `AccessPoint:bssid`.
    #[cfg_attr(feature = "v1_0", deprecated)]
    pub fn get_property_hw_address(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"hw-address\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `hw-address` getter")
        }
    }

    pub fn connect_property_bssid_notify<F: Fn(&AccessPoint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_bssid_trampoline<F: Fn(&AccessPoint) + 'static>(
            this: *mut nm_sys::NMAccessPoint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::bssid\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_bssid_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_flags_notify<F: Fn(&AccessPoint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_flags_trampoline<F: Fn(&AccessPoint) + 'static>(
            this: *mut nm_sys::NMAccessPoint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_frequency_notify<F: Fn(&AccessPoint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_frequency_trampoline<F: Fn(&AccessPoint) + 'static>(
            this: *mut nm_sys::NMAccessPoint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::frequency\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_frequency_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg_attr(feature = "v1_0", deprecated)]
    pub fn connect_property_hw_address_notify<F: Fn(&AccessPoint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_hw_address_trampoline<F: Fn(&AccessPoint) + 'static>(
            this: *mut nm_sys::NMAccessPoint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hw-address\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hw_address_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_last_seen_notify<F: Fn(&AccessPoint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_last_seen_trampoline<F: Fn(&AccessPoint) + 'static>(
            this: *mut nm_sys::NMAccessPoint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::last-seen\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_last_seen_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_max_bitrate_notify<F: Fn(&AccessPoint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_max_bitrate_trampoline<F: Fn(&AccessPoint) + 'static>(
            this: *mut nm_sys::NMAccessPoint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::max-bitrate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_max_bitrate_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_mode_notify<F: Fn(&AccessPoint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_mode_trampoline<F: Fn(&AccessPoint) + 'static>(
            this: *mut nm_sys::NMAccessPoint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_rsn_flags_notify<F: Fn(&AccessPoint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_rsn_flags_trampoline<F: Fn(&AccessPoint) + 'static>(
            this: *mut nm_sys::NMAccessPoint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::rsn-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_rsn_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_ssid_notify<F: Fn(&AccessPoint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_ssid_trampoline<F: Fn(&AccessPoint) + 'static>(
            this: *mut nm_sys::NMAccessPoint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ssid\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ssid_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_strength_notify<F: Fn(&AccessPoint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_strength_trampoline<F: Fn(&AccessPoint) + 'static>(
            this: *mut nm_sys::NMAccessPoint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::strength\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_strength_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_wpa_flags_notify<F: Fn(&AccessPoint) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wpa_flags_trampoline<F: Fn(&AccessPoint) + 'static>(
            this: *mut nm_sys::NMAccessPoint,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wpa-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wpa_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for AccessPoint {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AccessPoint")
    }
}
