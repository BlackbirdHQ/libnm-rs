// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    /// VRF settings
    ///
    /// ## Properties
    ///
    ///
    /// #### `table`
    ///  The routing table for this VRF.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Setting</h4></summary>
    ///
    ///
    /// #### `name`
    ///  The setting's name, which uniquely identifies the setting within the
    /// connection. Each setting type has a name unique to that type, for
    /// example "ppp" or "802-11-wireless" or "802-3-ethernet".
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`SettingExt`][trait@crate::prelude::SettingExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMSettingVrf")]
    pub struct SettingVrf(Object<ffi::NMSettingVrf, ffi::NMSettingVrfClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_vrf_get_type(),
    }
}

impl SettingVrf {
    /// Creates a new [`SettingVrf`][crate::SettingVrf] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingVrf`][crate::SettingVrf] object
    #[doc(alias = "nm_setting_vrf_new")]
    pub fn new() -> SettingVrf {
        unsafe { Setting::from_glib_full(ffi::nm_setting_vrf_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the routing table for the VRF
    #[doc(alias = "nm_setting_vrf_get_table")]
    #[doc(alias = "get_table")]
    pub fn table(&self) -> u32 {
        unsafe { ffi::nm_setting_vrf_get_table(self.to_glib_none().0) }
    }

    /// The routing table for this VRF.
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    pub fn set_table(&self, table: u32) {
        glib::ObjectExt::set_property(self, "table", &table)
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "table")]
    pub fn connect_table_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_table_trampoline<F: Fn(&SettingVrf) + 'static>(
            this: *mut ffi::NMSettingVrf,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_table_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_24", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
impl Default for SettingVrf {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingVrf {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingVrf")
    }
}
