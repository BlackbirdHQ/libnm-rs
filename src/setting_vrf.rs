// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_24", feature = "dox"))]
use glib::object::Cast;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use glib::Value;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use glib_sys;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use gobject_sys;
use nm_sys;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use std::mem::transmute;
use Setting;

glib_wrapper! {
    pub struct SettingVrf(Object<nm_sys::NMSettingVrf, nm_sys::NMSettingVrfClass, SettingVrfClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_vrf_get_type(),
    }
}

impl SettingVrf {
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn new() -> SettingVrf {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_vrf_new()).unsafe_cast() }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn get_table(&self) -> u32 {
        unsafe { nm_sys::nm_setting_vrf_get_table(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn set_property_table(&self, table: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"table\0".as_ptr() as *const _,
                Value::from(&table).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn connect_property_table_notify<F: Fn(&SettingVrf) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_table_trampoline<F: Fn(&SettingVrf) + 'static>(
            this: *mut nm_sys::NMSettingVrf,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::table\0".as_ptr() as *const _,
                Some(transmute(notify_table_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_24", feature = "dox"))]
impl Default for SettingVrf {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingVrf {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingVrf")
    }
}
