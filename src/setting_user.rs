// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_8", feature = "dox"))]
use glib;
use glib::object::Cast;
#[cfg(any(feature = "v1_8", feature = "dox"))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_8", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_8", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
#[cfg(any(feature = "v1_8", feature = "dox"))]
use glib_sys;
use nm_sys;
#[cfg(any(feature = "v1_8", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
#[cfg(any(feature = "v1_8", feature = "dox"))]
use std::mem::transmute;
#[cfg(any(feature = "v1_8", feature = "dox"))]
use std::ptr;
use Setting;

glib_wrapper! {
    pub struct SettingUser(Object<nm_sys::NMSettingUser, nm_sys::NMSettingUserClass, SettingUserClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_user_get_type(),
    }
}

impl SettingUser {
    pub fn new() -> SettingUser {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_user_new()).unsafe_cast() }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    pub fn get_data(&self, key: &str) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_user_get_data(
                self.to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    pub fn get_keys(&self) -> Vec<GString> {
        unsafe {
            let mut out_len = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(
                nm_sys::nm_setting_user_get_keys(self.to_glib_none().0, out_len.as_mut_ptr()),
                out_len.assume_init() as usize,
            );
            ret
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    pub fn set_data(&self, key: &str, val: Option<&str>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_setting_user_set_data(
                self.to_glib_none().0,
                key.to_glib_none().0,
                val.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    pub fn check_key(key: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_setting_user_check_key(key.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    pub fn check_val(val: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_setting_user_check_val(val.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    pub fn connect_property_data_notify<F: Fn(&SettingUser) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_data_trampoline<F: Fn(&SettingUser) + 'static>(
            this: *mut nm_sys::NMSettingUser,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::data\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_data_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for SettingUser {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingUser {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingUser")
    }
}
