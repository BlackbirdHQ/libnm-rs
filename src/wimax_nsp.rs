// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Connection;
use Object;
use WimaxNspNetworkType;

glib_wrapper! {
    pub struct WimaxNsp(Object<nm_sys::NMWimaxNsp, nm_sys::NMWimaxNspClass, WimaxNspClass>) @extends Object;

    match fn {
        get_type => || nm_sys::nm_wimax_nsp_get_type(),
    }
}

impl WimaxNsp {
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn connection_valid<P: IsA<Connection>>(&self, connection: &P) -> bool {
        unsafe {
            from_glib(nm_sys::nm_wimax_nsp_connection_valid(
                self.to_glib_none().0,
                connection.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn filter_connections(&self, connections: &[Connection]) -> Vec<Connection> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(nm_sys::nm_wimax_nsp_filter_connections(
                self.to_glib_none().0,
                connections.to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn get_name(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_wimax_nsp_get_name(self.to_glib_none().0)) }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn get_network_type(&self) -> WimaxNspNetworkType {
        unsafe { from_glib(nm_sys::nm_wimax_nsp_get_network_type(self.to_glib_none().0)) }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn get_signal_quality(&self) -> u32 {
        unsafe { nm_sys::nm_wimax_nsp_get_signal_quality(self.to_glib_none().0) }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn connect_property_name_notify<F: Fn(&WimaxNsp) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<F: Fn(&WimaxNsp) + 'static>(
            this: *mut nm_sys::NMWimaxNsp,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::name\0".as_ptr() as *const _,
                Some(transmute(notify_name_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn connect_property_network_type_notify<F: Fn(&WimaxNsp) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_network_type_trampoline<F: Fn(&WimaxNsp) + 'static>(
            this: *mut nm_sys::NMWimaxNsp,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::network-type\0".as_ptr() as *const _,
                Some(transmute(notify_network_type_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn connect_property_signal_quality_notify<F: Fn(&WimaxNsp) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_signal_quality_trampoline<F: Fn(&WimaxNsp) + 'static>(
            this: *mut nm_sys::NMWimaxNsp,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::signal-quality\0".as_ptr() as *const _,
                Some(transmute(notify_signal_quality_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for WimaxNsp {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WimaxNsp")
    }
}
