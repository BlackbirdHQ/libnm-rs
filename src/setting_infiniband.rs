// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    /// Infiniband Settings
    ///
    /// ## Properties
    ///
    ///
    /// #### `mac-address`
    ///  If specified, this connection will only apply to the IPoIB device whose
    /// permanent MAC address matches. This property does not change the MAC
    /// address of the device (i.e. MAC spoofing).
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `mtu`
    ///  If non-zero, only transmit packets of the specified size or smaller,
    /// breaking larger packets up into multiple frames.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `p-key`
    ///  The InfiniBand P_Key to use for this device. A value of -1 means to use
    /// the default P_Key (aka "the P_Key at index 0"). Otherwise, it is a 16-bit
    /// unsigned integer, whose high bit is set if it is a "full membership"
    /// P_Key.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `parent`
    ///  The interface name of the parent device of this device. Normally [`None`],
    /// but if the [`p_key`][struct@crate::SettingInfiniband#p_key] property is set, then you must
    /// specify the base device by setting either this property or
    /// [`mac-address`][struct@crate::SettingInfiniband#mac-address].
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `transport-mode`
    ///  The IP-over-InfiniBand transport mode. Either "datagram" or
    /// "connected".
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Setting</h4></summary>
    ///
    ///
    /// #### `name`
    ///  The setting's name, which uniquely identifies the setting within the
    /// connection. Each setting type has a name unique to that type, for
    /// example "ppp" or "802-11-wireless" or "802-3-ethernet".
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`SettingExt`][trait@crate::prelude::SettingExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMSettingInfiniband")]
    pub struct SettingInfiniband(Object<ffi::NMSettingInfiniband, ffi::NMSettingInfinibandClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_infiniband_get_type(),
    }
}

impl SettingInfiniband {
    /// Creates a new [`SettingInfiniband`][crate::SettingInfiniband] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingInfiniband`][crate::SettingInfiniband] object
    #[doc(alias = "nm_setting_infiniband_new")]
    pub fn new() -> SettingInfiniband {
        unsafe { Setting::from_glib_full(ffi::nm_setting_infiniband_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the [`mac-address`][struct@crate::SettingInfiniband#mac-address] property of the setting
    #[doc(alias = "nm_setting_infiniband_get_mac_address")]
    #[doc(alias = "get_mac_address")]
    pub fn mac_address(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_infiniband_get_mac_address(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`mtu`][struct@crate::SettingInfiniband#mtu] property of the setting
    #[doc(alias = "nm_setting_infiniband_get_mtu")]
    #[doc(alias = "get_mtu")]
    pub fn mtu(&self) -> u32 {
        unsafe { ffi::nm_setting_infiniband_get_mtu(self.to_glib_none().0) }
    }

    /// Returns the P_Key to use for this device. A value of -1 means to
    /// use the default P_Key (aka "the P_Key at index 0"). Otherwise, it is
    /// a 16-bit unsigned integer.
    ///
    /// # Returns
    ///
    /// the IPoIB P_Key
    #[doc(alias = "nm_setting_infiniband_get_p_key")]
    #[doc(alias = "get_p_key")]
    pub fn p_key(&self) -> i32 {
        unsafe { ffi::nm_setting_infiniband_get_p_key(self.to_glib_none().0) }
    }

    /// Returns the parent interface name for this device, if set.
    ///
    /// # Returns
    ///
    /// the parent interface name
    #[doc(alias = "nm_setting_infiniband_get_parent")]
    #[doc(alias = "get_parent")]
    pub fn parent(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_infiniband_get_parent(self.to_glib_none().0)) }
    }

    /// Returns the transport mode for this device. Either 'datagram' or
    /// 'connected'.
    ///
    /// # Returns
    ///
    /// the IPoIB transport mode
    #[doc(alias = "nm_setting_infiniband_get_transport_mode")]
    #[doc(alias = "get_transport_mode")]
    pub fn transport_mode(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_infiniband_get_transport_mode(
                self.to_glib_none().0,
            ))
        }
    }

    /// Returns the interface name created by combining [`parent`][struct@crate::SettingInfiniband#parent]
    /// and [`p-key`][struct@crate::SettingInfiniband#p-key]. (If either property is unset, this will
    /// return [`None`].)
    ///
    /// # Returns
    ///
    /// the interface name, or [`None`]
    #[doc(alias = "nm_setting_infiniband_get_virtual_interface_name")]
    #[doc(alias = "get_virtual_interface_name")]
    pub fn virtual_interface_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_infiniband_get_virtual_interface_name(
                self.to_glib_none().0,
            ))
        }
    }

    /// If specified, this connection will only apply to the IPoIB device whose
    /// permanent MAC address matches. This property does not change the MAC
    /// address of the device (i.e. MAC spoofing).
    #[doc(alias = "mac-address")]
    pub fn set_mac_address(&self, mac_address: Option<&str>) {
        glib::ObjectExt::set_property(self, "mac-address", &mac_address)
    }

    /// If non-zero, only transmit packets of the specified size or smaller,
    /// breaking larger packets up into multiple frames.
    pub fn set_mtu(&self, mtu: u32) {
        glib::ObjectExt::set_property(self, "mtu", &mtu)
    }

    /// The InfiniBand P_Key to use for this device. A value of -1 means to use
    /// the default P_Key (aka "the P_Key at index 0"). Otherwise, it is a 16-bit
    /// unsigned integer, whose high bit is set if it is a "full membership"
    /// P_Key.
    #[doc(alias = "p-key")]
    pub fn set_p_key(&self, p_key: i32) {
        glib::ObjectExt::set_property(self, "p-key", &p_key)
    }

    /// The interface name of the parent device of this device. Normally [`None`],
    /// but if the [`p_key`][struct@crate::SettingInfiniband#p_key] property is set, then you must
    /// specify the base device by setting either this property or
    /// [`mac-address`][struct@crate::SettingInfiniband#mac-address].
    pub fn set_parent(&self, parent: Option<&str>) {
        glib::ObjectExt::set_property(self, "parent", &parent)
    }

    /// The IP-over-InfiniBand transport mode. Either "datagram" or
    /// "connected".
    #[doc(alias = "transport-mode")]
    pub fn set_transport_mode(&self, transport_mode: Option<&str>) {
        glib::ObjectExt::set_property(self, "transport-mode", &transport_mode)
    }

    #[doc(alias = "mac-address")]
    pub fn connect_mac_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mac_address_trampoline<F: Fn(&SettingInfiniband) + 'static>(
            this: *mut ffi::NMSettingInfiniband,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mac-address\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mac_address_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "mtu")]
    pub fn connect_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mtu_trampoline<F: Fn(&SettingInfiniband) + 'static>(
            this: *mut ffi::NMSettingInfiniband,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mtu\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mtu_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "p-key")]
    pub fn connect_p_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_p_key_trampoline<F: Fn(&SettingInfiniband) + 'static>(
            this: *mut ffi::NMSettingInfiniband,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::p-key\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_p_key_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "parent")]
    pub fn connect_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<F: Fn(&SettingInfiniband) + 'static>(
            this: *mut ffi::NMSettingInfiniband,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parent_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "transport-mode")]
    pub fn connect_transport_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_transport_mode_trampoline<
            F: Fn(&SettingInfiniband) + 'static,
        >(
            this: *mut ffi::NMSettingInfiniband,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::transport-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_transport_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for SettingInfiniband {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingInfiniband {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingInfiniband")
    }
}
