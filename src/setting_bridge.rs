// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

#[cfg(any(feature = "v1_18", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
use crate::BridgeVlan;
use crate::Setting;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    /// Bridging Settings
    ///
    /// ## Properties
    ///
    ///
    /// #### `ageing-time`
    ///  The Ethernet MAC address aging time, in seconds.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `forward-delay`
    ///  The Spanning Tree Protocol (STP) forwarding delay, in seconds.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `group-address`
    ///  If specified, The MAC address of the multicast group this bridge uses for STP.
    ///
    /// The address must be a link-local address in standard Ethernet MAC address format,
    /// ie an address of the form 01:80:C2:00:00:0X, with X in [0, 4..F].
    /// If not specified the default value is 01:80:C2:00:00:00.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `group-forward-mask`
    ///  A mask of group addresses to forward. Usually, group addresses in
    /// the range from 01:80:C2:00:00:00 to 01:80:C2:00:00:0F are not
    /// forwarded according to standards. This property is a mask of 16 bits,
    /// each corresponding to a group address in that range that must be
    /// forwarded. The mask can't have bits 0, 1 or 2 set because they are
    /// used for STP, MAC pause frames and LACP.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `hello-time`
    ///  The Spanning Tree Protocol (STP) hello time, in seconds.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `mac-address`
    ///  If specified, the MAC address of bridge. When creating a new bridge, this
    /// MAC address will be set.
    ///
    /// If this field is left unspecified, the "ethernet.cloned-mac-address" is
    /// referred instead to generate the initial MAC address. Note that setting
    /// "ethernet.cloned-mac-address" anyway overwrites the MAC address of
    /// the bridge later while activating the bridge. Hence, this property
    /// is deprecated.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `max-age`
    ///  The Spanning Tree Protocol (STP) maximum message age, in seconds.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-hash-max`
    ///  Set maximum size of multicast hash table (value must be a power of 2).
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-last-member-count`
    ///  Set the number of queries the bridge will send before
    /// stopping forwarding a multicast group after a "leave"
    /// message has been received.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-last-member-interval`
    ///  Set interval (in deciseconds) between queries to find remaining
    /// members of a group, after a "leave" message is received.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-membership-interval`
    ///  Set delay (in deciseconds) after which the bridge will
    /// leave a group, if no membership reports for this
    /// group are received.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-querier`
    ///  Enable or disable sending of multicast queries by the bridge.
    /// If not specified the option is disabled.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-querier-interval`
    ///  If no queries are seen after this delay (in deciseconds) has passed,
    /// the bridge will start to send its own queries.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-query-interval`
    ///  Interval (in deciseconds) between queries sent
    /// by the bridge after the end of the startup phase.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-query-response-interval`
    ///  Set the Max Response Time/Max Response Delay
    /// (in deciseconds) for IGMP/MLD queries sent by the bridge.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-query-use-ifaddr`
    ///  If enabled the bridge's own IP address is used as
    /// the source address for IGMP queries otherwise
    /// the default of 0.0.0.0 is used.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-router`
    ///  Sets bridge's multicast router. Multicast-snooping must be enabled
    /// for this option to work.
    ///
    /// Supported values are: 'auto', 'disabled', 'enabled' to which kernel
    /// assigns the numbers 1, 0, and 2, respectively.
    /// If not specified the default value is 'auto' (1).
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-snooping`
    ///  Controls whether IGMP snooping is enabled for this bridge.
    /// Note that if snooping was automatically disabled due to hash collisions,
    /// the system may refuse to enable the feature until the collisions are
    /// resolved.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-startup-query-count`
    ///  Set the number of IGMP queries to send during startup phase.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `multicast-startup-query-interval`
    ///  Sets the time (in deciseconds) between queries sent out
    /// at startup to determine membership information.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `priority`
    ///  Sets the Spanning Tree Protocol (STP) priority for this bridge. Lower
    /// values are "better"; the lowest priority bridge will be elected the root
    /// bridge.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `stp`
    ///  Controls whether Spanning Tree Protocol (STP) is enabled for this bridge.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `vlan-default-pvid`
    ///  The default PVID for the ports of the bridge, that is the VLAN id
    /// assigned to incoming untagged frames.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `vlan-filtering`
    ///  Control whether VLAN filtering is enabled on the bridge.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `vlan-protocol`
    ///  If specified, the protocol used for VLAN filtering.
    ///
    /// Supported values are: '802.1Q', '802.1ad'.
    /// If not specified the default value is '802.1Q'.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `vlan-stats-enabled`
    ///  Controls whether per-VLAN stats accounting is enabled.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Setting</h4></summary>
    ///
    ///
    /// #### `name`
    ///  The setting's name, which uniquely identifies the setting within the
    /// connection. Each setting type has a name unique to that type, for
    /// example "ppp" or "802-11-wireless" or "802-3-ethernet".
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`SettingExt`][trait@crate::prelude::SettingExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMSettingBridge")]
    pub struct SettingBridge(Object<ffi::NMSettingBridge, ffi::NMSettingBridgeClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_bridge_get_type(),
    }
}

impl SettingBridge {
    /// Creates a new [`SettingBridge`][crate::SettingBridge] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingBridge`][crate::SettingBridge] object
    #[doc(alias = "nm_setting_bridge_new")]
    pub fn new() -> SettingBridge {
        unsafe { Setting::from_glib_full(ffi::nm_setting_bridge_new()).unsafe_cast() }
    }

    /// Appends a new vlan and associated information to the setting. The
    /// given vlan gets sealed and a reference to it is added.
    /// ## `vlan`
    /// the vlan to add
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_add_vlan")]
    pub fn add_vlan(&self, vlan: &BridgeVlan) {
        unsafe {
            ffi::nm_setting_bridge_add_vlan(self.to_glib_none().0, vlan.to_glib_none().0);
        }
    }

    /// Removes all configured VLANs.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_clear_vlans")]
    pub fn clear_vlans(&self) {
        unsafe {
            ffi::nm_setting_bridge_clear_vlans(self.to_glib_none().0);
        }
    }

    ///
    /// # Returns
    ///
    /// the [`ageing-time`][struct@crate::SettingBridge#ageing-time] property of the setting
    #[doc(alias = "nm_setting_bridge_get_ageing_time")]
    #[doc(alias = "get_ageing_time")]
    pub fn ageing_time(&self) -> u32 {
        unsafe { ffi::nm_setting_bridge_get_ageing_time(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`forward-delay`][struct@crate::SettingBridge#forward-delay] property of the setting
    #[doc(alias = "nm_setting_bridge_get_forward_delay")]
    #[doc(alias = "get_forward_delay")]
    pub fn forward_delay(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_get_forward_delay(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`group-address`][struct@crate::SettingBridge#group-address] property of the setting
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "nm_setting_bridge_get_group_address")]
    #[doc(alias = "get_group_address")]
    pub fn group_address(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_bridge_get_group_address(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`group-forward-mask`][struct@crate::SettingBridge#group-forward-mask] property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "nm_setting_bridge_get_group_forward_mask")]
    #[doc(alias = "get_group_forward_mask")]
    pub fn group_forward_mask(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_get_group_forward_mask(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`hello-time`][struct@crate::SettingBridge#hello-time] property of the setting
    #[doc(alias = "nm_setting_bridge_get_hello_time")]
    #[doc(alias = "get_hello_time")]
    pub fn hello_time(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_get_hello_time(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`mac-address`][struct@crate::SettingBridge#mac-address] property of the setting
    #[doc(alias = "nm_setting_bridge_get_mac_address")]
    #[doc(alias = "get_mac_address")]
    pub fn mac_address(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_bridge_get_mac_address(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`max-age`][struct@crate::SettingBridge#max-age] property of the setting
    #[doc(alias = "nm_setting_bridge_get_max_age")]
    #[doc(alias = "get_max_age")]
    pub fn max_age(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_get_max_age(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-hash-max`][struct@crate::SettingBridge#multicast-hash-max] property of the setting
    #[cfg(any(feature = "v1_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_26")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_hash_max")]
    #[doc(alias = "get_multicast_hash_max")]
    pub fn multicast_hash_max(&self) -> u32 {
        unsafe { ffi::nm_setting_bridge_get_multicast_hash_max(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-last-member-count`][struct@crate::SettingBridge#multicast-last-member-count] property of the setting
    #[cfg(any(feature = "v1_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_26")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_last_member_count")]
    #[doc(alias = "get_multicast_last_member_count")]
    pub fn multicast_last_member_count(&self) -> u32 {
        unsafe { ffi::nm_setting_bridge_get_multicast_last_member_count(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-last-member-interval`][struct@crate::SettingBridge#multicast-last-member-interval] property of the setting
    #[cfg(any(feature = "v1_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_26")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_last_member_interval")]
    #[doc(alias = "get_multicast_last_member_interval")]
    pub fn multicast_last_member_interval(&self) -> u64 {
        unsafe { ffi::nm_setting_bridge_get_multicast_last_member_interval(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-membership-interval`][struct@crate::SettingBridge#multicast-membership-interval] property of the setting
    #[cfg(any(feature = "v1_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_26")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_membership_interval")]
    #[doc(alias = "get_multicast_membership_interval")]
    pub fn multicast_membership_interval(&self) -> u64 {
        unsafe { ffi::nm_setting_bridge_get_multicast_membership_interval(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-querier`][struct@crate::SettingBridge#multicast-querier] property of the setting
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_querier")]
    #[doc(alias = "get_multicast_querier")]
    pub fn is_multicast_querier(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_bridge_get_multicast_querier(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-querier-interval`][struct@crate::SettingBridge#multicast-querier-interval] property of the setting
    #[cfg(any(feature = "v1_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_26")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_querier_interval")]
    #[doc(alias = "get_multicast_querier_interval")]
    pub fn multicast_querier_interval(&self) -> u64 {
        unsafe { ffi::nm_setting_bridge_get_multicast_querier_interval(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-query-interval`][struct@crate::SettingBridge#multicast-query-interval] property of the setting
    #[cfg(any(feature = "v1_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_26")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_query_interval")]
    #[doc(alias = "get_multicast_query_interval")]
    pub fn multicast_query_interval(&self) -> u64 {
        unsafe { ffi::nm_setting_bridge_get_multicast_query_interval(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-query-response-interval`][struct@crate::SettingBridge#multicast-query-response-interval] property of the setting
    #[cfg(any(feature = "v1_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_26")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_query_response_interval")]
    #[doc(alias = "get_multicast_query_response_interval")]
    pub fn multicast_query_response_interval(&self) -> u64 {
        unsafe {
            ffi::nm_setting_bridge_get_multicast_query_response_interval(self.to_glib_none().0)
        }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-query-use-ifaddr`][struct@crate::SettingBridge#multicast-query-use-ifaddr] property of the setting
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_query_use_ifaddr")]
    #[doc(alias = "get_multicast_query_use_ifaddr")]
    pub fn is_multicast_query_use_ifaddr(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_bridge_get_multicast_query_use_ifaddr(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-router`][struct@crate::SettingBridge#multicast-router] property of the setting
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_router")]
    #[doc(alias = "get_multicast_router")]
    pub fn multicast_router(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_bridge_get_multicast_router(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-snooping`][struct@crate::SettingBridge#multicast-snooping] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_snooping")]
    #[doc(alias = "get_multicast_snooping")]
    pub fn is_multicast_snooping(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_bridge_get_multicast_snooping(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-query-response-interval`][struct@crate::SettingBridge#multicast-query-response-interval] property of the setting
    #[cfg(any(feature = "v1_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_26")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_startup_query_count")]
    #[doc(alias = "get_multicast_startup_query_count")]
    pub fn multicast_startup_query_count(&self) -> u32 {
        unsafe { ffi::nm_setting_bridge_get_multicast_startup_query_count(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`multicast-startup-query-interval`][struct@crate::SettingBridge#multicast-startup-query-interval] property of the setting
    #[cfg(any(feature = "v1_26", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_26")))]
    #[doc(alias = "nm_setting_bridge_get_multicast_startup_query_interval")]
    #[doc(alias = "get_multicast_startup_query_interval")]
    pub fn multicast_startup_query_interval(&self) -> u64 {
        unsafe {
            ffi::nm_setting_bridge_get_multicast_startup_query_interval(self.to_glib_none().0)
        }
    }

    ///
    /// # Returns
    ///
    /// the number of VLANs
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_get_num_vlans")]
    #[doc(alias = "get_num_vlans")]
    pub fn num_vlans(&self) -> u32 {
        unsafe { ffi::nm_setting_bridge_get_num_vlans(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`priority`][struct@crate::SettingBridge#priority] property of the setting
    #[doc(alias = "nm_setting_bridge_get_priority")]
    #[doc(alias = "get_priority")]
    pub fn priority(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_get_priority(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`stp`][struct@crate::SettingBridge#stp] property of the setting
    #[doc(alias = "nm_setting_bridge_get_stp")]
    #[doc(alias = "get_stp")]
    pub fn is_stp(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_bridge_get_stp(self.to_glib_none().0)) }
    }

    /// ## `idx`
    /// index number of the VLAN to return
    ///
    /// # Returns
    ///
    /// the VLAN at index `idx`
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_get_vlan")]
    #[doc(alias = "get_vlan")]
    pub fn vlan(&self, idx: u32) -> Option<BridgeVlan> {
        unsafe { from_glib_none(ffi::nm_setting_bridge_get_vlan(self.to_glib_none().0, idx)) }
    }

    ///
    /// # Returns
    ///
    /// the [`vlan-default-pvid`][struct@crate::SettingBridge#vlan-default-pvid] property of the setting
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_get_vlan_default_pvid")]
    #[doc(alias = "get_vlan_default_pvid")]
    pub fn vlan_default_pvid(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_get_vlan_default_pvid(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`vlan-filtering`][struct@crate::SettingBridge#vlan-filtering] property of the setting
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_get_vlan_filtering")]
    #[doc(alias = "get_vlan_filtering")]
    pub fn is_vlan_filtering(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_bridge_get_vlan_filtering(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`vlan-protocol`][struct@crate::SettingBridge#vlan-protocol] property of the setting
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "nm_setting_bridge_get_vlan_protocol")]
    #[doc(alias = "get_vlan_protocol")]
    pub fn vlan_protocol(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_bridge_get_vlan_protocol(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`vlan-stats-enabled`][struct@crate::SettingBridge#vlan-stats-enabled] property of the setting
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "nm_setting_bridge_get_vlan_stats_enabled")]
    #[doc(alias = "get_vlan_stats_enabled")]
    pub fn is_vlan_stats_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_bridge_get_vlan_stats_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    /// Removes the vlan at index `idx`.
    /// ## `idx`
    /// index number of the VLAN.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_remove_vlan")]
    pub fn remove_vlan(&self, idx: u32) {
        unsafe {
            ffi::nm_setting_bridge_remove_vlan(self.to_glib_none().0, idx);
        }
    }

    /// Remove the VLAN with range `vid_start` to `vid_end`.
    /// If `vid_end` is zero, it is assumed to be equal to `vid_start`
    /// and so the single-id VLAN with id `vid_start` is removed.
    /// ## `vid_start`
    /// the vlan start index
    /// ## `vid_end`
    /// the vlan end index
    ///
    /// # Returns
    ///
    /// [`true`] if the vlan was found and removed; [`false`] otherwise
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_remove_vlan_by_vid")]
    pub fn remove_vlan_by_vid(&self, vid_start: u16, vid_end: u16) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_bridge_remove_vlan_by_vid(
                self.to_glib_none().0,
                vid_start,
                vid_end,
            ))
        }
    }

    /// The Ethernet MAC address aging time, in seconds.
    #[doc(alias = "ageing-time")]
    pub fn set_ageing_time(&self, ageing_time: u32) {
        glib::ObjectExt::set_property(self, "ageing-time", &ageing_time)
    }

    /// The Spanning Tree Protocol (STP) forwarding delay, in seconds.
    #[doc(alias = "forward-delay")]
    pub fn set_forward_delay(&self, forward_delay: u32) {
        glib::ObjectExt::set_property(self, "forward-delay", &forward_delay)
    }

    /// If specified, The MAC address of the multicast group this bridge uses for STP.
    ///
    /// The address must be a link-local address in standard Ethernet MAC address format,
    /// ie an address of the form 01:80:C2:00:00:0X, with X in [0, 4..F].
    /// If not specified the default value is 01:80:C2:00:00:00.
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "group-address")]
    pub fn set_group_address(&self, group_address: Option<&str>) {
        glib::ObjectExt::set_property(self, "group-address", &group_address)
    }

    /// A mask of group addresses to forward. Usually, group addresses in
    /// the range from 01:80:C2:00:00:00 to 01:80:C2:00:00:0F are not
    /// forwarded according to standards. This property is a mask of 16 bits,
    /// each corresponding to a group address in that range that must be
    /// forwarded. The mask can't have bits 0, 1 or 2 set because they are
    /// used for STP, MAC pause frames and LACP.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "group-forward-mask")]
    pub fn set_group_forward_mask(&self, group_forward_mask: u32) {
        glib::ObjectExt::set_property(self, "group-forward-mask", &group_forward_mask)
    }

    /// The Spanning Tree Protocol (STP) hello time, in seconds.
    #[doc(alias = "hello-time")]
    pub fn set_hello_time(&self, hello_time: u32) {
        glib::ObjectExt::set_property(self, "hello-time", &hello_time)
    }

    /// If specified, the MAC address of bridge. When creating a new bridge, this
    /// MAC address will be set.
    ///
    /// If this field is left unspecified, the "ethernet.cloned-mac-address" is
    /// referred instead to generate the initial MAC address. Note that setting
    /// "ethernet.cloned-mac-address" anyway overwrites the MAC address of
    /// the bridge later while activating the bridge. Hence, this property
    /// is deprecated.
    ///
    /// # Deprecated since 1.12
    ///
    /// Use the ethernet.cloned-mac-address property instead.
    #[cfg_attr(feature = "v1_12", deprecated = "Since 1.12")]
    #[doc(alias = "mac-address")]
    pub fn set_mac_address(&self, mac_address: Option<&str>) {
        glib::ObjectExt::set_property(self, "mac-address", &mac_address)
    }

    /// The Spanning Tree Protocol (STP) maximum message age, in seconds.
    #[doc(alias = "max-age")]
    pub fn set_max_age(&self, max_age: u32) {
        glib::ObjectExt::set_property(self, "max-age", &max_age)
    }

    /// Set maximum size of multicast hash table (value must be a power of 2).
    #[doc(alias = "multicast-hash-max")]
    pub fn get_property_multicast_hash_max(&self) -> u32 {
        glib::ObjectExt::property(self, "multicast-hash-max")
    }

    /// Set maximum size of multicast hash table (value must be a power of 2).
    #[doc(alias = "multicast-hash-max")]
    pub fn set_multicast_hash_max(&self, multicast_hash_max: u32) {
        glib::ObjectExt::set_property(self, "multicast-hash-max", &multicast_hash_max)
    }

    /// Set the number of queries the bridge will send before
    /// stopping forwarding a multicast group after a "leave"
    /// message has been received.
    #[doc(alias = "multicast-last-member-count")]
    pub fn get_property_multicast_last_member_count(&self) -> u32 {
        glib::ObjectExt::property(self, "multicast-last-member-count")
    }

    /// Set the number of queries the bridge will send before
    /// stopping forwarding a multicast group after a "leave"
    /// message has been received.
    #[doc(alias = "multicast-last-member-count")]
    pub fn set_multicast_last_member_count(&self, multicast_last_member_count: u32) {
        glib::ObjectExt::set_property(
            self,
            "multicast-last-member-count",
            &multicast_last_member_count,
        )
    }

    /// Set interval (in deciseconds) between queries to find remaining
    /// members of a group, after a "leave" message is received.
    #[doc(alias = "multicast-last-member-interval")]
    pub fn get_property_multicast_last_member_interval(&self) -> u64 {
        glib::ObjectExt::property(self, "multicast-last-member-interval")
    }

    /// Set interval (in deciseconds) between queries to find remaining
    /// members of a group, after a "leave" message is received.
    #[doc(alias = "multicast-last-member-interval")]
    pub fn set_multicast_last_member_interval(&self, multicast_last_member_interval: u64) {
        glib::ObjectExt::set_property(
            self,
            "multicast-last-member-interval",
            &multicast_last_member_interval,
        )
    }

    /// Set delay (in deciseconds) after which the bridge will
    /// leave a group, if no membership reports for this
    /// group are received.
    #[doc(alias = "multicast-membership-interval")]
    pub fn get_property_multicast_membership_interval(&self) -> u64 {
        glib::ObjectExt::property(self, "multicast-membership-interval")
    }

    /// Set delay (in deciseconds) after which the bridge will
    /// leave a group, if no membership reports for this
    /// group are received.
    #[doc(alias = "multicast-membership-interval")]
    pub fn set_multicast_membership_interval(&self, multicast_membership_interval: u64) {
        glib::ObjectExt::set_property(
            self,
            "multicast-membership-interval",
            &multicast_membership_interval,
        )
    }

    /// Enable or disable sending of multicast queries by the bridge.
    /// If not specified the option is disabled.
    #[doc(alias = "multicast-querier")]
    pub fn get_property_multicast_querier(&self) -> bool {
        glib::ObjectExt::property(self, "multicast-querier")
    }

    /// Enable or disable sending of multicast queries by the bridge.
    /// If not specified the option is disabled.
    #[doc(alias = "multicast-querier")]
    pub fn set_multicast_querier(&self, multicast_querier: bool) {
        glib::ObjectExt::set_property(self, "multicast-querier", &multicast_querier)
    }

    /// If no queries are seen after this delay (in deciseconds) has passed,
    /// the bridge will start to send its own queries.
    #[doc(alias = "multicast-querier-interval")]
    pub fn get_property_multicast_querier_interval(&self) -> u64 {
        glib::ObjectExt::property(self, "multicast-querier-interval")
    }

    /// If no queries are seen after this delay (in deciseconds) has passed,
    /// the bridge will start to send its own queries.
    #[doc(alias = "multicast-querier-interval")]
    pub fn set_multicast_querier_interval(&self, multicast_querier_interval: u64) {
        glib::ObjectExt::set_property(
            self,
            "multicast-querier-interval",
            &multicast_querier_interval,
        )
    }

    /// Interval (in deciseconds) between queries sent
    /// by the bridge after the end of the startup phase.
    #[doc(alias = "multicast-query-interval")]
    pub fn get_property_multicast_query_interval(&self) -> u64 {
        glib::ObjectExt::property(self, "multicast-query-interval")
    }

    /// Interval (in deciseconds) between queries sent
    /// by the bridge after the end of the startup phase.
    #[doc(alias = "multicast-query-interval")]
    pub fn set_multicast_query_interval(&self, multicast_query_interval: u64) {
        glib::ObjectExt::set_property(self, "multicast-query-interval", &multicast_query_interval)
    }

    /// Set the Max Response Time/Max Response Delay
    /// (in deciseconds) for IGMP/MLD queries sent by the bridge.
    #[doc(alias = "multicast-query-response-interval")]
    pub fn get_property_multicast_query_response_interval(&self) -> u64 {
        glib::ObjectExt::property(self, "multicast-query-response-interval")
    }

    /// Set the Max Response Time/Max Response Delay
    /// (in deciseconds) for IGMP/MLD queries sent by the bridge.
    #[doc(alias = "multicast-query-response-interval")]
    pub fn set_multicast_query_response_interval(&self, multicast_query_response_interval: u64) {
        glib::ObjectExt::set_property(
            self,
            "multicast-query-response-interval",
            &multicast_query_response_interval,
        )
    }

    /// If enabled the bridge's own IP address is used as
    /// the source address for IGMP queries otherwise
    /// the default of 0.0.0.0 is used.
    #[doc(alias = "multicast-query-use-ifaddr")]
    pub fn get_property_multicast_query_use_ifaddr(&self) -> bool {
        glib::ObjectExt::property(self, "multicast-query-use-ifaddr")
    }

    /// If enabled the bridge's own IP address is used as
    /// the source address for IGMP queries otherwise
    /// the default of 0.0.0.0 is used.
    #[doc(alias = "multicast-query-use-ifaddr")]
    pub fn set_multicast_query_use_ifaddr(&self, multicast_query_use_ifaddr: bool) {
        glib::ObjectExt::set_property(
            self,
            "multicast-query-use-ifaddr",
            &multicast_query_use_ifaddr,
        )
    }

    /// Sets bridge's multicast router. Multicast-snooping must be enabled
    /// for this option to work.
    ///
    /// Supported values are: 'auto', 'disabled', 'enabled' to which kernel
    /// assigns the numbers 1, 0, and 2, respectively.
    /// If not specified the default value is 'auto' (1).
    #[doc(alias = "multicast-router")]
    pub fn get_property_multicast_router(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "multicast-router")
    }

    /// Sets bridge's multicast router. Multicast-snooping must be enabled
    /// for this option to work.
    ///
    /// Supported values are: 'auto', 'disabled', 'enabled' to which kernel
    /// assigns the numbers 1, 0, and 2, respectively.
    /// If not specified the default value is 'auto' (1).
    #[doc(alias = "multicast-router")]
    pub fn set_multicast_router(&self, multicast_router: Option<&str>) {
        glib::ObjectExt::set_property(self, "multicast-router", &multicast_router)
    }

    /// Controls whether IGMP snooping is enabled for this bridge.
    /// Note that if snooping was automatically disabled due to hash collisions,
    /// the system may refuse to enable the feature until the collisions are
    /// resolved.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "multicast-snooping")]
    pub fn set_multicast_snooping(&self, multicast_snooping: bool) {
        glib::ObjectExt::set_property(self, "multicast-snooping", &multicast_snooping)
    }

    /// Set the number of IGMP queries to send during startup phase.
    #[doc(alias = "multicast-startup-query-count")]
    pub fn get_property_multicast_startup_query_count(&self) -> u32 {
        glib::ObjectExt::property(self, "multicast-startup-query-count")
    }

    /// Set the number of IGMP queries to send during startup phase.
    #[doc(alias = "multicast-startup-query-count")]
    pub fn set_multicast_startup_query_count(&self, multicast_startup_query_count: u32) {
        glib::ObjectExt::set_property(
            self,
            "multicast-startup-query-count",
            &multicast_startup_query_count,
        )
    }

    /// Sets the time (in deciseconds) between queries sent out
    /// at startup to determine membership information.
    #[doc(alias = "multicast-startup-query-interval")]
    pub fn get_property_multicast_startup_query_interval(&self) -> u64 {
        glib::ObjectExt::property(self, "multicast-startup-query-interval")
    }

    /// Sets the time (in deciseconds) between queries sent out
    /// at startup to determine membership information.
    #[doc(alias = "multicast-startup-query-interval")]
    pub fn set_multicast_startup_query_interval(&self, multicast_startup_query_interval: u64) {
        glib::ObjectExt::set_property(
            self,
            "multicast-startup-query-interval",
            &multicast_startup_query_interval,
        )
    }

    /// Sets the Spanning Tree Protocol (STP) priority for this bridge. Lower
    /// values are "better"; the lowest priority bridge will be elected the root
    /// bridge.
    pub fn set_priority(&self, priority: u32) {
        glib::ObjectExt::set_property(self, "priority", &priority)
    }

    /// Controls whether Spanning Tree Protocol (STP) is enabled for this bridge.
    pub fn set_stp(&self, stp: bool) {
        glib::ObjectExt::set_property(self, "stp", &stp)
    }

    /// The default PVID for the ports of the bridge, that is the VLAN id
    /// assigned to incoming untagged frames.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "vlan-default-pvid")]
    pub fn set_vlan_default_pvid(&self, vlan_default_pvid: u32) {
        glib::ObjectExt::set_property(self, "vlan-default-pvid", &vlan_default_pvid)
    }

    /// Control whether VLAN filtering is enabled on the bridge.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "vlan-filtering")]
    pub fn set_vlan_filtering(&self, vlan_filtering: bool) {
        glib::ObjectExt::set_property(self, "vlan-filtering", &vlan_filtering)
    }

    /// If specified, the protocol used for VLAN filtering.
    ///
    /// Supported values are: '802.1Q', '802.1ad'.
    /// If not specified the default value is '802.1Q'.
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "vlan-protocol")]
    pub fn set_vlan_protocol(&self, vlan_protocol: Option<&str>) {
        glib::ObjectExt::set_property(self, "vlan-protocol", &vlan_protocol)
    }

    /// Controls whether per-VLAN stats accounting is enabled.
    #[doc(alias = "vlan-stats-enabled")]
    pub fn get_property_vlan_stats_enabled(&self) -> bool {
        glib::ObjectExt::property(self, "vlan-stats-enabled")
    }

    /// Controls whether per-VLAN stats accounting is enabled.
    #[doc(alias = "vlan-stats-enabled")]
    pub fn set_vlan_stats_enabled(&self, vlan_stats_enabled: bool) {
        glib::ObjectExt::set_property(self, "vlan-stats-enabled", &vlan_stats_enabled)
    }

    #[doc(alias = "ageing-time")]
    pub fn connect_ageing_time_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ageing_time_trampoline<F: Fn(&SettingBridge) + 'static>(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ageing-time\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ageing_time_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "forward-delay")]
    pub fn connect_forward_delay_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_forward_delay_trampoline<F: Fn(&SettingBridge) + 'static>(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::forward-delay\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_forward_delay_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "group-address")]
    pub fn connect_group_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_group_address_trampoline<F: Fn(&SettingBridge) + 'static>(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::group-address\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_group_address_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "group-forward-mask")]
    pub fn connect_group_forward_mask_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_group_forward_mask_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::group-forward-mask\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_group_forward_mask_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "hello-time")]
    pub fn connect_hello_time_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hello_time_trampoline<F: Fn(&SettingBridge) + 'static>(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hello-time\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hello_time_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg_attr(feature = "v1_12", deprecated = "Since 1.12")]
    #[doc(alias = "mac-address")]
    pub fn connect_mac_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mac_address_trampoline<F: Fn(&SettingBridge) + 'static>(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mac-address\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mac_address_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "max-age")]
    pub fn connect_max_age_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_max_age_trampoline<F: Fn(&SettingBridge) + 'static>(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::max-age\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_max_age_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "multicast-hash-max")]
    pub fn connect_multicast_hash_max_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_hash_max_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-hash-max\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_hash_max_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "multicast-last-member-count")]
    pub fn connect_multicast_last_member_count_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_last_member_count_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-last-member-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_last_member_count_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "multicast-last-member-interval")]
    pub fn connect_multicast_last_member_interval_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_last_member_interval_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-last-member-interval\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_last_member_interval_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "multicast-membership-interval")]
    pub fn connect_multicast_membership_interval_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_membership_interval_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-membership-interval\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_membership_interval_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "multicast-querier")]
    pub fn connect_multicast_querier_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_querier_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-querier\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_querier_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "multicast-querier-interval")]
    pub fn connect_multicast_querier_interval_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_querier_interval_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-querier-interval\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_querier_interval_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "multicast-query-interval")]
    pub fn connect_multicast_query_interval_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_query_interval_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-query-interval\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_query_interval_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "multicast-query-response-interval")]
    pub fn connect_multicast_query_response_interval_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_query_response_interval_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-query-response-interval\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_query_response_interval_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "multicast-query-use-ifaddr")]
    pub fn connect_multicast_query_use_ifaddr_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_query_use_ifaddr_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-query-use-ifaddr\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_query_use_ifaddr_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "multicast-router")]
    pub fn connect_multicast_router_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_router_trampoline<F: Fn(&SettingBridge) + 'static>(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-router\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_router_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "multicast-snooping")]
    pub fn connect_multicast_snooping_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_snooping_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-snooping\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_snooping_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "multicast-startup-query-count")]
    pub fn connect_multicast_startup_query_count_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_startup_query_count_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-startup-query-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_startup_query_count_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "multicast-startup-query-interval")]
    pub fn connect_multicast_startup_query_interval_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multicast_startup_query_interval_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multicast-startup-query-interval\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_multicast_startup_query_interval_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "priority")]
    pub fn connect_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_trampoline<F: Fn(&SettingBridge) + 'static>(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::priority\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_priority_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "stp")]
    pub fn connect_stp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_stp_trampoline<F: Fn(&SettingBridge) + 'static>(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::stp\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_stp_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "vlan-default-pvid")]
    pub fn connect_vlan_default_pvid_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_vlan_default_pvid_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vlan-default-pvid\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vlan_default_pvid_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "vlan-filtering")]
    pub fn connect_vlan_filtering_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vlan_filtering_trampoline<F: Fn(&SettingBridge) + 'static>(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vlan-filtering\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vlan_filtering_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "vlan-protocol")]
    pub fn connect_vlan_protocol_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vlan_protocol_trampoline<F: Fn(&SettingBridge) + 'static>(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vlan-protocol\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vlan_protocol_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "vlan-stats-enabled")]
    pub fn connect_vlan_stats_enabled_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_vlan_stats_enabled_trampoline<
            F: Fn(&SettingBridge) + 'static,
        >(
            this: *mut ffi::NMSettingBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vlan-stats-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vlan_stats_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for SettingBridge {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingBridge {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingBridge")
    }
}
