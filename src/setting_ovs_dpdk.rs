// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_20", feature = "dox"))]
use glib::object::Cast;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use glib::Value;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use glib_sys;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use gobject_sys;
use nm_sys;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use std::mem::transmute;
use Setting;

glib_wrapper! {
    pub struct SettingOvsDpdk(Object<nm_sys::NMSettingOvsDpdk, nm_sys::NMSettingOvsDpdkClass, SettingOvsDpdkClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_ovs_dpdk_get_type(),
    }
}

impl SettingOvsDpdk {
    /// Creates a new `SettingOvsDpdk` object with default values.
    ///
    /// Feature: `v1_20`
    ///
    ///
    /// # Returns
    ///
    /// the new empty `SettingOvsDpdk` object
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn new() -> SettingOvsDpdk {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_ovs_dpdk_new()).unsafe_cast() }
    }

    ///
    /// Feature: `v1_20`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingOvsDpdk:devargs` property of the setting
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn get_devargs(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_ovs_dpdk_get_devargs(
                self.to_glib_none().0,
            ))
        }
    }

    /// Open vSwitch DPDK device arguments.
    ///
    /// Feature: `v1_20`
    ///
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn set_property_devargs(&self, devargs: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"devargs\0".as_ptr() as *const _,
                Value::from(devargs).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn connect_property_devargs_notify<F: Fn(&SettingOvsDpdk) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_devargs_trampoline<F: Fn(&SettingOvsDpdk) + 'static>(
            this: *mut nm_sys::NMSettingOvsDpdk,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::devargs\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_devargs_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_20", feature = "dox"))]
impl Default for SettingOvsDpdk {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingOvsDpdk {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingOvsDpdk")
    }
}
