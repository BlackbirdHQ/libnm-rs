// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
#[cfg(any(feature = "v1_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::fmt;
#[cfg(any(feature = "v1_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
use std::{boxed::Box as Box_, mem::transmute};

glib::wrapper! {
    /// OvsDpdk Link Settings
    ///
    /// ## Properties
    ///
    ///
    /// #### `devargs`
    ///  Open vSwitch DPDK device arguments.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `n-rxq`
    ///  Open vSwitch DPDK number of rx queues.
    /// Defaults to zero which means to leave the parameter in OVS unspecified
    /// and effectively configures one queue.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Setting</h4></summary>
    ///
    ///
    /// #### `name`
    ///  The setting's name, which uniquely identifies the setting within the
    /// connection. Each setting type has a name unique to that type, for
    /// example "ppp" or "802-11-wireless" or "802-3-ethernet".
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`SettingExt`][trait@crate::prelude::SettingExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMSettingOvsDpdk")]
    pub struct SettingOvsDpdk(Object<ffi::NMSettingOvsDpdk, ffi::NMSettingOvsDpdkClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_ovs_dpdk_get_type(),
    }
}

impl SettingOvsDpdk {
    /// Creates a new [`SettingOvsDpdk`][crate::SettingOvsDpdk] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingOvsDpdk`][crate::SettingOvsDpdk] object
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "nm_setting_ovs_dpdk_new")]
    pub fn new() -> SettingOvsDpdk {
        unsafe { Setting::from_glib_full(ffi::nm_setting_ovs_dpdk_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the [`devargs`][struct@crate::SettingOvsDpdk#devargs] property of the setting
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "nm_setting_ovs_dpdk_get_devargs")]
    #[doc(alias = "get_devargs")]
    pub fn devargs(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_ovs_dpdk_get_devargs(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`n-rxq`][struct@crate::SettingOvsDpdk#n-rxq] property of the setting
    #[cfg(any(feature = "v1_36", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_36")))]
    #[doc(alias = "nm_setting_ovs_dpdk_get_n_rxq")]
    #[doc(alias = "get_n_rxq")]
    pub fn n_rxq(&self) -> u32 {
        unsafe { ffi::nm_setting_ovs_dpdk_get_n_rxq(self.to_glib_none().0) }
    }

    /// Open vSwitch DPDK device arguments.
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    pub fn set_devargs(&self, devargs: Option<&str>) {
        glib::ObjectExt::set_property(self, "devargs", &devargs)
    }

    /// Open vSwitch DPDK number of rx queues.
    /// Defaults to zero which means to leave the parameter in OVS unspecified
    /// and effectively configures one queue.
    #[cfg(any(feature = "v1_36", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_36")))]
    #[doc(alias = "n-rxq")]
    pub fn set_n_rxq(&self, n_rxq: u32) {
        glib::ObjectExt::set_property(self, "n-rxq", &n_rxq)
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "devargs")]
    pub fn connect_devargs_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_devargs_trampoline<F: Fn(&SettingOvsDpdk) + 'static>(
            this: *mut ffi::NMSettingOvsDpdk,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::devargs\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_devargs_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_36", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_36")))]
    #[doc(alias = "n-rxq")]
    pub fn connect_n_rxq_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_n_rxq_trampoline<F: Fn(&SettingOvsDpdk) + 'static>(
            this: *mut ffi::NMSettingOvsDpdk,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::n-rxq\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_n_rxq_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
impl Default for SettingOvsDpdk {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingOvsDpdk {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingOvsDpdk")
    }
}
