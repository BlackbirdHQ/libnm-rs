// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Device;
use crate::DeviceModemCapabilities;
use crate::Object;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMDeviceModem")]
    pub struct DeviceModem(Object<ffi::NMDeviceModem, ffi::NMDeviceModemClass>) @extends Device, Object;

    match fn {
        type_ => || ffi::nm_device_modem_get_type(),
    }
}

impl DeviceModem {
    /// The access point name the modem is connected to.
    ///
    /// # Returns
    ///
    /// the APN name or [`None`] if disconnected
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "nm_device_modem_get_apn")]
    #[doc(alias = "get_apn")]
    pub fn apn(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_device_modem_get_apn(self.to_glib_none().0)) }
    }

    /// Returns a bitfield of the generic access technology families the modem
    /// supports without a firmware reload or reinitialization. This value
    /// represents the network types the modem can immediately connect to.
    ///
    /// # Returns
    ///
    /// the generic access technology families the modem supports without
    /// a firmware reload or other reinitialization
    #[doc(alias = "nm_device_modem_get_current_capabilities")]
    #[doc(alias = "get_current_capabilities")]
    pub fn current_capabilities(&self) -> DeviceModemCapabilities {
        unsafe {
            from_glib(ffi::nm_device_modem_get_current_capabilities(
                self.to_glib_none().0,
            ))
        }
    }

    /// An identifier used by the modem backend (ModemManager) that aims to
    /// uniquely identify the a device. Can be used to match a connection to a
    /// particular device.
    ///
    /// # Returns
    ///
    /// a device-id string
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "nm_device_modem_get_device_id")]
    #[doc(alias = "get_device_id")]
    pub fn device_id(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_device_modem_get_device_id(self.to_glib_none().0)) }
    }

    /// Returns a bitfield of the generic access technology families the modem
    /// supports. Not all capabilities are available concurrently however; some
    /// may require a firmware reload or reinitialization.
    ///
    /// # Returns
    ///
    /// the generic access technology families the modem supports
    #[doc(alias = "nm_device_modem_get_modem_capabilities")]
    #[doc(alias = "get_modem_capabilities")]
    pub fn modem_capabilities(&self) -> DeviceModemCapabilities {
        unsafe {
            from_glib(ffi::nm_device_modem_get_modem_capabilities(
                self.to_glib_none().0,
            ))
        }
    }

    /// The MCC and MNC (concatenated) of the network the modem is connected to.
    ///
    /// # Returns
    ///
    /// the operator code or [`None`] if disconnected or not a 3GPP modem.
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "nm_device_modem_get_operator_code")]
    #[doc(alias = "get_operator_code")]
    pub fn operator_code(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_device_modem_get_operator_code(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "apn")]
    pub fn connect_apn_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_apn_trampoline<F: Fn(&DeviceModem) + 'static>(
            this: *mut ffi::NMDeviceModem,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::apn\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_apn_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "current-capabilities")]
    pub fn connect_current_capabilities_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_capabilities_trampoline<
            F: Fn(&DeviceModem) + 'static,
        >(
            this: *mut ffi::NMDeviceModem,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::current-capabilities\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_current_capabilities_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "device-id")]
    pub fn connect_device_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_device_id_trampoline<F: Fn(&DeviceModem) + 'static>(
            this: *mut ffi::NMDeviceModem,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::device-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_device_id_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "modem-capabilities")]
    pub fn connect_modem_capabilities_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_modem_capabilities_trampoline<F: Fn(&DeviceModem) + 'static>(
            this: *mut ffi::NMDeviceModem,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::modem-capabilities\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_modem_capabilities_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "operator-code")]
    pub fn connect_operator_code_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_operator_code_trampoline<F: Fn(&DeviceModem) + 'static>(
            this: *mut ffi::NMDeviceModem,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::operator-code\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_operator_code_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DeviceModem {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DeviceModem")
    }
}
