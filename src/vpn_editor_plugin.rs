// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Connection;
use crate::VpnEditor;
use crate::VpnEditorPluginCapability;
#[cfg(any(feature = "v1_4", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
use crate::VpnPluginInfo;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "NMVpnEditorPlugin")]
    pub struct VpnEditorPlugin(Interface<ffi::NMVpnEditorPlugin, ffi::NMVpnEditorPluginInterface>);

    match fn {
        type_ => || ffi::nm_vpn_editor_plugin_get_type(),
    }
}

impl VpnEditorPlugin {
    /// Load the shared library `plugin_name` and create a new
    /// [`VpnEditorPlugin`][crate::VpnEditorPlugin] instance via the `NMVpnEditorPluginFactory`
    /// function.
    ///
    /// This is similar to [`load_from_file()`][Self::load_from_file()], but
    /// it does no validation of the plugin name, instead passes it directly
    /// to `dlopen()`. If you have the full path to a plugin file,
    /// [`load_from_file()`][Self::load_from_file()] is preferred.
    /// ## `plugin_name`
    /// The name of the shared library to load.
    ///  This path will be directly passed to `dlopen()` without
    ///  further checks.
    /// ## `check_service`
    /// if not-null, check that the loaded plugin advertises
    ///  the given service.
    ///
    /// # Returns
    ///
    /// a new plugin instance or [`None`] on error.
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "nm_vpn_editor_plugin_load")]
    pub fn load(plugin_name: &str, check_service: &str) -> Result<VpnEditorPlugin, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_vpn_editor_plugin_load(
                plugin_name.to_glib_none().0,
                check_service.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //#[cfg(any(feature = "v1_2", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    //#[doc(alias = "nm_vpn_editor_plugin_load_from_file")]
    //pub fn load_from_file<P: FnMut(&str, Option<&glib::Error>) -> bool>(plugin_name: &str, check_service: &str, check_owner: i32, check_file: P) -> Result<VpnEditorPlugin, glib::Error> {
    //    unsafe { TODO: call ffi:nm_vpn_editor_plugin_load_from_file() }
    //}
}

pub const NONE_VPN_EDITOR_PLUGIN: Option<&VpnEditorPlugin> = None;

/// Trait containing all [`struct@VpnEditorPlugin`] methods.
///
/// # Implementors
///
/// [`VpnEditorPlugin`][struct@crate::VpnEditorPlugin]
pub trait VpnEditorPluginExt: 'static {
    #[doc(alias = "nm_vpn_editor_plugin_export")]
    fn export<P: IsA<Connection>>(&self, path: &str, connection: &P) -> Result<(), glib::Error>;

    #[doc(alias = "nm_vpn_editor_plugin_get_capabilities")]
    #[doc(alias = "get_capabilities")]
    fn capabilities(&self) -> VpnEditorPluginCapability;

    /// ## `connection`
    /// the [`Connection`][crate::Connection] to be edited
    ///
    /// # Returns
    ///
    /// a new [`VpnEditor`][crate::VpnEditor] or [`None`] on error
    #[doc(alias = "nm_vpn_editor_plugin_get_editor")]
    #[doc(alias = "get_editor")]
    fn editor<P: IsA<Connection>>(&self, connection: &P) -> Result<VpnEditor, glib::Error>;

    ///
    /// # Returns
    ///
    /// if set, return the [`VpnPluginInfo`][crate::VpnPluginInfo] instance.
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "nm_vpn_editor_plugin_get_plugin_info")]
    #[doc(alias = "get_plugin_info")]
    fn plugin_info(&self) -> Option<VpnPluginInfo>;

    #[doc(alias = "nm_vpn_editor_plugin_get_suggested_filename")]
    #[doc(alias = "get_suggested_filename")]
    fn suggested_filename<P: IsA<Connection>>(&self, connection: &P) -> Option<glib::GString>;

    //#[cfg(any(feature = "v1_4", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    //#[doc(alias = "nm_vpn_editor_plugin_get_vt")]
    //#[doc(alias = "get_vt")]
    //fn vt(&self, vt: /*Ignored*/VpnEditorPluginVT, vt_size: usize) -> usize;

    /// ## `path`
    /// full path to the file to attempt to read into a new [`Connection`][crate::Connection]
    ///
    /// # Returns
    ///
    /// a new [`Connection`][crate::Connection] imported from `path`, or [`None`]
    /// on error or if the file at `path` was not recognized by this plugin
    #[doc(alias = "nm_vpn_editor_plugin_import")]
    fn import(&self, path: &str) -> Result<Connection, glib::Error>;

    /// Set or clear the plugin-info instance.
    /// This takes a weak reference on `plugin_info`, to avoid circular
    /// reference as the plugin-info might also reference the editor-plugin.
    /// ## `plugin_info`
    /// a [`VpnPluginInfo`][crate::VpnPluginInfo] instance or [`None`]
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "nm_vpn_editor_plugin_set_plugin_info")]
    fn set_plugin_info(&self, plugin_info: Option<&VpnPluginInfo>);

    /// Longer description of the VPN plugin.
    fn description(&self) -> Option<glib::GString>;

    /// Short display name of the VPN plugin.
    fn name(&self) -> Option<glib::GString>;

    /// D-Bus service name of the plugin's VPN service.
    fn service(&self) -> Option<glib::GString>;

    #[doc(alias = "description")]
    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "service")]
    fn connect_service_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<VpnEditorPlugin>> VpnEditorPluginExt for O {
    fn export<P: IsA<Connection>>(&self, path: &str, connection: &P) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_vpn_editor_plugin_export(
                self.as_ref().to_glib_none().0,
                path.to_glib_none().0,
                connection.as_ref().to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn capabilities(&self) -> VpnEditorPluginCapability {
        unsafe {
            from_glib(ffi::nm_vpn_editor_plugin_get_capabilities(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn editor<P: IsA<Connection>>(&self, connection: &P) -> Result<VpnEditor, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_vpn_editor_plugin_get_editor(
                self.as_ref().to_glib_none().0,
                connection.as_ref().to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    fn plugin_info(&self) -> Option<VpnPluginInfo> {
        unsafe {
            from_glib_none(ffi::nm_vpn_editor_plugin_get_plugin_info(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn suggested_filename<P: IsA<Connection>>(&self, connection: &P) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::nm_vpn_editor_plugin_get_suggested_filename(
                self.as_ref().to_glib_none().0,
                connection.as_ref().to_glib_none().0,
            ))
        }
    }

    //#[cfg(any(feature = "v1_4", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    //fn vt(&self, vt: /*Ignored*/VpnEditorPluginVT, vt_size: usize) -> usize {
    //    unsafe { TODO: call ffi:nm_vpn_editor_plugin_get_vt() }
    //}

    fn import(&self, path: &str) -> Result<Connection, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_vpn_editor_plugin_import(
                self.as_ref().to_glib_none().0,
                path.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    fn set_plugin_info(&self, plugin_info: Option<&VpnPluginInfo>) {
        unsafe {
            ffi::nm_vpn_editor_plugin_set_plugin_info(
                self.as_ref().to_glib_none().0,
                plugin_info.to_glib_none().0,
            );
        }
    }

    fn description(&self) -> Option<glib::GString> {
        unsafe {
            let mut value = glib::Value::from_type(<glib::GString as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"description\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `description` getter")
        }
    }

    fn name(&self) -> Option<glib::GString> {
        unsafe {
            let mut value = glib::Value::from_type(<glib::GString as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"name\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `name` getter")
        }
    }

    fn service(&self) -> Option<glib::GString> {
        unsafe {
            let mut value = glib::Value::from_type(<glib::GString as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"service\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `service` getter")
        }
    }

    #[doc(alias = "description")]
    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<
            P: IsA<VpnEditorPlugin>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMVpnEditorPlugin,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&VpnEditorPlugin::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::description\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_description_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<
            P: IsA<VpnEditorPlugin>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMVpnEditorPlugin,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&VpnEditorPlugin::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "service")]
    fn connect_service_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_service_trampoline<
            P: IsA<VpnEditorPlugin>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMVpnEditorPlugin,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&VpnEditorPlugin::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::service\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_service_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for VpnEditorPlugin {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("VpnEditorPlugin")
    }
}
