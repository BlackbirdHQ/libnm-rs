// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_14", feature = "dox"))]
use glib::object::Cast;
use glib::translate::*;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use glib::GString;
use nm_sys;
use std::fmt;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use std::mem;
use Setting;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use Ternary;

glib_wrapper! {
    pub struct SettingEthtool(Object<nm_sys::NMSettingEthtool, nm_sys::NMSettingEthtoolClass, SettingEthtoolClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_ethtool_get_type(),
    }
}

impl SettingEthtool {
    /// Creates a new `SettingEthtool` object with default values.
    ///
    /// Feature: `v1_14`
    ///
    ///
    /// # Returns
    ///
    /// the new empty `SettingEthtool` object
    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn new() -> SettingEthtool {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_ethtool_new()).unsafe_cast() }
    }

    /// Clears all offload features settings
    ///
    /// Feature: `v1_14`
    ///
    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn clear_features(&self) {
        unsafe {
            nm_sys::nm_setting_ethtool_clear_features(self.to_glib_none().0);
        }
    }

    /// Gets and offload feature setting. Returns `Ternary::Default` if the
    /// feature is not set.
    ///
    /// Note that `optname` must be a valid name for a feature, according to
    /// `nm_ethtool_optname_is_feature`.
    ///
    /// Feature: `v1_14`
    ///
    /// ## `optname`
    /// option name of the offload feature to get
    ///
    /// # Returns
    ///
    /// a `Ternary` value indicating whether the offload feature
    ///  is enabled, disabled, or left untouched.
    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn get_feature(&self, optname: &str) -> Ternary {
        unsafe {
            from_glib(nm_sys::nm_setting_ethtool_get_feature(
                self.to_glib_none().0,
                optname.to_glib_none().0,
            ))
        }
    }

    /// This returns all options names that are set. This includes the feature names
    /// like `NM_ETHTOOL_OPTNAME_FEATURE_GRO`. See `nm_ethtool_optname_is_feature` to
    /// check whether the option name is valid for offload features.
    ///
    /// Feature: `v1_20`
    ///
    /// ## `out_length`
    /// return location for the number of keys returned, or `None`
    ///
    /// # Returns
    ///
    /// list of set option
    ///  names or `None` if no options are set. The option names are still owned by
    ///  `self` and may get invalidated when `self` gets modified.
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn get_optnames(&self) -> (Vec<GString>, u32) {
        unsafe {
            let mut out_length = mem::MaybeUninit::uninit();
            let ret =
                FromGlibPtrContainer::from_glib_container(nm_sys::nm_setting_ethtool_get_optnames(
                    self.to_glib_none().0,
                    out_length.as_mut_ptr(),
                ));
            let out_length = out_length.assume_init();
            (ret, out_length)
        }
    }

    /// Sets and offload feature setting.
    ///
    /// Note that `optname` must be a valid name for a feature, according to
    /// `nm_ethtool_optname_is_feature`.
    ///
    /// Feature: `v1_14`
    ///
    /// ## `optname`
    /// option name of the offload feature to get
    /// ## `value`
    /// the new value to set. The special value `Ternary::Default`
    ///  means to clear the offload feature setting.
    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn set_feature(&self, optname: &str, value: Ternary) {
        unsafe {
            nm_sys::nm_setting_ethtool_set_feature(
                self.to_glib_none().0,
                optname.to_glib_none().0,
                value.to_glib(),
            );
        }
    }
}

#[cfg(any(feature = "v1_14", feature = "dox"))]
impl Default for SettingEthtool {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingEthtool {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingEthtool")
    }
}
