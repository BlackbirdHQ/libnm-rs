// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
use crate::Ternary;
use glib::object::Cast;
use glib::translate::*;
use std::fmt;
#[cfg(any(feature = "v1_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
use std::mem;

glib::wrapper! {
    #[doc(alias = "NMSettingEthtool")]
    pub struct SettingEthtool(Object<ffi::NMSettingEthtool, ffi::NMSettingEthtoolClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_ethtool_get_type(),
    }
}

impl SettingEthtool {
    /// Creates a new [`SettingEthtool`][crate::SettingEthtool] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingEthtool`][crate::SettingEthtool] object
    #[doc(alias = "nm_setting_ethtool_new")]
    pub fn new() -> SettingEthtool {
        unsafe { Setting::from_glib_full(ffi::nm_setting_ethtool_new()).unsafe_cast() }
    }

    /// Clears all offload features settings
    ///
    /// # Deprecated since 1.26
    ///
    /// use `nm_setting_option_clear_by_name()` with [`ethtool_optname_is_feature()`][crate::ethtool_optname_is_feature()] predicate instead.
    #[cfg_attr(feature = "v1_26", deprecated = "Since 1.26")]
    #[doc(alias = "nm_setting_ethtool_clear_features")]
    pub fn clear_features(&self) {
        unsafe {
            ffi::nm_setting_ethtool_clear_features(self.to_glib_none().0);
        }
    }

    /// Gets and offload feature setting. Returns [`Ternary::Default`][crate::Ternary::Default] if the
    /// feature is not set.
    ///
    /// Note that `optname` must be a valid name for a feature, according to
    /// [`ethtool_optname_is_feature()`][crate::ethtool_optname_is_feature()].
    ///
    /// # Deprecated since 1.26
    ///
    /// use [`SettingExt::option_get_boolean()`][crate::prelude::SettingExt::option_get_boolean()] instead.
    /// ## `optname`
    /// option name of the offload feature to get
    ///
    /// # Returns
    ///
    /// a [`Ternary`][crate::Ternary] value indicating whether the offload feature
    ///  is enabled, disabled, or left untouched.
    #[cfg_attr(feature = "v1_26", deprecated = "Since 1.26")]
    #[doc(alias = "nm_setting_ethtool_get_feature")]
    #[doc(alias = "get_feature")]
    pub fn feature(&self, optname: &str) -> Ternary {
        unsafe {
            from_glib(ffi::nm_setting_ethtool_get_feature(
                self.to_glib_none().0,
                optname.to_glib_none().0,
            ))
        }
    }

    /// This returns all options names that are set. This includes the feature names
    /// like [`ETHTOOL_OPTNAME_FEATURE_GRO`][crate::ETHTOOL_OPTNAME_FEATURE_GRO]. See [`ethtool_optname_is_feature()`][crate::ethtool_optname_is_feature()] to
    /// check whether the option name is valid for offload features.
    ///
    /// # Deprecated since 1.26
    ///
    /// use [`SettingExt::option_get_all_names()`][crate::prelude::SettingExt::option_get_all_names()] instead.
    ///
    /// # Returns
    ///
    /// list of set option
    ///  names or [`None`] if no options are set. The option names are still owned by
    ///  `self` and may get invalidated when `self` gets modified.
    ///
    /// ## `out_length`
    /// return location for the number of keys returned, or [`None`]
    #[cfg_attr(feature = "v1_26", deprecated = "Since 1.26")]
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "nm_setting_ethtool_get_optnames")]
    #[doc(alias = "get_optnames")]
    pub fn optnames(&self) -> (Vec<glib::GString>, u32) {
        unsafe {
            let mut out_length = mem::MaybeUninit::uninit();
            let ret =
                FromGlibPtrContainer::from_glib_container(ffi::nm_setting_ethtool_get_optnames(
                    self.to_glib_none().0,
                    out_length.as_mut_ptr(),
                ));
            let out_length = out_length.assume_init();
            (ret, out_length)
        }
    }

    /// Sets and offload feature setting.
    ///
    /// Note that `optname` must be a valid name for a feature, according to
    /// [`ethtool_optname_is_feature()`][crate::ethtool_optname_is_feature()].
    ///
    /// # Deprecated since 1.26
    ///
    /// use [`SettingExt::option_set()`][crate::prelude::SettingExt::option_set()] or [`SettingExt::option_set_boolean()`][crate::prelude::SettingExt::option_set_boolean()] instead.
    /// ## `optname`
    /// option name of the offload feature to get
    /// ## `value`
    /// the new value to set. The special value [`Ternary::Default`][crate::Ternary::Default]
    ///  means to clear the offload feature setting.
    #[cfg_attr(feature = "v1_26", deprecated = "Since 1.26")]
    #[doc(alias = "nm_setting_ethtool_set_feature")]
    pub fn set_feature(&self, optname: &str, value: Ternary) {
        unsafe {
            ffi::nm_setting_ethtool_set_feature(
                self.to_glib_none().0,
                optname.to_glib_none().0,
                value.into_glib(),
            );
        }
    }
}

#[cfg(any(feature = "v1_14", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
impl Default for SettingEthtool {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingEthtool {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingEthtool")
    }
}
