// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::translate::*;
use glib::GString;
use nm_sys;
#[cfg(any(feature = "v1_8", feature = "dox"))]
use std::mem;
use std::ptr;

glib_wrapper! {
    #[derive(Debug, PartialOrd, Ord, Hash)]
    pub struct IPRoute(Shared<nm_sys::NMIPRoute>);

    match fn {
        ref => |ptr| nm_sys::nm_ip_route_ref(ptr),
        unref => |ptr| nm_sys::nm_ip_route_unref(ptr),
        get_type => || nm_sys::nm_ip_route_get_type(),
    }
}

impl IPRoute {
    pub fn new(
        family: i32,
        dest: &str,
        prefix: u32,
        next_hop: Option<&str>,
        metric: i64,
    ) -> Result<IPRoute, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_ip_route_new(
                family,
                dest.to_glib_none().0,
                prefix,
                next_hop.to_glib_none().0,
                metric,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //pub fn new_binary(family: i32, dest: /*Unimplemented*/Option<Fundamental: Pointer>, prefix: u32, next_hop: /*Unimplemented*/Option<Fundamental: Pointer>, metric: i64) -> Result<IPRoute, glib::Error> {
    //    unsafe { TODO: call nm_sys:nm_ip_route_new_binary() }
    //}

    pub fn dup(&self) -> Option<IPRoute> {
        unsafe { from_glib_full(nm_sys::nm_ip_route_dup(self.to_glib_none().0)) }
    }

    fn equal(&self, other: &IPRoute) -> bool {
        unsafe {
            from_glib(nm_sys::nm_ip_route_equal(
                self.to_glib_none().0,
                other.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn equal_full(&self, other: &IPRoute, cmp_flags: u32) -> bool {
        unsafe {
            from_glib(nm_sys::nm_ip_route_equal_full(
                self.to_glib_none().0,
                other.to_glib_none().0,
                cmp_flags,
            ))
        }
    }

    pub fn get_attribute(&self, name: &str) -> Option<glib::Variant> {
        unsafe {
            from_glib_none(nm_sys::nm_ip_route_get_attribute(
                self.to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }

    pub fn get_dest(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_ip_route_get_dest(self.to_glib_none().0)) }
    }

    //pub fn get_dest_binary(&self, dest: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call nm_sys:nm_ip_route_get_dest_binary() }
    //}

    pub fn get_family(&self) -> i32 {
        unsafe { nm_sys::nm_ip_route_get_family(self.to_glib_none().0) }
    }

    pub fn get_metric(&self) -> i64 {
        unsafe { nm_sys::nm_ip_route_get_metric(self.to_glib_none().0) }
    }

    pub fn get_next_hop(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_ip_route_get_next_hop(self.to_glib_none().0)) }
    }

    //pub fn get_next_hop_binary(&self, next_hop: /*Unimplemented*/Option<Fundamental: Pointer>) -> bool {
    //    unsafe { TODO: call nm_sys:nm_ip_route_get_next_hop_binary() }
    //}

    pub fn get_prefix(&self) -> u32 {
        unsafe { nm_sys::nm_ip_route_get_prefix(self.to_glib_none().0) }
    }

    pub fn set_attribute(&self, name: &str, value: Option<&glib::Variant>) {
        unsafe {
            nm_sys::nm_ip_route_set_attribute(
                self.to_glib_none().0,
                name.to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    pub fn set_dest(&self, dest: &str) {
        unsafe {
            nm_sys::nm_ip_route_set_dest(self.to_glib_none().0, dest.to_glib_none().0);
        }
    }

    //pub fn set_dest_binary(&self, dest: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call nm_sys:nm_ip_route_set_dest_binary() }
    //}

    pub fn set_metric(&self, metric: i64) {
        unsafe {
            nm_sys::nm_ip_route_set_metric(self.to_glib_none().0, metric);
        }
    }

    pub fn set_next_hop(&self, next_hop: Option<&str>) {
        unsafe {
            nm_sys::nm_ip_route_set_next_hop(self.to_glib_none().0, next_hop.to_glib_none().0);
        }
    }

    //pub fn set_next_hop_binary(&self, next_hop: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call nm_sys:nm_ip_route_set_next_hop_binary() }
    //}

    pub fn set_prefix(&self, prefix: u32) {
        unsafe {
            nm_sys::nm_ip_route_set_prefix(self.to_glib_none().0, prefix);
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    pub fn attribute_validate(
        name: &str,
        value: &glib::Variant,
        family: i32,
    ) -> Result<bool, glib::Error> {
        unsafe {
            let mut known = mem::MaybeUninit::uninit();
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_ip_route_attribute_validate(
                name.to_glib_none().0,
                value.to_glib_none().0,
                family,
                known.as_mut_ptr(),
                &mut error,
            );
            let known = known.assume_init();
            if error.is_null() {
                Ok(from_glib(known))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //#[cfg(any(feature = "v1_8", feature = "dox"))]
    //pub fn get_variant_attribute_spec() -> /*Ignored*/Option<VariantAttributeSpec> {
    //    unsafe { TODO: call nm_sys:nm_ip_route_get_variant_attribute_spec() }
    //}
}

impl PartialEq for IPRoute {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.equal(other)
    }
}

impl Eq for IPRoute {}
