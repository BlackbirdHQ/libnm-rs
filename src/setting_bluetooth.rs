// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Setting;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct SettingBluetooth(Object<nm_sys::NMSettingBluetooth, nm_sys::NMSettingBluetoothClass, SettingBluetoothClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_bluetooth_get_type(),
    }
}

impl SettingBluetooth {
    /// Creates a new `SettingBluetooth` object with default values.
    ///
    /// # Returns
    ///
    /// the new empty `SettingBluetooth` object
    pub fn new() -> SettingBluetooth {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_bluetooth_new()).unsafe_cast() }
    }
}

impl Default for SettingBluetooth {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_BLUETOOTH: Option<&SettingBluetooth> = None;

/// Trait containing all `SettingBluetooth` methods.
///
/// # Implementors
///
/// [`SettingBluetooth`](struct.SettingBluetooth.html)
pub trait SettingBluetoothExt: 'static {
    /// Gets the Bluetooth address of the remote device which this setting
    /// describes a connection to.
    ///
    /// # Returns
    ///
    /// the Bluetooth address
    fn get_bdaddr(&self) -> Option<GString>;

    /// Returns the connection method for communicating with the remote device (i.e.
    /// either DUN to a DUN-capable device or PANU to a NAP-capable device).
    ///
    /// # Returns
    ///
    /// the type, either `NM_SETTING_BLUETOOTH_TYPE_PANU`,
    /// `NM_SETTING_BLUETOOTH_TYPE_NAP` or `NM_SETTING_BLUETOOTH_TYPE_DUN`
    fn get_connection_type(&self) -> Option<GString>;

    /// The Bluetooth address of the device.
    fn set_property_bdaddr(&self, bdaddr: Option<&str>);

    /// Either "dun" for Dial-Up Networking connections or "panu" for Personal
    /// Area Networking connections to devices supporting the NAP profile.
    fn get_property_type(&self) -> Option<GString>;

    /// Either "dun" for Dial-Up Networking connections or "panu" for Personal
    /// Area Networking connections to devices supporting the NAP profile.
    fn set_property_type(&self, type_: Option<&str>);

    fn connect_property_bdaddr_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingBluetooth>> SettingBluetoothExt for O {
    fn get_bdaddr(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_bluetooth_get_bdaddr(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_connection_type(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_bluetooth_get_connection_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_property_bdaddr(&self, bdaddr: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"bdaddr\0".as_ptr() as *const _,
                Value::from(bdaddr).to_glib_none().0,
            );
        }
    }

    fn get_property_type(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"type\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `type` getter")
        }
    }

    fn set_property_type(&self, type_: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"type\0".as_ptr() as *const _,
                Value::from(type_).to_glib_none().0,
            );
        }
    }

    fn connect_property_bdaddr_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bdaddr_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingBluetooth,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingBluetooth>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingBluetooth::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::bdaddr\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_bdaddr_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingBluetooth,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingBluetooth>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingBluetooth::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_type_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingBluetooth {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingBluetooth")
    }
}
