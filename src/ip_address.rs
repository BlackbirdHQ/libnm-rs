// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::translate::*;
use glib::GString;
use nm_sys;
use std::ptr;
#[cfg(any(feature = "v1_22", feature = "dox"))]
use IPAddressCmpFlags;

glib_wrapper! {
    #[derive(Debug, PartialOrd, Ord, Hash)]
    pub struct IPAddress(Shared<nm_sys::NMIPAddress>);

    match fn {
        ref => |ptr| nm_sys::nm_ip_address_ref(ptr),
        unref => |ptr| nm_sys::nm_ip_address_unref(ptr),
        get_type => || nm_sys::nm_ip_address_get_type(),
    }
}

impl IPAddress {
    pub fn new(family: i32, addr: &str, prefix: u32) -> Result<IPAddress, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_ip_address_new(family, addr.to_glib_none().0, prefix, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //pub fn new_binary(family: i32, addr: /*Unimplemented*/Option<Fundamental: Pointer>, prefix: u32) -> Result<IPAddress, glib::Error> {
    //    unsafe { TODO: call nm_sys:nm_ip_address_new_binary() }
    //}

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn cmp_full(&self, b: &IPAddress, cmp_flags: IPAddressCmpFlags) -> i32 {
        unsafe {
            nm_sys::nm_ip_address_cmp_full(
                self.to_glib_none().0,
                b.to_glib_none().0,
                cmp_flags.to_glib(),
            )
        }
    }

    pub fn dup(&self) -> Option<IPAddress> {
        unsafe { from_glib_full(nm_sys::nm_ip_address_dup(self.to_glib_none().0)) }
    }

    fn equal(&self, other: &IPAddress) -> bool {
        unsafe {
            from_glib(nm_sys::nm_ip_address_equal(
                self.to_glib_none().0,
                other.to_glib_none().0,
            ))
        }
    }

    pub fn get_address(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_ip_address_get_address(self.to_glib_none().0)) }
    }

    //pub fn get_address_binary(&self, addr: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call nm_sys:nm_ip_address_get_address_binary() }
    //}

    pub fn get_attribute(&self, name: &str) -> Option<glib::Variant> {
        unsafe {
            from_glib_none(nm_sys::nm_ip_address_get_attribute(
                self.to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }

    pub fn get_family(&self) -> i32 {
        unsafe { nm_sys::nm_ip_address_get_family(self.to_glib_none().0) }
    }

    pub fn get_prefix(&self) -> u32 {
        unsafe { nm_sys::nm_ip_address_get_prefix(self.to_glib_none().0) }
    }

    pub fn set_address(&self, addr: &str) {
        unsafe {
            nm_sys::nm_ip_address_set_address(self.to_glib_none().0, addr.to_glib_none().0);
        }
    }

    //pub fn set_address_binary(&self, addr: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call nm_sys:nm_ip_address_set_address_binary() }
    //}

    pub fn set_attribute(&self, name: &str, value: Option<&glib::Variant>) {
        unsafe {
            nm_sys::nm_ip_address_set_attribute(
                self.to_glib_none().0,
                name.to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    pub fn set_prefix(&self, prefix: u32) {
        unsafe {
            nm_sys::nm_ip_address_set_prefix(self.to_glib_none().0, prefix);
        }
    }
}

impl PartialEq for IPAddress {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.equal(other)
    }
}

impl Eq for IPAddress {}
