// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Setting;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::Value;
use glib_sys;
use gobject_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use std::mem;
use std::mem::transmute;

glib_wrapper! {
    pub struct SettingVpn(Object<nm_sys::NMSettingVpn, nm_sys::NMSettingVpnClass, SettingVpnClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_vpn_get_type(),
    }
}

impl SettingVpn {
    /// Creates a new `SettingVpn` object with default values.
    ///
    /// # Returns
    ///
    /// the new empty `SettingVpn` object
    pub fn new() -> SettingVpn {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_vpn_new()).unsafe_cast() }
    }
}

impl Default for SettingVpn {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_VPN: Option<&SettingVpn> = None;

/// Trait containing all `SettingVpn` methods.
///
/// # Implementors
///
/// [`SettingVpn`](struct.SettingVpn.html)
pub trait SettingVpnExt: 'static {
    /// Establishes a relationship between `key` and `item` internally in the
    /// setting which may be retrieved later. Should not be used to store passwords
    /// or other secrets, which is what `SettingVpnExt::add_secret` is for.
    ///
    /// Before 1.24, `item` must not be `None` and not an empty string. Since 1.24,
    /// `item` can be set to an empty string. It can also be set to `None` to unset
    /// the key. In that case, the behavior is as if calling `SettingVpnExt::remove_data_item`.
    /// ## `key`
    /// a name that uniquely identifies the given value `item`
    /// ## `item`
    /// the value to be referenced by `key`
    fn add_data_item(&self, key: &str, item: Option<&str>);

    /// Establishes a relationship between `key` and `secret` internally in the
    /// setting which may be retrieved later.
    ///
    /// Before 1.24, `secret` must not be `None` and not an empty string. Since 1.24,
    /// `secret` can be set to an empty string. It can also be set to `None` to unset
    /// the key. In that case, the behavior is as if calling `SettingVpnExt::remove_secret`.
    /// ## `key`
    /// a name that uniquely identifies the given secret `secret`
    /// ## `secret`
    /// the secret to be referenced by `key`
    fn add_secret(&self, key: &str, secret: Option<&str>);

    /// Retrieves the data item of a key/value relationship previously established
    /// by `SettingVpnExt::add_data_item`.
    /// ## `key`
    /// the name of the data item to retrieve
    ///
    /// # Returns
    ///
    /// the data item, if any
    fn get_data_item(&self, key: &str) -> Option<GString>;

    /// Retrieves every data key inside `self`, as an array.
    ///
    /// Feature: `v1_12`
    ///
    /// ## `out_length`
    /// the length of the returned array
    ///
    /// # Returns
    ///
    /// a
    ///  `None`-terminated array containing each data key or `None` if
    ///  there are no data items.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_data_keys(&self) -> Vec<GString>;

    /// Gets number of key/value pairs of VPN configuration data.
    ///
    /// # Returns
    ///
    /// the number of VPN plugin specific configuration data items
    fn get_num_data_items(&self) -> u32;

    /// Gets number of VPN plugin specific secrets in the setting.
    ///
    /// # Returns
    ///
    /// the number of VPN plugin specific secrets
    fn get_num_secrets(&self) -> u32;

    ///
    /// # Returns
    ///
    /// the `SettingVpn:persistent` property of the setting
    fn get_persistent(&self) -> bool;

    /// Retrieves the secret of a key/value relationship previously established
    /// by `SettingVpnExt::add_secret`.
    /// ## `key`
    /// the name of the secret to retrieve
    ///
    /// # Returns
    ///
    /// the secret, if any
    fn get_secret(&self, key: &str) -> Option<GString>;

    /// Retrieves every secret key inside `self`, as an array.
    ///
    /// Feature: `v1_12`
    ///
    /// ## `out_length`
    /// the length of the returned array
    ///
    /// # Returns
    ///
    /// a
    ///  `None`-terminated array containing each secret key or `None` if
    ///  there are no secrets.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_secret_keys(&self) -> Vec<GString>;

    /// Returns the service name of the VPN, which identifies the specific VPN
    /// plugin that should be used to connect to this VPN.
    ///
    /// # Returns
    ///
    /// the VPN plugin's service name
    fn get_service_type(&self) -> Option<GString>;

    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingVpn:timeout` property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_timeout(&self) -> u32;

    ///
    /// # Returns
    ///
    /// the `SettingVpn:user-name` property of the setting
    fn get_user_name(&self) -> Option<GString>;

    /// Deletes a key/value relationship previously established by
    /// `SettingVpnExt::add_data_item`.
    /// ## `key`
    /// the name of the data item to remove
    ///
    /// # Returns
    ///
    /// `true` if the data item was found and removed from the internal list,
    /// `false` if it was not.
    fn remove_data_item(&self, key: &str) -> bool;

    /// Deletes a key/value relationship previously established by
    /// `SettingVpnExt::add_secret`.
    /// ## `key`
    /// the name of the secret to remove
    ///
    /// # Returns
    ///
    /// `true` if the secret was found and removed from the internal list,
    /// `false` if it was not.
    fn remove_secret(&self, key: &str) -> bool;

    //fn get_property_data(&self) -> /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 };

    //fn set_property_data(&self, data: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 });

    /// If the VPN service supports persistence, and this property is `true`,
    /// the VPN will attempt to stay connected across link changes and outages,
    /// until explicitly disconnected.
    fn set_property_persistent(&self, persistent: bool);

    //fn get_property_secrets(&self) -> /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 };

    //fn set_property_secrets(&self, secrets: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 });

    /// D-Bus service name of the VPN plugin that this setting uses to connect to
    /// its network. i.e. org.freedesktop.NetworkManager.vpnc for the vpnc
    /// plugin.
    fn set_property_service_type(&self, service_type: Option<&str>);

    /// Timeout for the VPN service to establish the connection. Some services
    /// may take quite a long time to connect.
    /// Value of 0 means a default timeout, which is 60 seconds (unless overridden
    /// by vpn.timeout in configuration file). Values greater than zero mean
    /// timeout in seconds.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_timeout(&self, timeout: u32);

    /// If the VPN connection requires a user name for authentication, that name
    /// should be provided here. If the connection is available to more than one
    /// user, and the VPN requires each user to supply a different name, then
    /// leave this property empty. If this property is empty, NetworkManager
    /// will automatically supply the username of the user which requested the
    /// VPN connection.
    fn set_property_user_name(&self, user_name: Option<&str>);

    fn connect_property_data_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_persistent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_secrets_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_service_type_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_user_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingVpn>> SettingVpnExt for O {
    fn add_data_item(&self, key: &str, item: Option<&str>) {
        unsafe {
            nm_sys::nm_setting_vpn_add_data_item(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
                item.to_glib_none().0,
            );
        }
    }

    fn add_secret(&self, key: &str, secret: Option<&str>) {
        unsafe {
            nm_sys::nm_setting_vpn_add_secret(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
                secret.to_glib_none().0,
            );
        }
    }

    fn get_data_item(&self, key: &str) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_vpn_get_data_item(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_data_keys(&self) -> Vec<GString> {
        unsafe {
            let mut out_length = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_container_num(
                nm_sys::nm_setting_vpn_get_data_keys(
                    self.as_ref().to_glib_none().0,
                    out_length.as_mut_ptr(),
                ),
                out_length.assume_init() as usize,
            );
            ret
        }
    }

    fn get_num_data_items(&self) -> u32 {
        unsafe { nm_sys::nm_setting_vpn_get_num_data_items(self.as_ref().to_glib_none().0) }
    }

    fn get_num_secrets(&self) -> u32 {
        unsafe { nm_sys::nm_setting_vpn_get_num_secrets(self.as_ref().to_glib_none().0) }
    }

    fn get_persistent(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_vpn_get_persistent(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_secret(&self, key: &str) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_vpn_get_secret(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_secret_keys(&self) -> Vec<GString> {
        unsafe {
            let mut out_length = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_container_num(
                nm_sys::nm_setting_vpn_get_secret_keys(
                    self.as_ref().to_glib_none().0,
                    out_length.as_mut_ptr(),
                ),
                out_length.assume_init() as usize,
            );
            ret
        }
    }

    fn get_service_type(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_vpn_get_service_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_timeout(&self) -> u32 {
        unsafe { nm_sys::nm_setting_vpn_get_timeout(self.as_ref().to_glib_none().0) }
    }

    fn get_user_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_vpn_get_user_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn remove_data_item(&self, key: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_vpn_remove_data_item(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    fn remove_secret(&self, key: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_vpn_remove_secret(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    //fn get_property_data(&self) -> /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"data\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `data` getter").unwrap()
    //    }
    //}

    //fn set_property_data(&self, data: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }) {
    //    unsafe {
    //        gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"data\0".as_ptr() as *const _, Value::from(&data).to_glib_none().0);
    //    }
    //}

    fn set_property_persistent(&self, persistent: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"persistent\0".as_ptr() as *const _,
                Value::from(&persistent).to_glib_none().0,
            );
        }
    }

    //fn get_property_secrets(&self) -> /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"secrets\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `secrets` getter").unwrap()
    //    }
    //}

    //fn set_property_secrets(&self, secrets: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }) {
    //    unsafe {
    //        gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"secrets\0".as_ptr() as *const _, Value::from(&secrets).to_glib_none().0);
    //    }
    //}

    fn set_property_service_type(&self, service_type: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"service-type\0".as_ptr() as *const _,
                Value::from(service_type).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_timeout(&self, timeout: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"timeout\0".as_ptr() as *const _,
                Value::from(&timeout).to_glib_none().0,
            );
        }
    }

    fn set_property_user_name(&self, user_name: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"user-name\0".as_ptr() as *const _,
                Value::from(user_name).to_glib_none().0,
            );
        }
    }

    fn connect_property_data_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_data_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVpn,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVpn>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVpn::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::data\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_data_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_persistent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_persistent_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVpn,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVpn>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVpn::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::persistent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_persistent_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_secrets_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_secrets_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVpn,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVpn>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVpn::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secrets\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_secrets_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_service_type_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_service_type_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVpn,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVpn>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVpn::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::service-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_service_type_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_timeout_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVpn,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVpn>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVpn::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::timeout\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_timeout_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_user_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_user_name_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVpn,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVpn>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVpn::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::user-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_user_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingVpn {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingVpn")
    }
}
