// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::{Setting, TCQdisc, TCTfilter};
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    /// Linux Traffic Control Settings
    ///
    /// # Implements
    ///
    /// [`SettingExt`][trait@crate::prelude::SettingExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMSettingTCConfig")]
    pub struct SettingTCConfig(Object<ffi::NMSettingTCConfig, ffi::NMSettingTCConfigClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_tc_config_get_type(),
    }
}

impl SettingTCConfig {
    /// Creates a new [`SettingTCConfig`][crate::SettingTCConfig] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingTCConfig`][crate::SettingTCConfig] object
    #[doc(alias = "nm_setting_tc_config_new")]
    pub fn new() -> SettingTCConfig {
        unsafe { Setting::from_glib_full(ffi::nm_setting_tc_config_new()).unsafe_cast() }
    }

    /// Appends a new qdisc and associated information to the setting. The
    /// given qdisc is duplicated internally and is not changed by this function.
    /// If an identical qdisc (considering attributes as well) already exists, the
    /// qdisc is not added and the function returns [`false`].
    /// ## `qdisc`
    /// the qdisc to add
    ///
    /// # Returns
    ///
    /// [`true`] if the qdisc was added; [`false`] if the qdisc was already known.
    #[doc(alias = "nm_setting_tc_config_add_qdisc")]
    pub fn add_qdisc(&self, qdisc: &TCQdisc) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_tc_config_add_qdisc(
                self.to_glib_none().0,
                qdisc.to_glib_none().0,
            ))
        }
    }

    /// Appends a new tfilter and associated information to the setting. The
    /// given tfilter is duplicated internally and is not changed by this function.
    /// If an identical tfilter (considering attributes as well) already exists, the
    /// tfilter is not added and the function returns [`false`].
    /// ## `tfilter`
    /// the tfilter to add
    ///
    /// # Returns
    ///
    /// [`true`] if the tfilter was added; [`false`] if the tfilter was already known.
    #[doc(alias = "nm_setting_tc_config_add_tfilter")]
    pub fn add_tfilter(&self, tfilter: &TCTfilter) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_tc_config_add_tfilter(
                self.to_glib_none().0,
                tfilter.to_glib_none().0,
            ))
        }
    }

    /// Removes all configured queueing disciplines.
    #[doc(alias = "nm_setting_tc_config_clear_qdiscs")]
    pub fn clear_qdiscs(&self) {
        unsafe {
            ffi::nm_setting_tc_config_clear_qdiscs(self.to_glib_none().0);
        }
    }

    /// Removes all configured queueing disciplines.
    #[doc(alias = "nm_setting_tc_config_clear_tfilters")]
    pub fn clear_tfilters(&self) {
        unsafe {
            ffi::nm_setting_tc_config_clear_tfilters(self.to_glib_none().0);
        }
    }

    ///
    /// # Returns
    ///
    /// the number of configured queueing disciplines
    #[doc(alias = "nm_setting_tc_config_get_num_qdiscs")]
    #[doc(alias = "get_num_qdiscs")]
    pub fn num_qdiscs(&self) -> u32 {
        unsafe { ffi::nm_setting_tc_config_get_num_qdiscs(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the number of configured queueing disciplines
    #[doc(alias = "nm_setting_tc_config_get_num_tfilters")]
    #[doc(alias = "get_num_tfilters")]
    pub fn num_tfilters(&self) -> u32 {
        unsafe { ffi::nm_setting_tc_config_get_num_tfilters(self.to_glib_none().0) }
    }

    /// ## `idx`
    /// index number of the qdisc to return
    ///
    /// # Returns
    ///
    /// the qdisc at index `idx`
    #[doc(alias = "nm_setting_tc_config_get_qdisc")]
    #[doc(alias = "get_qdisc")]
    pub fn qdisc(&self, idx: u32) -> Option<TCQdisc> {
        unsafe {
            from_glib_none(ffi::nm_setting_tc_config_get_qdisc(
                self.to_glib_none().0,
                idx,
            ))
        }
    }

    /// ## `idx`
    /// index number of the tfilter to return
    ///
    /// # Returns
    ///
    /// the tfilter at index `idx`
    #[doc(alias = "nm_setting_tc_config_get_tfilter")]
    #[doc(alias = "get_tfilter")]
    pub fn tfilter(&self, idx: u32) -> Option<TCTfilter> {
        unsafe {
            from_glib_none(ffi::nm_setting_tc_config_get_tfilter(
                self.to_glib_none().0,
                idx,
            ))
        }
    }

    /// Removes the qdisc at index `idx`.
    /// ## `idx`
    /// index number of the qdisc
    #[doc(alias = "nm_setting_tc_config_remove_qdisc")]
    pub fn remove_qdisc(&self, idx: u32) {
        unsafe {
            ffi::nm_setting_tc_config_remove_qdisc(self.to_glib_none().0, idx);
        }
    }

    /// Removes the first matching qdisc that matches `qdisc`.
    /// ## `qdisc`
    /// the qdisc to remove
    ///
    /// # Returns
    ///
    /// [`true`] if the qdisc was found and removed; [`false`] if it was not.
    #[doc(alias = "nm_setting_tc_config_remove_qdisc_by_value")]
    pub fn remove_qdisc_by_value(&self, qdisc: &TCQdisc) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_tc_config_remove_qdisc_by_value(
                self.to_glib_none().0,
                qdisc.to_glib_none().0,
            ))
        }
    }

    /// Removes the tfilter at index `idx`.
    /// ## `idx`
    /// index number of the tfilter
    #[doc(alias = "nm_setting_tc_config_remove_tfilter")]
    pub fn remove_tfilter(&self, idx: u32) {
        unsafe {
            ffi::nm_setting_tc_config_remove_tfilter(self.to_glib_none().0, idx);
        }
    }

    /// Removes the first matching tfilter that matches `tfilter`.
    /// ## `tfilter`
    /// the tfilter to remove
    ///
    /// # Returns
    ///
    /// [`true`] if the tfilter was found and removed; [`false`] if it was not.
    #[doc(alias = "nm_setting_tc_config_remove_tfilter_by_value")]
    pub fn remove_tfilter_by_value(&self, tfilter: &TCTfilter) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_tc_config_remove_tfilter_by_value(
                self.to_glib_none().0,
                tfilter.to_glib_none().0,
            ))
        }
    }
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
impl Default for SettingTCConfig {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingTCConfig {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingTCConfig")
    }
}
