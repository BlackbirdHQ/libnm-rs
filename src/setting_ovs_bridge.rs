// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMSettingOvsBridge")]
    pub struct SettingOvsBridge(Object<ffi::NMSettingOvsBridge, ffi::NMSettingOvsBridgeClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_ovs_bridge_get_type(),
    }
}

impl SettingOvsBridge {
    /// Creates a new [`SettingOvsBridge`][crate::SettingOvsBridge] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingOvsBridge`][crate::SettingOvsBridge] object
    #[doc(alias = "nm_setting_ovs_bridge_new")]
    pub fn new() -> SettingOvsBridge {
        unsafe { Setting::from_glib_full(ffi::nm_setting_ovs_bridge_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingOvsBridge::datapath_type` property of the setting
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "nm_setting_ovs_bridge_get_datapath_type")]
    #[doc(alias = "get_datapath_type")]
    pub fn datapath_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ovs_bridge_get_datapath_type(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingOvsBridge::fail_mode` property of the setting
    #[doc(alias = "nm_setting_ovs_bridge_get_fail_mode")]
    #[doc(alias = "get_fail_mode")]
    pub fn fail_mode(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ovs_bridge_get_fail_mode(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingOvsBridge::mcast_snooping_enable` property of the setting
    #[doc(alias = "nm_setting_ovs_bridge_get_mcast_snooping_enable")]
    #[doc(alias = "get_mcast_snooping_enable")]
    pub fn is_mcast_snooping_enable(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ovs_bridge_get_mcast_snooping_enable(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingOvsBridge::rstp_enable` property of the setting
    #[doc(alias = "nm_setting_ovs_bridge_get_rstp_enable")]
    #[doc(alias = "get_rstp_enable")]
    pub fn is_rstp_enable(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ovs_bridge_get_rstp_enable(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingOvsBridge::stp_enable` property of the setting
    #[doc(alias = "nm_setting_ovs_bridge_get_stp_enable")]
    #[doc(alias = "get_stp_enable")]
    pub fn is_stp_enable(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ovs_bridge_get_stp_enable(
                self.to_glib_none().0,
            ))
        }
    }

    /// The data path type. One of "system", "netdev" or empty.
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "datapath-type")]
    pub fn set_datapath_type(&self, datapath_type: Option<&str>) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.as_ptr() as *mut glib::gobject_ffi::GObject,
                b"datapath-type\0".as_ptr() as *const _,
                datapath_type.to_value().to_glib_none().0,
            );
        }
    }

    /// The bridge failure mode. One of "secure", "standalone" or empty.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "fail-mode")]
    pub fn set_fail_mode(&self, fail_mode: Option<&str>) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.as_ptr() as *mut glib::gobject_ffi::GObject,
                b"fail-mode\0".as_ptr() as *const _,
                fail_mode.to_value().to_glib_none().0,
            );
        }
    }

    /// Enable or disable multicast snooping.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "mcast-snooping-enable")]
    pub fn set_mcast_snooping_enable(&self, mcast_snooping_enable: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.as_ptr() as *mut glib::gobject_ffi::GObject,
                b"mcast-snooping-enable\0".as_ptr() as *const _,
                mcast_snooping_enable.to_value().to_glib_none().0,
            );
        }
    }

    /// Enable or disable RSTP.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "rstp-enable")]
    pub fn set_rstp_enable(&self, rstp_enable: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.as_ptr() as *mut glib::gobject_ffi::GObject,
                b"rstp-enable\0".as_ptr() as *const _,
                rstp_enable.to_value().to_glib_none().0,
            );
        }
    }

    /// Enable or disable STP.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "stp-enable")]
    pub fn set_stp_enable(&self, stp_enable: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.as_ptr() as *mut glib::gobject_ffi::GObject,
                b"stp-enable\0".as_ptr() as *const _,
                stp_enable.to_value().to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "datapath-type")]
    pub fn connect_datapath_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_datapath_type_trampoline<F: Fn(&SettingOvsBridge) + 'static>(
            this: *mut ffi::NMSettingOvsBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::datapath-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_datapath_type_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "fail-mode")]
    pub fn connect_fail_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_fail_mode_trampoline<F: Fn(&SettingOvsBridge) + 'static>(
            this: *mut ffi::NMSettingOvsBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::fail-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_fail_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "mcast-snooping-enable")]
    pub fn connect_mcast_snooping_enable_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_mcast_snooping_enable_trampoline<
            F: Fn(&SettingOvsBridge) + 'static,
        >(
            this: *mut ffi::NMSettingOvsBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mcast-snooping-enable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mcast_snooping_enable_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "rstp-enable")]
    pub fn connect_rstp_enable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rstp_enable_trampoline<F: Fn(&SettingOvsBridge) + 'static>(
            this: *mut ffi::NMSettingOvsBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::rstp-enable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_rstp_enable_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "stp-enable")]
    pub fn connect_stp_enable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_stp_enable_trampoline<F: Fn(&SettingOvsBridge) + 'static>(
            this: *mut ffi::NMSettingOvsBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::stp-enable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_stp_enable_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
impl Default for SettingOvsBridge {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingOvsBridge {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingOvsBridge")
    }
}
