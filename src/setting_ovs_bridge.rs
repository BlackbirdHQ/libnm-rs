// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::fmt;
#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
use std::{boxed::Box as Box_, mem::transmute};

glib::wrapper! {
    /// OvsBridge Link Settings
    ///
    /// ## Properties
    ///
    ///
    /// #### `datapath-type`
    ///  The data path type. One of "system", "netdev" or empty.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `fail-mode`
    ///  The bridge failure mode. One of "secure", "standalone" or empty.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `mcast-snooping-enable`
    ///  Enable or disable multicast snooping.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `rstp-enable`
    ///  Enable or disable RSTP.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `stp-enable`
    ///  Enable or disable STP.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Setting</h4></summary>
    ///
    ///
    /// #### `name`
    ///  The setting's name, which uniquely identifies the setting within the
    /// connection. Each setting type has a name unique to that type, for
    /// example "ppp" or "802-11-wireless" or "802-3-ethernet".
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`SettingExt`][trait@crate::prelude::SettingExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMSettingOvsBridge")]
    pub struct SettingOvsBridge(Object<ffi::NMSettingOvsBridge, ffi::NMSettingOvsBridgeClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_ovs_bridge_get_type(),
    }
}

impl SettingOvsBridge {
    /// Creates a new [`SettingOvsBridge`][crate::SettingOvsBridge] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingOvsBridge`][crate::SettingOvsBridge] object
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "nm_setting_ovs_bridge_new")]
    pub fn new() -> SettingOvsBridge {
        unsafe { Setting::from_glib_full(ffi::nm_setting_ovs_bridge_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the [`datapath_type`][struct@crate::SettingOvsBridge#datapath_type] property of the setting
    #[cfg(any(feature = "v1_42", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_42")))]
    #[doc(alias = "nm_setting_ovs_bridge_get_datapath_type")]
    #[doc(alias = "get_datapath_type")]
    pub fn datapath_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ovs_bridge_get_datapath_type(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`fail_mode`][struct@crate::SettingOvsBridge#fail_mode] property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "nm_setting_ovs_bridge_get_fail_mode")]
    #[doc(alias = "get_fail_mode")]
    pub fn fail_mode(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ovs_bridge_get_fail_mode(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`mcast_snooping_enable`][struct@crate::SettingOvsBridge#mcast_snooping_enable] property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "nm_setting_ovs_bridge_get_mcast_snooping_enable")]
    #[doc(alias = "get_mcast_snooping_enable")]
    pub fn is_mcast_snooping_enable(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ovs_bridge_get_mcast_snooping_enable(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`rstp_enable`][struct@crate::SettingOvsBridge#rstp_enable] property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "nm_setting_ovs_bridge_get_rstp_enable")]
    #[doc(alias = "get_rstp_enable")]
    pub fn is_rstp_enable(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ovs_bridge_get_rstp_enable(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`stp_enable`][struct@crate::SettingOvsBridge#stp_enable] property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "nm_setting_ovs_bridge_get_stp_enable")]
    #[doc(alias = "get_stp_enable")]
    pub fn is_stp_enable(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ovs_bridge_get_stp_enable(
                self.to_glib_none().0,
            ))
        }
    }

    /// The data path type. One of "system", "netdev" or empty.
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "datapath-type")]
    pub fn get_property_datapath_type(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "datapath-type")
    }

    /// The data path type. One of "system", "netdev" or empty.
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "datapath-type")]
    pub fn set_datapath_type(&self, datapath_type: Option<&str>) {
        glib::ObjectExt::set_property(self, "datapath-type", &datapath_type)
    }

    /// The bridge failure mode. One of "secure", "standalone" or empty.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "fail-mode")]
    pub fn set_fail_mode(&self, fail_mode: Option<&str>) {
        glib::ObjectExt::set_property(self, "fail-mode", &fail_mode)
    }

    /// Enable or disable multicast snooping.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "mcast-snooping-enable")]
    pub fn set_mcast_snooping_enable(&self, mcast_snooping_enable: bool) {
        glib::ObjectExt::set_property(self, "mcast-snooping-enable", &mcast_snooping_enable)
    }

    /// Enable or disable RSTP.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "rstp-enable")]
    pub fn set_rstp_enable(&self, rstp_enable: bool) {
        glib::ObjectExt::set_property(self, "rstp-enable", &rstp_enable)
    }

    /// Enable or disable STP.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "stp-enable")]
    pub fn set_stp_enable(&self, stp_enable: bool) {
        glib::ObjectExt::set_property(self, "stp-enable", &stp_enable)
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "datapath-type")]
    pub fn connect_datapath_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_datapath_type_trampoline<F: Fn(&SettingOvsBridge) + 'static>(
            this: *mut ffi::NMSettingOvsBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::datapath-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_datapath_type_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "fail-mode")]
    pub fn connect_fail_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_fail_mode_trampoline<F: Fn(&SettingOvsBridge) + 'static>(
            this: *mut ffi::NMSettingOvsBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::fail-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_fail_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "mcast-snooping-enable")]
    pub fn connect_mcast_snooping_enable_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_mcast_snooping_enable_trampoline<
            F: Fn(&SettingOvsBridge) + 'static,
        >(
            this: *mut ffi::NMSettingOvsBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mcast-snooping-enable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mcast_snooping_enable_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "rstp-enable")]
    pub fn connect_rstp_enable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rstp_enable_trampoline<F: Fn(&SettingOvsBridge) + 'static>(
            this: *mut ffi::NMSettingOvsBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::rstp-enable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_rstp_enable_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "stp-enable")]
    pub fn connect_stp_enable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_stp_enable_trampoline<F: Fn(&SettingOvsBridge) + 'static>(
            this: *mut ffi::NMSettingOvsBridge,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::stp-enable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_stp_enable_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
impl Default for SettingOvsBridge {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingOvsBridge {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingOvsBridge")
    }
}
