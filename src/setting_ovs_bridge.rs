// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Setting;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::object::Cast;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::Value;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib_sys;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use gobject_sys;
use nm_sys;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use std::mem::transmute;

glib_wrapper! {
    pub struct SettingOvsBridge(Object<nm_sys::NMSettingOvsBridge, nm_sys::NMSettingOvsBridgeClass, SettingOvsBridgeClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_ovs_bridge_get_type(),
    }
}

impl SettingOvsBridge {
    /// Creates a new `SettingOvsBridge` object with default values.
    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// the new empty `SettingOvsBridge` object
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn new() -> SettingOvsBridge {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_ovs_bridge_new()).unsafe_cast() }
    }

    ///
    /// Feature: `v1_20`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingOvsBridge:datapath_type` property of the setting
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn get_datapath_type(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_ovs_bridge_get_datapath_type(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingOvsBridge:fail_mode` property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn get_fail_mode(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_ovs_bridge_get_fail_mode(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingOvsBridge:mcast_snooping_enable` property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn get_mcast_snooping_enable(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_ovs_bridge_get_mcast_snooping_enable(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingOvsBridge:rstp_enable` property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn get_rstp_enable(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_ovs_bridge_get_rstp_enable(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingOvsBridge:stp_enable` property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn get_stp_enable(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_ovs_bridge_get_stp_enable(
                self.to_glib_none().0,
            ))
        }
    }

    /// The data path type. One of "system", "netdev" or empty.
    ///
    /// Feature: `v1_20`
    ///
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn set_property_datapath_type(&self, datapath_type: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"datapath-type\0".as_ptr() as *const _,
                Value::from(datapath_type).to_glib_none().0,
            );
        }
    }

    /// The bridge failure mode. One of "secure", "standalone" or empty.
    ///
    /// Feature: `v1_10`
    ///
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn set_property_fail_mode(&self, fail_mode: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"fail-mode\0".as_ptr() as *const _,
                Value::from(fail_mode).to_glib_none().0,
            );
        }
    }

    /// Enable or disable multicast snooping.
    ///
    /// Feature: `v1_10`
    ///
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn set_property_mcast_snooping_enable(&self, mcast_snooping_enable: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"mcast-snooping-enable\0".as_ptr() as *const _,
                Value::from(&mcast_snooping_enable).to_glib_none().0,
            );
        }
    }

    /// Enable or disable RSTP.
    ///
    /// Feature: `v1_10`
    ///
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn set_property_rstp_enable(&self, rstp_enable: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"rstp-enable\0".as_ptr() as *const _,
                Value::from(&rstp_enable).to_glib_none().0,
            );
        }
    }

    /// Enable or disable STP.
    ///
    /// Feature: `v1_10`
    ///
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn set_property_stp_enable(&self, stp_enable: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"stp-enable\0".as_ptr() as *const _,
                Value::from(&stp_enable).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn connect_property_datapath_type_notify<F: Fn(&SettingOvsBridge) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_datapath_type_trampoline<F: Fn(&SettingOvsBridge) + 'static>(
            this: *mut nm_sys::NMSettingOvsBridge,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::datapath-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_datapath_type_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connect_property_fail_mode_notify<F: Fn(&SettingOvsBridge) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_fail_mode_trampoline<F: Fn(&SettingOvsBridge) + 'static>(
            this: *mut nm_sys::NMSettingOvsBridge,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::fail-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_fail_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connect_property_mcast_snooping_enable_notify<F: Fn(&SettingOvsBridge) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_mcast_snooping_enable_trampoline<
            F: Fn(&SettingOvsBridge) + 'static,
        >(
            this: *mut nm_sys::NMSettingOvsBridge,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mcast-snooping-enable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mcast_snooping_enable_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connect_property_rstp_enable_notify<F: Fn(&SettingOvsBridge) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_rstp_enable_trampoline<F: Fn(&SettingOvsBridge) + 'static>(
            this: *mut nm_sys::NMSettingOvsBridge,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::rstp-enable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_rstp_enable_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connect_property_stp_enable_notify<F: Fn(&SettingOvsBridge) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_stp_enable_trampoline<F: Fn(&SettingOvsBridge) + 'static>(
            this: *mut nm_sys::NMSettingOvsBridge,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::stp-enable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_stp_enable_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
impl Default for SettingOvsBridge {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingOvsBridge {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingOvsBridge")
    }
}
