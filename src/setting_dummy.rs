// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
#[cfg(any(feature = "v1_8", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    /// Dummy Link Settings
    ///
    /// # Implements
    ///
    /// [`SettingExt`][trait@crate::prelude::SettingExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMSettingDummy")]
    pub struct SettingDummy(Object<ffi::NMSettingDummy, ffi::NMSettingDummyClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_dummy_get_type(),
    }
}

impl SettingDummy {
    /// Creates a new [`SettingDummy`][crate::SettingDummy] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingDummy`][crate::SettingDummy] object
    #[cfg(any(feature = "v1_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
    #[doc(alias = "nm_setting_dummy_new")]
    pub fn new() -> SettingDummy {
        unsafe { Setting::from_glib_full(ffi::nm_setting_dummy_new()).unsafe_cast() }
    }
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
impl Default for SettingDummy {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingDummy {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingDummy")
    }
}
