// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_8", feature = "dox"))]
use glib::object::Cast;
use glib::translate::*;
use nm_sys;
use std::fmt;
use Setting;

glib_wrapper! {
    pub struct SettingDummy(Object<nm_sys::NMSettingDummy, nm_sys::NMSettingDummyClass, SettingDummyClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_dummy_get_type(),
    }
}

impl SettingDummy {
    /// Creates a new `SettingDummy` object with default values.
    ///
    /// Feature: `v1_8`
    ///
    ///
    /// # Returns
    ///
    /// the new empty `SettingDummy` object
    #[cfg(any(feature = "v1_8", feature = "dox"))]
    pub fn new() -> SettingDummy {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_dummy_new()).unsafe_cast() }
    }
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
impl Default for SettingDummy {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_DUMMY: Option<&SettingDummy> = None;

impl fmt::Display for SettingDummy {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingDummy")
    }
}
