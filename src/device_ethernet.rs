// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Device;
use crate::Object;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMDeviceEthernet")]
    pub struct DeviceEthernet(Object<ffi::NMDeviceEthernet, ffi::NMDeviceEthernetClass>) @extends Device, Object;

    match fn {
        type_ => || ffi::nm_device_ethernet_get_type(),
    }
}

impl DeviceEthernet {
    pub const NONE: Option<&'static DeviceEthernet> = None;
}

/// Trait containing all [`struct@DeviceEthernet`] methods.
///
/// # Implementors
///
/// [`DeviceEthernet`][struct@crate::DeviceEthernet], [`DeviceVeth`][struct@crate::DeviceVeth]
pub trait DeviceEthernetExt: 'static {
    /// Whether the device has carrier.
    ///
    /// # Returns
    ///
    /// [`true`] if the device has carrier
    #[doc(alias = "nm_device_ethernet_get_carrier")]
    #[doc(alias = "get_carrier")]
    fn is_carrier(&self) -> bool;

    /// Gets the permanent hardware (MAC) address of the [`DeviceEthernet`][crate::DeviceEthernet]
    ///
    /// # Returns
    ///
    /// the permanent hardware address. This is the internal string used by the
    /// device, and must not be modified.
    #[doc(alias = "nm_device_ethernet_get_permanent_hw_address")]
    #[doc(alias = "get_permanent_hw_address")]
    fn permanent_hw_address(&self) -> Option<glib::GString>;

    /// Return the list of s390 subchannels if the device supports them.
    ///
    /// # Returns
    ///
    /// array of strings, each specifying
    ///  one subchannel the s390 device uses to communicate to the host.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_device_ethernet_get_s390_subchannels")]
    #[doc(alias = "get_s390_subchannels")]
    fn s390_subchannels(&self) -> Vec<glib::GString>;

    /// Gets the speed of the [`DeviceEthernet`][crate::DeviceEthernet] in Mbit/s.
    ///
    /// # Returns
    ///
    /// the speed of the device in Mbit/s
    #[doc(alias = "nm_device_ethernet_get_speed")]
    #[doc(alias = "get_speed")]
    fn speed(&self) -> u32;

    /// The permanent hardware (MAC) address of the device.
    #[doc(alias = "perm-hw-address")]
    fn perm_hw_address(&self) -> Option<glib::GString>;

    #[doc(alias = "carrier")]
    fn connect_carrier_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "perm-hw-address")]
    fn connect_perm_hw_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "s390-subchannels")]
    fn connect_s390_subchannels_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "speed")]
    fn connect_speed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DeviceEthernet>> DeviceEthernetExt for O {
    fn is_carrier(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_device_ethernet_get_carrier(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn permanent_hw_address(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_device_ethernet_get_permanent_hw_address(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn s390_subchannels(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::nm_device_ethernet_get_s390_subchannels(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn speed(&self) -> u32 {
        unsafe { ffi::nm_device_ethernet_get_speed(self.as_ref().to_glib_none().0) }
    }

    fn perm_hw_address(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "perm-hw-address")
    }

    fn connect_carrier_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_carrier_trampoline<
            P: IsA<DeviceEthernet>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMDeviceEthernet,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DeviceEthernet::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::carrier\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_carrier_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_perm_hw_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_perm_hw_address_trampoline<
            P: IsA<DeviceEthernet>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMDeviceEthernet,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DeviceEthernet::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::perm-hw-address\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_perm_hw_address_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn connect_s390_subchannels_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_s390_subchannels_trampoline<
            P: IsA<DeviceEthernet>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMDeviceEthernet,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DeviceEthernet::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::s390-subchannels\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_s390_subchannels_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_speed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_speed_trampoline<
            P: IsA<DeviceEthernet>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMDeviceEthernet,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DeviceEthernet::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::speed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_speed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DeviceEthernet {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DeviceEthernet")
    }
}
