// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

#[cfg(any(feature = "v1_22", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
use crate::DhcpHostnameFlags;
use crate::IPAddress;
use crate::IPRoute;
#[cfg(any(feature = "v1_18", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
use crate::IPRoutingRule;
use crate::Setting;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_28", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
use std::mem;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMSettingIPConfig")]
    pub struct SettingIPConfig(Object<ffi::NMSettingIPConfig, ffi::NMSettingIPConfigClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_ip_config_get_type(),
    }
}

pub const NONE_SETTING_IP_CONFIG: Option<&SettingIPConfig> = None;

/// Trait containing all [`struct@SettingIPConfig`] methods.
///
/// # Implementors
///
/// [`SettingIP4Config`][struct@crate::SettingIP4Config], [`SettingIP6Config`][struct@crate::SettingIP6Config], [`SettingIPConfig`][struct@crate::SettingIPConfig]
pub trait SettingIPConfigExt: 'static {
    /// Adds a new IP address and associated information to the setting. The
    /// given address is duplicated internally and is not changed by this function.
    /// ## `address`
    /// the new address to add
    ///
    /// # Returns
    ///
    /// [`true`] if the address was added; [`false`] if the address was already
    /// known.
    #[doc(alias = "nm_setting_ip_config_add_address")]
    fn add_address(&self, address: &IPAddress) -> bool;

    /// Adds a new DHCP reject server to the setting.
    /// ## `server`
    /// the DHCP reject server to add
    #[cfg(any(feature = "v1_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
    #[doc(alias = "nm_setting_ip_config_add_dhcp_reject_server")]
    fn add_dhcp_reject_server(&self, server: &str);

    /// Adds a new DNS server to the setting.
    /// ## `dns`
    /// the IP address of the DNS server to add
    ///
    /// # Returns
    ///
    /// [`true`] if the DNS server was added; [`false`] if the server was already
    /// known
    #[doc(alias = "nm_setting_ip_config_add_dns")]
    fn add_dns(&self, dns: &str) -> bool;

    /// Adds a new DNS option to the setting.
    /// ## `dns_option`
    /// the DNS option to add
    ///
    /// # Returns
    ///
    /// [`true`] if the DNS option was added; [`false`] otherwise
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_config_add_dns_option")]
    fn add_dns_option(&self, dns_option: &str) -> bool;

    /// Adds a new DNS search domain to the setting.
    /// ## `dns_search`
    /// the search domain to add
    ///
    /// # Returns
    ///
    /// [`true`] if the DNS search domain was added; [`false`] if the search
    /// domain was already known
    #[doc(alias = "nm_setting_ip_config_add_dns_search")]
    fn add_dns_search(&self, dns_search: &str) -> bool;

    /// Appends a new route and associated information to the setting. The
    /// given route is duplicated internally and is not changed by this function.
    /// If an identical route (considering attributes as well) already exists, the
    /// route is not added and the function returns [`false`].
    ///
    /// Note that before 1.10, this function would not consider route attributes
    /// and not add a route that has an existing route with same dest/prefix,next_hop,metric
    /// parameters.
    /// ## `route`
    /// the route to add
    ///
    /// # Returns
    ///
    /// [`true`] if the route was added; [`false`] if the route was already known.
    #[doc(alias = "nm_setting_ip_config_add_route")]
    fn add_route(&self, route: &IPRoute) -> bool;

    /// Appends a new routing-rule and associated information to the setting. The
    /// given routing rules gets sealed and the reference count is incremented.
    /// The function does not check whether an identical rule already exists
    /// and always appends the rule to the end of the list.
    /// ## `routing_rule`
    /// the [`IPRoutingRule`][crate::IPRoutingRule] to add. The address family
    ///  of the added rule must be compatible with the setting.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_ip_config_add_routing_rule")]
    fn add_routing_rule(&self, routing_rule: &IPRoutingRule);

    /// Removes all configured addresses.
    #[doc(alias = "nm_setting_ip_config_clear_addresses")]
    fn clear_addresses(&self);

    /// Removes all configured DHCP reject servers.
    #[cfg(any(feature = "v1_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
    #[doc(alias = "nm_setting_ip_config_clear_dhcp_reject_servers")]
    fn clear_dhcp_reject_servers(&self);

    /// Removes all configured DNS servers.
    #[doc(alias = "nm_setting_ip_config_clear_dns")]
    fn clear_dns(&self);

    /// Removes all configured DNS options.
    /// ## `is_set`
    /// the dns-options can be either empty or unset (default).
    ///  Specify how to clear the options.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_config_clear_dns_options")]
    fn clear_dns_options(&self, is_set: bool);

    /// Removes all configured DNS search domains.
    #[doc(alias = "nm_setting_ip_config_clear_dns_searches")]
    fn clear_dns_searches(&self);

    /// Removes all configured routes.
    #[doc(alias = "nm_setting_ip_config_clear_routes")]
    fn clear_routes(&self);

    /// Removes all configured routing rules.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_ip_config_clear_routing_rules")]
    fn clear_routing_rules(&self);

    /// ## `idx`
    /// index number of the address to return
    ///
    /// # Returns
    ///
    /// the address at index `idx`
    #[doc(alias = "nm_setting_ip_config_get_address")]
    #[doc(alias = "get_address")]
    fn address(&self, idx: i32) -> Option<IPAddress>;

    ///
    /// # Returns
    ///
    /// the `property::SettingIPConfig::dad-timeout` property.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_config_get_dad_timeout")]
    #[doc(alias = "get_dad_timeout")]
    fn dad_timeout(&self) -> i32;

    /// Returns the value contained in the `property::SettingIPConfig::dhcp-hostname`
    /// property.
    ///
    /// # Returns
    ///
    /// the configured hostname to send to the DHCP server
    #[doc(alias = "nm_setting_ip_config_get_dhcp_hostname")]
    #[doc(alias = "get_dhcp_hostname")]
    fn dhcp_hostname(&self) -> Option<glib::GString>;

    /// Returns the value contained in the `property::SettingIPConfig::dhcp-hostname-flags`
    /// property.
    ///
    /// # Returns
    ///
    /// flags for the DHCP hostname and FQDN
    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "nm_setting_ip_config_get_dhcp_hostname_flags")]
    #[doc(alias = "get_dhcp_hostname_flags")]
    fn dhcp_hostname_flags(&self) -> DhcpHostnameFlags;

    /// Returns the value contained in the `property::SettingIPConfig::dhcp-iaid`
    /// property.
    ///
    /// # Returns
    ///
    /// the configured DHCP IAID (Identity Association Identifier)
    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "nm_setting_ip_config_get_dhcp_iaid")]
    #[doc(alias = "get_dhcp_iaid")]
    fn dhcp_iaid(&self) -> Option<glib::GString>;

    ///
    /// # Returns
    ///
    ///
    ///  A [`None`] terminated array of DHCP reject servers. Even if no reject
    ///  servers are configured, this always returns a non [`None`] value.
    #[cfg(any(feature = "v1_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
    #[doc(alias = "nm_setting_ip_config_get_dhcp_reject_servers")]
    #[doc(alias = "get_dhcp_reject_servers")]
    fn dhcp_reject_servers(&self) -> Vec<glib::GString>;

    /// Returns the value contained in the `property::SettingIPConfig::dhcp-send-hostname`
    /// property.
    ///
    /// # Returns
    ///
    /// [`true`] if NetworkManager should send the machine hostname to the
    /// DHCP server when requesting addresses to allow the server to automatically
    /// update DNS information for this machine.
    #[doc(alias = "nm_setting_ip_config_get_dhcp_send_hostname")]
    #[doc(alias = "get_dhcp_send_hostname")]
    fn is_dhcp_send_hostname(&self) -> bool;

    /// Returns the value contained in the `property::SettingIPConfig::dhcp-timeout`
    /// property.
    ///
    /// # Returns
    ///
    /// the configured DHCP timeout in seconds. 0 = default for
    /// the particular kind of device.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_config_get_dhcp_timeout")]
    #[doc(alias = "get_dhcp_timeout")]
    fn dhcp_timeout(&self) -> i32;

    /// ## `idx`
    /// index number of the DNS server to return
    ///
    /// # Returns
    ///
    /// the IP address of the DNS server at index `idx`
    #[doc(alias = "nm_setting_ip_config_get_dns")]
    #[doc(alias = "get_dns")]
    fn dns(&self, idx: i32) -> Option<glib::GString>;

    /// ## `idx`
    /// index number of the DNS option
    ///
    /// # Returns
    ///
    /// the DNS option at index `idx`
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_config_get_dns_option")]
    #[doc(alias = "get_dns_option")]
    fn dns_option(&self, idx: u32) -> Option<glib::GString>;

    ///
    /// # Returns
    ///
    /// the priority of DNS servers
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "nm_setting_ip_config_get_dns_priority")]
    #[doc(alias = "get_dns_priority")]
    fn dns_priority(&self) -> i32;

    /// ## `idx`
    /// index number of the DNS search domain to return
    ///
    /// # Returns
    ///
    /// the DNS search domain at index `idx`
    #[doc(alias = "nm_setting_ip_config_get_dns_search")]
    #[doc(alias = "get_dns_search")]
    fn dns_search(&self, idx: i32) -> Option<glib::GString>;

    ///
    /// # Returns
    ///
    /// the IP address of the gateway associated with this configuration, or
    /// [`None`].
    #[doc(alias = "nm_setting_ip_config_get_gateway")]
    #[doc(alias = "get_gateway")]
    fn gateway(&self) -> Option<glib::GString>;

    /// Returns the value contained in the `property::SettingIPConfig::ignore-auto-dns`
    /// property.
    ///
    /// # Returns
    ///
    /// [`true`] if automatically configured (ie via DHCP) DNS information
    /// should be ignored.
    #[doc(alias = "nm_setting_ip_config_get_ignore_auto_dns")]
    #[doc(alias = "get_ignore_auto_dns")]
    fn ignores_auto_dns(&self) -> bool;

    /// Returns the value contained in the `property::SettingIPConfig::ignore-auto-routes`
    /// property.
    ///
    /// # Returns
    ///
    /// [`true`] if automatically configured (ie via DHCP) routes should be
    /// ignored.
    #[doc(alias = "nm_setting_ip_config_get_ignore_auto_routes")]
    #[doc(alias = "get_ignore_auto_routes")]
    fn ignores_auto_routes(&self) -> bool;

    /// Returns the value contained in the `property::SettingIPConfig::may-fail`
    /// property.
    ///
    /// # Returns
    ///
    /// [`true`] if this connection doesn't require this type of IP
    /// addressing to complete for the connection to succeed.
    #[doc(alias = "nm_setting_ip_config_get_may_fail")]
    #[doc(alias = "get_may_fail")]
    fn is_may_fail(&self) -> bool;

    ///
    /// # Returns
    ///
    /// the `property::SettingIPConfig::method` property of the setting; see
    /// [`SettingIP4Config`][crate::SettingIP4Config] and [`SettingIP6Config`][crate::SettingIP6Config] for details of the
    /// methods available with each type.
    #[doc(alias = "nm_setting_ip_config_get_method")]
    #[doc(alias = "get_method")]
    fn method(&self) -> Option<glib::GString>;

    /// Returns the value contained in the `property::SettingIPConfig::never-default`
    /// property.
    ///
    /// # Returns
    ///
    /// [`true`] if this connection should never be the default
    ///  connection
    #[doc(alias = "nm_setting_ip_config_get_never_default")]
    #[doc(alias = "get_never_default")]
    fn is_never_default(&self) -> bool;

    ///
    /// # Returns
    ///
    /// the number of configured addresses
    #[doc(alias = "nm_setting_ip_config_get_num_addresses")]
    #[doc(alias = "get_num_addresses")]
    fn num_addresses(&self) -> u32;

    ///
    /// # Returns
    ///
    /// the number of configured DNS servers
    #[doc(alias = "nm_setting_ip_config_get_num_dns")]
    #[doc(alias = "get_num_dns")]
    fn num_dns(&self) -> u32;

    ///
    /// # Returns
    ///
    /// the number of configured DNS options
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_config_get_num_dns_options")]
    #[doc(alias = "get_num_dns_options")]
    fn num_dns_options(&self) -> u32;

    ///
    /// # Returns
    ///
    /// the number of configured DNS search domains
    #[doc(alias = "nm_setting_ip_config_get_num_dns_searches")]
    #[doc(alias = "get_num_dns_searches")]
    fn num_dns_searches(&self) -> u32;

    ///
    /// # Returns
    ///
    /// the number of configured routes
    #[doc(alias = "nm_setting_ip_config_get_num_routes")]
    #[doc(alias = "get_num_routes")]
    fn num_routes(&self) -> u32;

    ///
    /// # Returns
    ///
    /// the number of configured routing rules
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_ip_config_get_num_routing_rules")]
    #[doc(alias = "get_num_routing_rules")]
    fn num_routing_rules(&self) -> u32;

    /// Returns the value contained in the `property::SettingIPConfig::required-timeout`
    /// property.
    ///
    /// # Returns
    ///
    /// the required timeout for the address family
    #[cfg(any(feature = "v1_34", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_34")))]
    #[doc(alias = "nm_setting_ip_config_get_required_timeout")]
    #[doc(alias = "get_required_timeout")]
    fn required_timeout(&self) -> i32;

    /// ## `idx`
    /// index number of the route to return
    ///
    /// # Returns
    ///
    /// the route at index `idx`
    #[doc(alias = "nm_setting_ip_config_get_route")]
    #[doc(alias = "get_route")]
    fn route(&self, idx: i32) -> Option<IPRoute>;

    /// Returns the value contained in the `property::SettingIPConfig::route-metric`
    /// property.
    ///
    /// # Returns
    ///
    /// the route metric that is used for routes that don't explicitly
    /// specify a metric. See `property::SettingIPConfig::route-metric` for more details.
    #[doc(alias = "nm_setting_ip_config_get_route_metric")]
    #[doc(alias = "get_route_metric")]
    fn route_metric(&self) -> i64;

    /// Returns the value contained in the `property::SettingIPConfig::route-table`
    /// property.
    ///
    /// # Returns
    ///
    /// the configured route-table.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "nm_setting_ip_config_get_route_table")]
    #[doc(alias = "get_route_table")]
    fn route_table(&self) -> u32;

    /// ## `idx`
    /// index number of the routing_rule to return
    ///
    /// # Returns
    ///
    /// the routing rule at index `idx`
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_ip_config_get_routing_rule")]
    #[doc(alias = "get_routing_rule")]
    fn routing_rule(&self, idx: u32) -> Option<IPRoutingRule>;

    /// NMSettingIPConfig can have a list of dns-options. If the list
    /// is empty, there are two similar (but differentiated) states.
    /// Either the options are explicitly set to have no values,
    /// or the options are left undefined. The latter means to use
    /// a default configuration, while the former explicitly means "no-options".
    ///
    /// # Returns
    ///
    /// whether DNS options are initialized or left unset (the default).
    #[doc(alias = "nm_setting_ip_config_has_dns_options")]
    fn has_dns_options(&self) -> bool;

    /// Removes the address at index `idx`.
    /// ## `idx`
    /// index number of the address to remove
    #[doc(alias = "nm_setting_ip_config_remove_address")]
    fn remove_address(&self, idx: i32);

    /// Removes the address `address`.
    /// ## `address`
    /// the IP address to remove
    ///
    /// # Returns
    ///
    /// [`true`] if the address was found and removed; [`false`] if it was not.
    #[doc(alias = "nm_setting_ip_config_remove_address_by_value")]
    fn remove_address_by_value(&self, address: &IPAddress) -> bool;

    /// Removes the DHCP reject server at index `idx`.
    /// ## `idx`
    /// index number of the DHCP reject server
    #[cfg(any(feature = "v1_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
    #[doc(alias = "nm_setting_ip_config_remove_dhcp_reject_server")]
    fn remove_dhcp_reject_server(&self, idx: u32);

    /// Removes the DNS server at index `idx`.
    /// ## `idx`
    /// index number of the DNS server to remove
    #[doc(alias = "nm_setting_ip_config_remove_dns")]
    fn remove_dns(&self, idx: i32);

    /// Removes the DNS server `dns`.
    /// ## `dns`
    /// the DNS server to remove
    ///
    /// # Returns
    ///
    /// [`true`] if the DNS server was found and removed; [`false`] if it was not.
    #[doc(alias = "nm_setting_ip_config_remove_dns_by_value")]
    fn remove_dns_by_value(&self, dns: &str) -> bool;

    /// Removes the DNS option at index `idx`.
    /// ## `idx`
    /// index number of the DNS option
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_config_remove_dns_option")]
    fn remove_dns_option(&self, idx: i32);

    /// Removes the DNS option `dns_option`.
    /// ## `dns_option`
    /// the DNS option to remove
    ///
    /// # Returns
    ///
    /// [`true`] if the DNS option was found and removed; [`false`] if it was not.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_config_remove_dns_option_by_value")]
    fn remove_dns_option_by_value(&self, dns_option: &str) -> bool;

    /// Removes the DNS search domain at index `idx`.
    /// ## `idx`
    /// index number of the DNS search domain
    #[doc(alias = "nm_setting_ip_config_remove_dns_search")]
    fn remove_dns_search(&self, idx: i32);

    /// Removes the DNS search domain `dns_search`.
    /// ## `dns_search`
    /// the search domain to remove
    ///
    /// # Returns
    ///
    /// [`true`] if the DNS search domain was found and removed; [`false`] if it was not.
    #[doc(alias = "nm_setting_ip_config_remove_dns_search_by_value")]
    fn remove_dns_search_by_value(&self, dns_search: &str) -> bool;

    /// Removes the route at index `idx`.
    /// ## `idx`
    /// index number of the route
    #[doc(alias = "nm_setting_ip_config_remove_route")]
    fn remove_route(&self, idx: i32);

    /// Removes the first matching route that matches `route`.
    /// Note that before 1.10, this function would only compare dest/prefix,next_hop,metric
    /// and ignore route attributes. Now, `route` must match exactly.
    /// ## `route`
    /// the route to remove
    ///
    /// # Returns
    ///
    /// [`true`] if the route was found and removed; [`false`] if it was not.
    #[doc(alias = "nm_setting_ip_config_remove_route_by_value")]
    fn remove_route_by_value(&self, route: &IPRoute) -> bool;

    /// Removes the routing_rule at index `idx`.
    /// ## `idx`
    /// index number of the routing_rule
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_ip_config_remove_routing_rule")]
    fn remove_routing_rule(&self, idx: u32);

    /// Timeout in milliseconds used to check for the presence of duplicate IP
    /// addresses on the network. If an address conflict is detected, the
    /// activation will fail. A zero value means that no duplicate address
    /// detection is performed, -1 means the default value (either configuration
    /// ipvx.dad-timeout override or zero). A value greater than zero is a
    /// timeout in milliseconds.
    ///
    /// The property is currently implemented only for IPv4.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "dad-timeout")]
    fn set_dad_timeout(&self, dad_timeout: i32);

    /// If the `property::SettingIPConfig::dhcp-send-hostname` property is [`true`], then the
    /// specified name will be sent to the DHCP server when acquiring a lease.
    /// This property and `property::SettingIP4Config::dhcp-fqdn` are mutually exclusive and
    /// cannot be set at the same time.
    #[doc(alias = "dhcp-hostname")]
    fn set_dhcp_hostname(&self, dhcp_hostname: Option<&str>);

    /// Flags for the DHCP hostname and FQDN.
    ///
    /// Currently, this property only includes flags to control the FQDN flags
    /// set in the DHCP FQDN option. Supported FQDN flags are
    /// [`DhcpHostnameFlags::FQDN_SERV_UPDATE`][crate::DhcpHostnameFlags::FQDN_SERV_UPDATE],
    /// [`DhcpHostnameFlags::FQDN_ENCODED`][crate::DhcpHostnameFlags::FQDN_ENCODED] and
    /// [`DhcpHostnameFlags::FQDN_NO_UPDATE`][crate::DhcpHostnameFlags::FQDN_NO_UPDATE]. When no FQDN flag is set and
    /// [`DhcpHostnameFlags::FQDN_CLEAR_FLAGS`][crate::DhcpHostnameFlags::FQDN_CLEAR_FLAGS] is set, the DHCP FQDN option will
    /// contain no flag. Otherwise, if no FQDN flag is set and
    /// [`DhcpHostnameFlags::FQDN_CLEAR_FLAGS`][crate::DhcpHostnameFlags::FQDN_CLEAR_FLAGS] is not set, the standard FQDN flags
    /// are set in the request:
    /// [`DhcpHostnameFlags::FQDN_SERV_UPDATE`][crate::DhcpHostnameFlags::FQDN_SERV_UPDATE],
    /// [`DhcpHostnameFlags::FQDN_ENCODED`][crate::DhcpHostnameFlags::FQDN_ENCODED] for IPv4 and
    /// [`DhcpHostnameFlags::FQDN_SERV_UPDATE`][crate::DhcpHostnameFlags::FQDN_SERV_UPDATE] for IPv6.
    ///
    /// When this property is set to the default value [`DhcpHostnameFlags::NONE`][crate::DhcpHostnameFlags::NONE],
    /// a global default is looked up in NetworkManager configuration. If that value
    /// is unset or also [`DhcpHostnameFlags::NONE`][crate::DhcpHostnameFlags::NONE], then the standard FQDN flags
    /// described above are sent in the DHCP requests.
    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "dhcp-hostname-flags")]
    fn set_dhcp_hostname_flags(&self, dhcp_hostname_flags: u32);

    /// A string containing the "Identity Association Identifier" (IAID) used
    /// by the DHCP client. The property is a 32-bit decimal value or a
    /// special value among "mac", "perm-mac", "ifname" and "stable". When
    /// set to "mac" (or "perm-mac"), the last 4 bytes of the current (or
    /// permanent) MAC address are used as IAID. When set to "ifname", the
    /// IAID is computed by hashing the interface name. The special value
    /// "stable" can be used to generate an IAID based on the stable-id (see
    /// connection.stable-id), a per-host key and the interface name. When
    /// the property is unset, the value from global configuration is used;
    /// if no global default is set then the IAID is assumed to be
    /// "ifname". Note that at the moment this property is ignored for IPv6
    /// by dhclient, which always derives the IAID from the MAC address.
    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "dhcp-iaid")]
    fn set_dhcp_iaid(&self, dhcp_iaid: Option<&str>);

    /// Array of servers from which DHCP offers must be rejected. This property
    /// is useful to avoid getting a lease from misconfigured or rogue servers.
    ///
    /// For DHCPv4, each element must be an IPv4 address, optionally
    /// followed by a slash and a prefix length (e.g. "192.168.122.0/24").
    ///
    /// This property is currently not implemented for DHCPv6.
    #[cfg(any(feature = "v1_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
    #[doc(alias = "dhcp-reject-servers")]
    fn set_dhcp_reject_servers(&self, dhcp_reject_servers: &[&str]);

    /// If [`true`], a hostname is sent to the DHCP server when acquiring a lease.
    /// Some DHCP servers use this hostname to update DNS databases, essentially
    /// providing a static hostname for the computer. If the
    /// `property::SettingIPConfig::dhcp-hostname` property is [`None`] and this property is
    /// [`true`], the current persistent hostname of the computer is sent.
    #[doc(alias = "dhcp-send-hostname")]
    fn set_dhcp_send_hostname(&self, dhcp_send_hostname: bool);

    /// A timeout for a DHCP transaction in seconds. If zero (the default), a
    /// globally configured default is used. If still unspecified, a device specific
    /// timeout is used (usually 45 seconds).
    ///
    /// Set to 2147483647 (MAXINT32) for infinity.
    #[doc(alias = "dhcp-timeout")]
    fn get_property_dhcp_timeout(&self) -> i32;

    /// A timeout for a DHCP transaction in seconds. If zero (the default), a
    /// globally configured default is used. If still unspecified, a device specific
    /// timeout is used (usually 45 seconds).
    ///
    /// Set to 2147483647 (MAXINT32) for infinity.
    #[doc(alias = "dhcp-timeout")]
    fn set_dhcp_timeout(&self, dhcp_timeout: i32);

    /// Array of IP addresses of DNS servers.
    fn set_dns(&self, dns: &[&str]);

    /// Array of DNS options as described in man 5 resolv.conf.
    ///
    /// [`None`] means that the options are unset and left at the default.
    /// In this case NetworkManager will use default options. This is
    /// distinct from an empty list of properties.
    ///
    /// The currently supported options are "attempts", "debug", "edns0",
    /// "inet6", "ip6-bytestring", "ip6-dotint", "ndots", "no-check-names",
    /// "no-ip6-dotint", "no-reload", "no-tld-query", "rotate", "single-request",
    /// "single-request-reopen", "timeout", "trust-ad", "use-vc".
    ///
    /// The "trust-ad" setting is only honored if the profile contributes
    /// name servers to resolv.conf, and if all contributing profiles have
    /// "trust-ad" enabled.
    ///
    /// When using a caching DNS plugin (dnsmasq or systemd-resolved in
    /// NetworkManager.conf) then "edns0" and "trust-ad" are automatically
    /// added.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "dns-options")]
    fn dns_options(&self) -> Vec<glib::GString>;

    /// Array of DNS options as described in man 5 resolv.conf.
    ///
    /// [`None`] means that the options are unset and left at the default.
    /// In this case NetworkManager will use default options. This is
    /// distinct from an empty list of properties.
    ///
    /// The currently supported options are "attempts", "debug", "edns0",
    /// "inet6", "ip6-bytestring", "ip6-dotint", "ndots", "no-check-names",
    /// "no-ip6-dotint", "no-reload", "no-tld-query", "rotate", "single-request",
    /// "single-request-reopen", "timeout", "trust-ad", "use-vc".
    ///
    /// The "trust-ad" setting is only honored if the profile contributes
    /// name servers to resolv.conf, and if all contributing profiles have
    /// "trust-ad" enabled.
    ///
    /// When using a caching DNS plugin (dnsmasq or systemd-resolved in
    /// NetworkManager.conf) then "edns0" and "trust-ad" are automatically
    /// added.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "dns-options")]
    fn set_dns_options(&self, dns_options: &[&str]);

    /// DNS servers priority.
    ///
    /// The relative priority for DNS servers specified by this setting. A lower
    /// numerical value is better (higher priority).
    ///
    /// Negative values have the special effect of excluding other configurations
    /// with a greater numerical priority value; so in presence of at least one negative
    /// priority, only DNS servers from connections with the lowest priority value will be used.
    /// To avoid all DNS leaks, set the priority of the profile that should be used
    /// to the most negative value of all active connections profiles.
    ///
    /// Zero selects a globally configured default value. If the latter is missing
    /// or zero too, it defaults to 50 for VPNs (including WireGuard) and 100 for
    /// other connections.
    ///
    /// Note that the priority is to order DNS settings for multiple active
    /// connections. It does not disambiguate multiple DNS servers within the
    /// same connection profile.
    ///
    /// When multiple devices have configurations with the same priority, VPNs will be
    /// considered first, then devices with the best (lowest metric) default
    /// route and then all other devices.
    ///
    /// When using dns=default, servers with higher priority will be on top of
    /// resolv.conf. To prioritize a given server over another one within the
    /// same connection, just specify them in the desired order.
    /// Note that commonly the resolver tries name servers in /etc/resolv.conf
    /// in the order listed, proceeding with the next server in the list
    /// on failure. See for example the "rotate" option of the dns-options setting.
    /// If there are any negative DNS priorities, then only name servers from
    /// the devices with that lowest priority will be considered.
    ///
    /// When using a DNS resolver that supports Conditional Forwarding or
    /// Split DNS (with dns=dnsmasq or dns=systemd-resolved settings), each connection
    /// is used to query domains in its search list. The search domains determine which
    /// name servers to ask, and the DNS priority is used to prioritize
    /// name servers based on the domain. Queries for domains not present in any
    /// search list are routed through connections having the '~.' special wildcard
    /// domain, which is added automatically to connections with the default route
    /// (or can be added manually). When multiple connections specify the same domain, the
    /// one with the best priority (lowest numerical value) wins. If a sub domain
    /// is configured on another interface it will be accepted regardless the priority,
    /// unless parent domain on the other interface has a negative priority, which causes
    /// the sub domain to be shadowed.
    /// With Split DNS one can avoid undesired DNS leaks by properly configuring
    /// DNS priorities and the search domains, so that only name servers of the desired
    /// interface are configured.
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "dns-priority")]
    fn set_dns_priority(&self, dns_priority: i32);

    /// Array of DNS search domains. Domains starting with a tilde ('~')
    /// are considered 'routing' domains and are used only to decide the
    /// interface over which a query must be forwarded; they are not used
    /// to complete unqualified host names.
    ///
    /// When using a DNS plugin that supports Conditional Forwarding or
    /// Split DNS, then the search domains specify which name servers to
    /// query. This makes the behavior different from running with plain
    /// /etc/resolv.conf. For more information see also the dns-priority setting.
    #[doc(alias = "dns-search")]
    fn set_dns_search(&self, dns_search: &[&str]);

    /// The gateway associated with this configuration. This is only meaningful
    /// if `property::SettingIPConfig::addresses` is also set.
    ///
    /// The gateway's main purpose is to control the next hop of the standard default route on the device.
    /// Hence, the gateway property conflicts with `property::SettingIPConfig::never-default` and will be
    /// automatically dropped if the IP configuration is set to never-default.
    ///
    /// As an alternative to set the gateway, configure a static default route with /0 as prefix
    /// length.
    fn set_gateway(&self, gateway: Option<&str>);

    /// When `property::SettingIPConfig::method` is set to "auto" and this property to
    /// [`true`], automatically configured name servers and search domains are
    /// ignored and only name servers and search domains specified in the
    /// `property::SettingIPConfig::dns` and `property::SettingIPConfig::dns-search` properties, if
    /// any, are used.
    #[doc(alias = "ignore-auto-dns")]
    fn set_ignore_auto_dns(&self, ignore_auto_dns: bool);

    /// When `property::SettingIPConfig::method` is set to "auto" and this property to
    /// [`true`], automatically configured routes are ignored and only routes
    /// specified in the `property::SettingIPConfig::routes` property, if any, are used.
    #[doc(alias = "ignore-auto-routes")]
    fn set_ignore_auto_routes(&self, ignore_auto_routes: bool);

    /// If [`true`], allow overall network configuration to proceed even if the
    /// configuration specified by this property times out. Note that at least
    /// one IP configuration must succeed or overall network configuration will
    /// still fail. For example, in IPv6-only networks, setting this property to
    /// [`true`] on the [`SettingIP4Config`][crate::SettingIP4Config] allows the overall network configuration
    /// to succeed if IPv4 configuration fails but IPv6 configuration completes
    /// successfully.
    #[doc(alias = "may-fail")]
    fn set_may_fail(&self, may_fail: bool);

    /// IP configuration method.
    ///
    /// [`SettingIP4Config`][crate::SettingIP4Config] and [`SettingIP6Config`][crate::SettingIP6Config] both support "disabled",
    /// "auto", "manual", and "link-local". See the subclass-specific
    /// documentation for other values.
    ///
    /// In general, for the "auto" method, properties such as
    /// `property::SettingIPConfig::dns` and `property::SettingIPConfig::routes` specify information
    /// that is added on to the information returned from automatic
    /// configuration. The `property::SettingIPConfig::ignore-auto-routes` and
    /// `property::SettingIPConfig::ignore-auto-dns` properties modify this behavior.
    ///
    /// For methods that imply no upstream network, such as "shared" or
    /// "link-local", these properties must be empty.
    ///
    /// For IPv4 method "shared", the IP subnet can be configured by adding one
    /// manual IPv4 address or otherwise 10.42.x.0/24 is chosen. Note that the
    /// shared method must be configured on the interface which shares the internet
    /// to a subnet, not on the uplink which is shared.
    fn set_method(&self, method: Option<&str>);

    /// If [`true`], this connection will never be the default connection for this
    /// IP type, meaning it will never be assigned the default route by
    /// NetworkManager.
    #[doc(alias = "never-default")]
    fn set_never_default(&self, never_default: bool);

    /// The minimum time interval in milliseconds for which dynamic IP configuration
    /// should be tried before the connection succeeds.
    ///
    /// This property is useful for example if both IPv4 and IPv6 are enabled and
    /// are allowed to fail. Normally the connection succeeds as soon as one of
    /// the two address families completes; by setting a required timeout for
    /// e.g. IPv4, one can ensure that even if IP6 succeeds earlier than IPv4,
    /// NetworkManager waits some time for IPv4 before the connection becomes
    /// active.
    ///
    /// Note that if `property::SettingIPConfig::may-fail` is FALSE for the same address
    /// family, this property has no effect as NetworkManager needs to wait for
    /// the full DHCP timeout.
    ///
    /// A zero value means that no required timeout is present, -1 means the
    /// default value (either configuration ipvx.required-timeout override or
    /// zero).
    #[cfg(any(feature = "v1_34", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_34")))]
    #[doc(alias = "required-timeout")]
    fn set_required_timeout(&self, required_timeout: i32);

    /// The default metric for routes that don't explicitly specify a metric.
    /// The default value -1 means that the metric is chosen automatically
    /// based on the device type.
    /// The metric applies to dynamic routes, manual (static) routes that
    /// don't have an explicit metric setting, address prefix routes, and
    /// the default route.
    /// Note that for IPv6, the kernel accepts zero (0) but coerces it to
    /// 1024 (user default). Hence, setting this property to zero effectively
    /// mean setting it to 1024.
    /// For IPv4, zero is a regular value for the metric.
    #[doc(alias = "route-metric")]
    fn set_route_metric(&self, route_metric: i64);

    /// Enable policy routing (source routing) and set the routing table used when adding routes.
    ///
    /// This affects all routes, including device-routes, IPv4LL, DHCP, SLAAC, default-routes
    /// and static routes. But note that static routes can individually overwrite the setting
    /// by explicitly specifying a non-zero routing table.
    ///
    /// If the table setting is left at zero, it is eligible to be overwritten via global
    /// configuration. If the property is zero even after applying the global configuration
    /// value, policy routing is disabled for the address family of this connection.
    ///
    /// Policy routing disabled means that NetworkManager will add all routes to the main
    /// table (except static routes that explicitly configure a different table). Additionally,
    /// NetworkManager will not delete any extraneous routes from tables except the main table.
    /// This is to preserve backward compatibility for users who manage routing tables outside
    /// of NetworkManager.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "route-table")]
    fn set_route_table(&self, route_table: u32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "dad-timeout")]
    fn connect_dad_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "dhcp-hostname")]
    fn connect_dhcp_hostname_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "dhcp-hostname-flags")]
    fn connect_dhcp_hostname_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "dhcp-iaid")]
    fn connect_dhcp_iaid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
    #[doc(alias = "dhcp-reject-servers")]
    fn connect_dhcp_reject_servers_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "dhcp-send-hostname")]
    fn connect_dhcp_send_hostname_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "dhcp-timeout")]
    fn connect_dhcp_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "dns")]
    fn connect_dns_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "dns-options")]
    fn connect_dns_options_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "dns-priority")]
    fn connect_dns_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "dns-search")]
    fn connect_dns_search_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "gateway")]
    fn connect_gateway_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "ignore-auto-dns")]
    fn connect_ignore_auto_dns_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "ignore-auto-routes")]
    fn connect_ignore_auto_routes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "may-fail")]
    fn connect_may_fail_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "method")]
    fn connect_method_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "never-default")]
    fn connect_never_default_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_34", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_34")))]
    #[doc(alias = "required-timeout")]
    fn connect_required_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "route-metric")]
    fn connect_route_metric_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "route-table")]
    fn connect_route_table_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingIPConfig>> SettingIPConfigExt for O {
    fn add_address(&self, address: &IPAddress) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_add_address(
                self.as_ref().to_glib_none().0,
                address.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
    fn add_dhcp_reject_server(&self, server: &str) {
        unsafe {
            ffi::nm_setting_ip_config_add_dhcp_reject_server(
                self.as_ref().to_glib_none().0,
                server.to_glib_none().0,
            );
        }
    }

    fn add_dns(&self, dns: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_add_dns(
                self.as_ref().to_glib_none().0,
                dns.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn add_dns_option(&self, dns_option: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_add_dns_option(
                self.as_ref().to_glib_none().0,
                dns_option.to_glib_none().0,
            ))
        }
    }

    fn add_dns_search(&self, dns_search: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_add_dns_search(
                self.as_ref().to_glib_none().0,
                dns_search.to_glib_none().0,
            ))
        }
    }

    fn add_route(&self, route: &IPRoute) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_add_route(
                self.as_ref().to_glib_none().0,
                route.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    fn add_routing_rule(&self, routing_rule: &IPRoutingRule) {
        unsafe {
            ffi::nm_setting_ip_config_add_routing_rule(
                self.as_ref().to_glib_none().0,
                routing_rule.to_glib_none().0,
            );
        }
    }

    fn clear_addresses(&self) {
        unsafe {
            ffi::nm_setting_ip_config_clear_addresses(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v1_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
    fn clear_dhcp_reject_servers(&self) {
        unsafe {
            ffi::nm_setting_ip_config_clear_dhcp_reject_servers(self.as_ref().to_glib_none().0);
        }
    }

    fn clear_dns(&self) {
        unsafe {
            ffi::nm_setting_ip_config_clear_dns(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn clear_dns_options(&self, is_set: bool) {
        unsafe {
            ffi::nm_setting_ip_config_clear_dns_options(
                self.as_ref().to_glib_none().0,
                is_set.into_glib(),
            );
        }
    }

    fn clear_dns_searches(&self) {
        unsafe {
            ffi::nm_setting_ip_config_clear_dns_searches(self.as_ref().to_glib_none().0);
        }
    }

    fn clear_routes(&self) {
        unsafe {
            ffi::nm_setting_ip_config_clear_routes(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    fn clear_routing_rules(&self) {
        unsafe {
            ffi::nm_setting_ip_config_clear_routing_rules(self.as_ref().to_glib_none().0);
        }
    }

    fn address(&self, idx: i32) -> Option<IPAddress> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_address(
                self.as_ref().to_glib_none().0,
                idx,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn dad_timeout(&self) -> i32 {
        unsafe { ffi::nm_setting_ip_config_get_dad_timeout(self.as_ref().to_glib_none().0) }
    }

    fn dhcp_hostname(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_dhcp_hostname(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    fn dhcp_hostname_flags(&self) -> DhcpHostnameFlags {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_get_dhcp_hostname_flags(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    fn dhcp_iaid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_dhcp_iaid(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
    fn dhcp_reject_servers(&self) -> Vec<glib::GString> {
        unsafe {
            let mut out_len = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(
                ffi::nm_setting_ip_config_get_dhcp_reject_servers(
                    self.as_ref().to_glib_none().0,
                    out_len.as_mut_ptr(),
                ),
                out_len.assume_init() as usize,
            );
            ret
        }
    }

    fn is_dhcp_send_hostname(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_get_dhcp_send_hostname(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn dhcp_timeout(&self) -> i32 {
        unsafe { ffi::nm_setting_ip_config_get_dhcp_timeout(self.as_ref().to_glib_none().0) }
    }

    fn dns(&self, idx: i32) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_dns(
                self.as_ref().to_glib_none().0,
                idx,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn dns_option(&self, idx: u32) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_dns_option(
                self.as_ref().to_glib_none().0,
                idx,
            ))
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    fn dns_priority(&self) -> i32 {
        unsafe { ffi::nm_setting_ip_config_get_dns_priority(self.as_ref().to_glib_none().0) }
    }

    fn dns_search(&self, idx: i32) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_dns_search(
                self.as_ref().to_glib_none().0,
                idx,
            ))
        }
    }

    fn gateway(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_gateway(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn ignores_auto_dns(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_get_ignore_auto_dns(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn ignores_auto_routes(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_get_ignore_auto_routes(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_may_fail(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_get_may_fail(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn method(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_method(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_never_default(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_get_never_default(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn num_addresses(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_num_addresses(self.as_ref().to_glib_none().0) }
    }

    fn num_dns(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_num_dns(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn num_dns_options(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_num_dns_options(self.as_ref().to_glib_none().0) }
    }

    fn num_dns_searches(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_num_dns_searches(self.as_ref().to_glib_none().0) }
    }

    fn num_routes(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_num_routes(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    fn num_routing_rules(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_num_routing_rules(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_34", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_34")))]
    fn required_timeout(&self) -> i32 {
        unsafe { ffi::nm_setting_ip_config_get_required_timeout(self.as_ref().to_glib_none().0) }
    }

    fn route(&self, idx: i32) -> Option<IPRoute> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_route(
                self.as_ref().to_glib_none().0,
                idx,
            ))
        }
    }

    fn route_metric(&self) -> i64 {
        unsafe { ffi::nm_setting_ip_config_get_route_metric(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn route_table(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_route_table(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    fn routing_rule(&self, idx: u32) -> Option<IPRoutingRule> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_routing_rule(
                self.as_ref().to_glib_none().0,
                idx,
            ))
        }
    }

    fn has_dns_options(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_has_dns_options(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn remove_address(&self, idx: i32) {
        unsafe {
            ffi::nm_setting_ip_config_remove_address(self.as_ref().to_glib_none().0, idx);
        }
    }

    fn remove_address_by_value(&self, address: &IPAddress) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_remove_address_by_value(
                self.as_ref().to_glib_none().0,
                address.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
    fn remove_dhcp_reject_server(&self, idx: u32) {
        unsafe {
            ffi::nm_setting_ip_config_remove_dhcp_reject_server(
                self.as_ref().to_glib_none().0,
                idx,
            );
        }
    }

    fn remove_dns(&self, idx: i32) {
        unsafe {
            ffi::nm_setting_ip_config_remove_dns(self.as_ref().to_glib_none().0, idx);
        }
    }

    fn remove_dns_by_value(&self, dns: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_remove_dns_by_value(
                self.as_ref().to_glib_none().0,
                dns.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn remove_dns_option(&self, idx: i32) {
        unsafe {
            ffi::nm_setting_ip_config_remove_dns_option(self.as_ref().to_glib_none().0, idx);
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn remove_dns_option_by_value(&self, dns_option: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_remove_dns_option_by_value(
                self.as_ref().to_glib_none().0,
                dns_option.to_glib_none().0,
            ))
        }
    }

    fn remove_dns_search(&self, idx: i32) {
        unsafe {
            ffi::nm_setting_ip_config_remove_dns_search(self.as_ref().to_glib_none().0, idx);
        }
    }

    fn remove_dns_search_by_value(&self, dns_search: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_remove_dns_search_by_value(
                self.as_ref().to_glib_none().0,
                dns_search.to_glib_none().0,
            ))
        }
    }

    fn remove_route(&self, idx: i32) {
        unsafe {
            ffi::nm_setting_ip_config_remove_route(self.as_ref().to_glib_none().0, idx);
        }
    }

    fn remove_route_by_value(&self, route: &IPRoute) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_remove_route_by_value(
                self.as_ref().to_glib_none().0,
                route.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    fn remove_routing_rule(&self, idx: u32) {
        unsafe {
            ffi::nm_setting_ip_config_remove_routing_rule(self.as_ref().to_glib_none().0, idx);
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn set_dad_timeout(&self, dad_timeout: i32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dad-timeout\0".as_ptr() as *const _,
                dad_timeout.to_value().to_glib_none().0,
            );
        }
    }

    fn set_dhcp_hostname(&self, dhcp_hostname: Option<&str>) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dhcp-hostname\0".as_ptr() as *const _,
                dhcp_hostname.to_value().to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    fn set_dhcp_hostname_flags(&self, dhcp_hostname_flags: u32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dhcp-hostname-flags\0".as_ptr() as *const _,
                dhcp_hostname_flags.to_value().to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    fn set_dhcp_iaid(&self, dhcp_iaid: Option<&str>) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dhcp-iaid\0".as_ptr() as *const _,
                dhcp_iaid.to_value().to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
    fn set_dhcp_reject_servers(&self, dhcp_reject_servers: &[&str]) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dhcp-reject-servers\0".as_ptr() as *const _,
                dhcp_reject_servers.to_value().to_glib_none().0,
            );
        }
    }

    fn set_dhcp_send_hostname(&self, dhcp_send_hostname: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dhcp-send-hostname\0".as_ptr() as *const _,
                dhcp_send_hostname.to_value().to_glib_none().0,
            );
        }
    }

    fn get_property_dhcp_timeout(&self) -> i32 {
        unsafe {
            let mut value = glib::Value::from_type(<i32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dhcp-timeout\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `dhcp-timeout` getter")
        }
    }

    fn set_dhcp_timeout(&self, dhcp_timeout: i32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dhcp-timeout\0".as_ptr() as *const _,
                dhcp_timeout.to_value().to_glib_none().0,
            );
        }
    }

    fn set_dns(&self, dns: &[&str]) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dns\0".as_ptr() as *const _,
                dns.to_value().to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn dns_options(&self) -> Vec<glib::GString> {
        unsafe {
            let mut value =
                glib::Value::from_type(<Vec<glib::GString> as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dns-options\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `dns-options` getter")
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn set_dns_options(&self, dns_options: &[&str]) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dns-options\0".as_ptr() as *const _,
                dns_options.to_value().to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    fn set_dns_priority(&self, dns_priority: i32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dns-priority\0".as_ptr() as *const _,
                dns_priority.to_value().to_glib_none().0,
            );
        }
    }

    fn set_dns_search(&self, dns_search: &[&str]) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"dns-search\0".as_ptr() as *const _,
                dns_search.to_value().to_glib_none().0,
            );
        }
    }

    fn set_gateway(&self, gateway: Option<&str>) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"gateway\0".as_ptr() as *const _,
                gateway.to_value().to_glib_none().0,
            );
        }
    }

    fn set_ignore_auto_dns(&self, ignore_auto_dns: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"ignore-auto-dns\0".as_ptr() as *const _,
                ignore_auto_dns.to_value().to_glib_none().0,
            );
        }
    }

    fn set_ignore_auto_routes(&self, ignore_auto_routes: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"ignore-auto-routes\0".as_ptr() as *const _,
                ignore_auto_routes.to_value().to_glib_none().0,
            );
        }
    }

    fn set_may_fail(&self, may_fail: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"may-fail\0".as_ptr() as *const _,
                may_fail.to_value().to_glib_none().0,
            );
        }
    }

    fn set_method(&self, method: Option<&str>) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"method\0".as_ptr() as *const _,
                method.to_value().to_glib_none().0,
            );
        }
    }

    fn set_never_default(&self, never_default: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"never-default\0".as_ptr() as *const _,
                never_default.to_value().to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_34", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_34")))]
    fn set_required_timeout(&self, required_timeout: i32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"required-timeout\0".as_ptr() as *const _,
                required_timeout.to_value().to_glib_none().0,
            );
        }
    }

    fn set_route_metric(&self, route_metric: i64) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"route-metric\0".as_ptr() as *const _,
                route_metric.to_value().to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn set_route_table(&self, route_table: u32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"route-table\0".as_ptr() as *const _,
                route_table.to_value().to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn connect_dad_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dad_timeout_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dad-timeout\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dad_timeout_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_dhcp_hostname_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dhcp_hostname_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dhcp-hostname\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dhcp_hostname_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    fn connect_dhcp_hostname_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dhcp_hostname_flags_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dhcp-hostname-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dhcp_hostname_flags_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    fn connect_dhcp_iaid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dhcp_iaid_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dhcp-iaid\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dhcp_iaid_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_28", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_28")))]
    fn connect_dhcp_reject_servers_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dhcp_reject_servers_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dhcp-reject-servers\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dhcp_reject_servers_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_dhcp_send_hostname_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dhcp_send_hostname_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dhcp-send-hostname\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dhcp_send_hostname_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_dhcp_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dhcp_timeout_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dhcp-timeout\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dhcp_timeout_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_dns_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_trampoline<P: IsA<SettingIPConfig>, F: Fn(&P) + 'static>(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dns\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dns_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn connect_dns_options_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_options_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dns-options\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dns_options_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    fn connect_dns_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_priority_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dns-priority\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dns_priority_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_dns_search_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_search_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dns-search\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dns_search_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_gateway_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_gateway_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::gateway\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_gateway_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_ignore_auto_dns_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ignore_auto_dns_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ignore-auto-dns\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ignore_auto_dns_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_ignore_auto_routes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ignore_auto_routes_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ignore-auto-routes\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ignore_auto_routes_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_may_fail_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_may_fail_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::may-fail\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_may_fail_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_method_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_method_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::method\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_method_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_never_default_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_never_default_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::never-default\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_never_default_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_34", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_34")))]
    fn connect_required_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_required_timeout_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::required-timeout\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_required_timeout_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_route_metric_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_route_metric_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::route-metric\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_route_metric_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn connect_route_table_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_route_table_trampoline<
            P: IsA<SettingIPConfig>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMSettingIPConfig,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SettingIPConfig::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::route-table\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_route_table_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingIPConfig {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingIPConfig")
    }
}
