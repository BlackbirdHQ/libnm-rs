// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use std::ffi::CStr;

#[doc(alias = "NM_ACCESS_POINT_BSSID")]
pub static ACCESS_POINT_BSSID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_BSSID).to_str().unwrap()
    });
#[doc(alias = "NM_ACCESS_POINT_FLAGS")]
pub static ACCESS_POINT_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_FLAGS).to_str().unwrap()
    });
#[doc(alias = "NM_ACCESS_POINT_FREQUENCY")]
pub static ACCESS_POINT_FREQUENCY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_FREQUENCY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACCESS_POINT_HW_ADDRESS")]
pub static ACCESS_POINT_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACCESS_POINT_LAST_SEEN")]
pub static ACCESS_POINT_LAST_SEEN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_LAST_SEEN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACCESS_POINT_MAX_BITRATE")]
pub static ACCESS_POINT_MAX_BITRATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_MAX_BITRATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACCESS_POINT_MODE")]
pub static ACCESS_POINT_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_MODE).to_str().unwrap()
    });
#[doc(alias = "NM_ACCESS_POINT_RSN_FLAGS")]
pub static ACCESS_POINT_RSN_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_RSN_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACCESS_POINT_SSID")]
pub static ACCESS_POINT_SSID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_SSID).to_str().unwrap()
    });
#[doc(alias = "NM_ACCESS_POINT_STRENGTH")]
pub static ACCESS_POINT_STRENGTH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_STRENGTH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACCESS_POINT_WPA_FLAGS")]
pub static ACCESS_POINT_WPA_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_WPA_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_CONNECTION")]
pub static ACTIVE_CONNECTION_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_DEFAULT")]
pub static ACTIVE_CONNECTION_DEFAULT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_DEFAULT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_DEFAULT6")]
pub static ACTIVE_CONNECTION_DEFAULT6: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_DEFAULT6)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_DEVICES")]
pub static ACTIVE_CONNECTION_DEVICES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_DEVICES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_DHCP4_CONFIG")]
pub static ACTIVE_CONNECTION_DHCP4_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_DHCP4_CONFIG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_DHCP6_CONFIG")]
pub static ACTIVE_CONNECTION_DHCP6_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_DHCP6_CONFIG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_ID")]
pub static ACTIVE_CONNECTION_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_IP4_CONFIG")]
pub static ACTIVE_CONNECTION_IP4_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_IP4_CONFIG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_IP6_CONFIG")]
pub static ACTIVE_CONNECTION_IP6_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_IP6_CONFIG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_MASTER")]
pub static ACTIVE_CONNECTION_MASTER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_MASTER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_SPECIFIC_OBJECT_PATH")]
pub static ACTIVE_CONNECTION_SPECIFIC_OBJECT_PATH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_SPECIFIC_OBJECT_PATH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_STATE")]
pub static ACTIVE_CONNECTION_STATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_STATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_STATE_FLAGS")]
pub static ACTIVE_CONNECTION_STATE_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_STATE_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_TYPE")]
pub static ACTIVE_CONNECTION_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_TYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_UUID")]
pub static ACTIVE_CONNECTION_UUID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_UUID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ACTIVE_CONNECTION_VPN")]
pub static ACTIVE_CONNECTION_VPN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_VPN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CHECKPOINT_CREATED")]
pub static CHECKPOINT_CREATED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CHECKPOINT_CREATED).to_str().unwrap()
    });
#[doc(alias = "NM_CHECKPOINT_DEVICES")]
pub static CHECKPOINT_DEVICES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CHECKPOINT_DEVICES).to_str().unwrap()
    });
#[doc(alias = "NM_CHECKPOINT_ROLLBACK_TIMEOUT")]
pub static CHECKPOINT_ROLLBACK_TIMEOUT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CHECKPOINT_ROLLBACK_TIMEOUT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_ACTIVATING_CONNECTION")]
pub static CLIENT_ACTIVATING_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ACTIVATING_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_ACTIVE_CONNECTIONS")]
pub static CLIENT_ACTIVE_CONNECTIONS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ACTIVE_CONNECTIONS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_ACTIVE_CONNECTION_ADDED")]
pub static CLIENT_ACTIVE_CONNECTION_ADDED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ACTIVE_CONNECTION_ADDED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_ACTIVE_CONNECTION_REMOVED")]
pub static CLIENT_ACTIVE_CONNECTION_REMOVED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ACTIVE_CONNECTION_REMOVED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_ALL_DEVICES")]
pub static CLIENT_ALL_DEVICES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ALL_DEVICES).to_str().unwrap()
    });
#[doc(alias = "NM_CLIENT_ANY_DEVICE_ADDED")]
pub static CLIENT_ANY_DEVICE_ADDED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ANY_DEVICE_ADDED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_ANY_DEVICE_REMOVED")]
pub static CLIENT_ANY_DEVICE_REMOVED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ANY_DEVICE_REMOVED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_CAN_MODIFY")]
pub static CLIENT_CAN_MODIFY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CAN_MODIFY).to_str().unwrap()
    });
#[doc(alias = "NM_CLIENT_CAPABILITIES")]
pub static CLIENT_CAPABILITIES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CAPABILITIES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_CHECKPOINTS")]
pub static CLIENT_CHECKPOINTS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CHECKPOINTS).to_str().unwrap()
    });
#[doc(alias = "NM_CLIENT_CONNECTIONS")]
pub static CLIENT_CONNECTIONS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CONNECTIONS).to_str().unwrap()
    });
#[doc(alias = "NM_CLIENT_CONNECTION_ADDED")]
pub static CLIENT_CONNECTION_ADDED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CONNECTION_ADDED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_CONNECTION_REMOVED")]
pub static CLIENT_CONNECTION_REMOVED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CONNECTION_REMOVED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_CONNECTIVITY")]
pub static CLIENT_CONNECTIVITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CONNECTIVITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_CONNECTIVITY_CHECK_AVAILABLE")]
pub static CLIENT_CONNECTIVITY_CHECK_AVAILABLE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CONNECTIVITY_CHECK_AVAILABLE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_CONNECTIVITY_CHECK_ENABLED")]
pub static CLIENT_CONNECTIVITY_CHECK_ENABLED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CONNECTIVITY_CHECK_ENABLED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_CONNECTIVITY_CHECK_URI")]
pub static CLIENT_CONNECTIVITY_CHECK_URI: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CONNECTIVITY_CHECK_URI)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_DBUS_CONNECTION")]
pub static CLIENT_DBUS_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_DBUS_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_DBUS_NAME_OWNER")]
pub static CLIENT_DBUS_NAME_OWNER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_DBUS_NAME_OWNER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_DEVICES")]
pub static CLIENT_DEVICES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_DEVICES).to_str().unwrap()
    });
#[doc(alias = "NM_CLIENT_DEVICE_ADDED")]
pub static CLIENT_DEVICE_ADDED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_DEVICE_ADDED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_DEVICE_REMOVED")]
pub static CLIENT_DEVICE_REMOVED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_DEVICE_REMOVED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_DNS_CONFIGURATION")]
pub static CLIENT_DNS_CONFIGURATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_DNS_CONFIGURATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_DNS_MODE")]
pub static CLIENT_DNS_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_DNS_MODE).to_str().unwrap()
    });
#[doc(alias = "NM_CLIENT_DNS_RC_MANAGER")]
pub static CLIENT_DNS_RC_MANAGER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_DNS_RC_MANAGER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_HOSTNAME")]
pub static CLIENT_HOSTNAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_HOSTNAME).to_str().unwrap()
    });
#[doc(alias = "NM_CLIENT_INSTANCE_FLAGS")]
pub static CLIENT_INSTANCE_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_INSTANCE_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_METERED")]
pub static CLIENT_METERED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_METERED).to_str().unwrap()
    });
#[doc(alias = "NM_CLIENT_NETWORKING_ENABLED")]
pub static CLIENT_NETWORKING_ENABLED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_NETWORKING_ENABLED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_NM_RUNNING")]
pub static CLIENT_NM_RUNNING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_NM_RUNNING).to_str().unwrap()
    });
#[doc(alias = "NM_CLIENT_PERMISSIONS_STATE")]
pub static CLIENT_PERMISSIONS_STATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_PERMISSIONS_STATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_PERMISSION_CHANGED")]
pub static CLIENT_PERMISSION_CHANGED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_PERMISSION_CHANGED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_PRIMARY_CONNECTION")]
pub static CLIENT_PRIMARY_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_PRIMARY_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_STARTUP")]
pub static CLIENT_STARTUP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_STARTUP).to_str().unwrap()
    });
#[doc(alias = "NM_CLIENT_STATE")]
pub static CLIENT_STATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_STATE).to_str().unwrap()
    });
#[doc(alias = "NM_CLIENT_VERSION")]
pub static CLIENT_VERSION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_VERSION).to_str().unwrap()
    });
#[doc(alias = "NM_CLIENT_WIMAX_ENABLED")]
pub static CLIENT_WIMAX_ENABLED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_WIMAX_ENABLED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_WIMAX_HARDWARE_ENABLED")]
pub static CLIENT_WIMAX_HARDWARE_ENABLED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_WIMAX_HARDWARE_ENABLED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_WIRELESS_ENABLED")]
pub static CLIENT_WIRELESS_ENABLED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_WIRELESS_ENABLED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_WIRELESS_HARDWARE_ENABLED")]
pub static CLIENT_WIRELESS_HARDWARE_ENABLED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_WIRELESS_HARDWARE_ENABLED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_WWAN_ENABLED")]
pub static CLIENT_WWAN_ENABLED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_WWAN_ENABLED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CLIENT_WWAN_HARDWARE_ENABLED")]
pub static CLIENT_WWAN_HARDWARE_ENABLED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_WWAN_HARDWARE_ENABLED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CONNECTION_CHANGED")]
pub static CONNECTION_CHANGED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CONNECTION_CHANGED).to_str().unwrap()
    });
#[doc(alias = "NM_CONNECTION_NORMALIZE_PARAM_IP6_CONFIG_METHOD")]
pub static CONNECTION_NORMALIZE_PARAM_IP6_CONFIG_METHOD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CONNECTION_NORMALIZE_PARAM_IP6_CONFIG_METHOD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CONNECTION_SECRETS_CLEARED")]
pub static CONNECTION_SECRETS_CLEARED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CONNECTION_SECRETS_CLEARED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_CONNECTION_SECRETS_UPDATED")]
pub static CONNECTION_SECRETS_UPDATED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_CONNECTION_SECRETS_UPDATED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_INTERFACE")]
pub static DBUS_INTERFACE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INTERFACE).to_str().unwrap()
    });
#[doc(alias = "NM_DBUS_INTERFACE_DNS_MANAGER")]
pub static DBUS_INTERFACE_DNS_MANAGER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INTERFACE_DNS_MANAGER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_INTERFACE_SETTINGS")]
pub static DBUS_INTERFACE_SETTINGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INTERFACE_SETTINGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_INTERFACE_SETTINGS_CONNECTION")]
pub static DBUS_INTERFACE_SETTINGS_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INTERFACE_SETTINGS_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_INTERFACE_SETTINGS_CONNECTION_SECRETS")]
pub static DBUS_INTERFACE_SETTINGS_CONNECTION_SECRETS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INTERFACE_SETTINGS_CONNECTION_SECRETS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_INTERFACE_VPN")]
pub static DBUS_INTERFACE_VPN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INTERFACE_VPN).to_str().unwrap()
    });
#[doc(alias = "NM_DBUS_INTERFACE_VPN_CONNECTION")]
pub static DBUS_INTERFACE_VPN_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INTERFACE_VPN_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_INVALID_VPN_CONNECTION")]
pub static DBUS_INVALID_VPN_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INVALID_VPN_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_NO_ACTIVE_VPN_CONNECTION")]
pub static DBUS_NO_ACTIVE_VPN_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_NO_ACTIVE_VPN_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_NO_VPN_CONNECTIONS")]
pub static DBUS_NO_VPN_CONNECTIONS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_NO_VPN_CONNECTIONS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_PATH")]
pub static DBUS_PATH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe { CStr::from_ptr(ffi::NM_DBUS_PATH).to_str().unwrap() });
#[doc(alias = "NM_DBUS_PATH_AGENT_MANAGER")]
pub static DBUS_PATH_AGENT_MANAGER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_PATH_AGENT_MANAGER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_PATH_DNS_MANAGER")]
pub static DBUS_PATH_DNS_MANAGER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_PATH_DNS_MANAGER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_PATH_SECRET_AGENT")]
pub static DBUS_PATH_SECRET_AGENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_PATH_SECRET_AGENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_PATH_SETTINGS")]
pub static DBUS_PATH_SETTINGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_PATH_SETTINGS).to_str().unwrap()
    });
#[doc(alias = "NM_DBUS_PATH_SETTINGS_CONNECTION")]
pub static DBUS_PATH_SETTINGS_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_PATH_SETTINGS_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_PATH_VPN")]
pub static DBUS_PATH_VPN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_PATH_VPN).to_str().unwrap()
    });
#[doc(alias = "NM_DBUS_PATH_VPN_CONNECTION")]
pub static DBUS_PATH_VPN_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_PATH_VPN_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_SERVICE")]
pub static DBUS_SERVICE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_SERVICE).to_str().unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_ALREADY_STARTED")]
pub static DBUS_VPN_ALREADY_STARTED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_ALREADY_STARTED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_ALREADY_STOPPED")]
pub static DBUS_VPN_ALREADY_STOPPED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_ALREADY_STOPPED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_BAD_ARGUMENTS")]
pub static DBUS_VPN_BAD_ARGUMENTS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_BAD_ARGUMENTS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_ERROR_PREFIX")]
pub static DBUS_VPN_ERROR_PREFIX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_ERROR_PREFIX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_INTERACTIVE_NOT_SUPPORTED")]
pub static DBUS_VPN_INTERACTIVE_NOT_SUPPORTED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_INTERACTIVE_NOT_SUPPORTED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_SIGNAL_CONNECT_FAILED")]
pub static DBUS_VPN_SIGNAL_CONNECT_FAILED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_CONNECT_FAILED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_SIGNAL_IP4_CONFIG")]
pub static DBUS_VPN_SIGNAL_IP4_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_IP4_CONFIG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_SIGNAL_IP_CONFIG_BAD")]
pub static DBUS_VPN_SIGNAL_IP_CONFIG_BAD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_IP_CONFIG_BAD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_SIGNAL_LAUNCH_FAILED")]
pub static DBUS_VPN_SIGNAL_LAUNCH_FAILED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_LAUNCH_FAILED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_SIGNAL_LOGIN_BANNER")]
pub static DBUS_VPN_SIGNAL_LOGIN_BANNER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_LOGIN_BANNER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_SIGNAL_LOGIN_FAILED")]
pub static DBUS_VPN_SIGNAL_LOGIN_FAILED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_LOGIN_FAILED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_SIGNAL_STATE_CHANGE")]
pub static DBUS_VPN_SIGNAL_STATE_CHANGE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_STATE_CHANGE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_SIGNAL_VPN_CONFIG_BAD")]
pub static DBUS_VPN_SIGNAL_VPN_CONFIG_BAD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_VPN_CONFIG_BAD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_STARTING_IN_PROGRESS")]
pub static DBUS_VPN_STARTING_IN_PROGRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_STARTING_IN_PROGRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_STOPPING_IN_PROGRESS")]
pub static DBUS_VPN_STOPPING_IN_PROGRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_STOPPING_IN_PROGRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DBUS_VPN_WRONG_STATE")]
pub static DBUS_VPN_WRONG_STATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_WRONG_STATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_6LOWPAN_HW_ADDRESS")]
pub static DEVICE_6LOWPAN_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_6LOWPAN_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_6LOWPAN_PARENT")]
pub static DEVICE_6LOWPAN_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_6LOWPAN_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_ACTIVE_CONNECTION")]
pub static DEVICE_ACTIVE_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ACTIVE_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_ADSL_CARRIER")]
pub static DEVICE_ADSL_CARRIER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ADSL_CARRIER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_AUTOCONNECT")]
pub static DEVICE_AUTOCONNECT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_AUTOCONNECT).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_AVAILABLE_CONNECTIONS")]
pub static DEVICE_AVAILABLE_CONNECTIONS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_AVAILABLE_CONNECTIONS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_BOND_CARRIER")]
pub static DEVICE_BOND_CARRIER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BOND_CARRIER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_BOND_HW_ADDRESS")]
pub static DEVICE_BOND_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BOND_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_BOND_SLAVES")]
pub static DEVICE_BOND_SLAVES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BOND_SLAVES).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_BRIDGE_CARRIER")]
pub static DEVICE_BRIDGE_CARRIER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BRIDGE_CARRIER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_BRIDGE_HW_ADDRESS")]
pub static DEVICE_BRIDGE_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BRIDGE_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_BRIDGE_SLAVES")]
pub static DEVICE_BRIDGE_SLAVES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BRIDGE_SLAVES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_BT_CAPABILITIES")]
pub static DEVICE_BT_CAPABILITIES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BT_CAPABILITIES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_BT_HW_ADDRESS")]
pub static DEVICE_BT_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BT_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_BT_NAME")]
pub static DEVICE_BT_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BT_NAME).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_CAPABILITIES")]
pub static DEVICE_CAPABILITIES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_CAPABILITIES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_DEVICE_TYPE")]
pub static DEVICE_DEVICE_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_DEVICE_TYPE).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_DHCP4_CONFIG")]
pub static DEVICE_DHCP4_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_DHCP4_CONFIG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_DHCP6_CONFIG")]
pub static DEVICE_DHCP6_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_DHCP6_CONFIG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_DRIVER")]
pub static DEVICE_DRIVER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_DRIVER).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_DRIVER_VERSION")]
pub static DEVICE_DRIVER_VERSION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_DRIVER_VERSION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_DUMMY_HW_ADDRESS")]
pub static DEVICE_DUMMY_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_DUMMY_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_ETHERNET_CARRIER")]
pub static DEVICE_ETHERNET_CARRIER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ETHERNET_CARRIER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_ETHERNET_HW_ADDRESS")]
pub static DEVICE_ETHERNET_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ETHERNET_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_ETHERNET_PERMANENT_HW_ADDRESS")]
pub static DEVICE_ETHERNET_PERMANENT_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ETHERNET_PERMANENT_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_ETHERNET_S390_SUBCHANNELS")]
pub static DEVICE_ETHERNET_S390_SUBCHANNELS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ETHERNET_S390_SUBCHANNELS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_ETHERNET_SPEED")]
pub static DEVICE_ETHERNET_SPEED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ETHERNET_SPEED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_FIRMWARE_MISSING")]
pub static DEVICE_FIRMWARE_MISSING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_FIRMWARE_MISSING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_FIRMWARE_VERSION")]
pub static DEVICE_FIRMWARE_VERSION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_FIRMWARE_VERSION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_GENERIC_HW_ADDRESS")]
pub static DEVICE_GENERIC_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_GENERIC_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_GENERIC_TYPE_DESCRIPTION")]
pub static DEVICE_GENERIC_TYPE_DESCRIPTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_GENERIC_TYPE_DESCRIPTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_HW_ADDRESS")]
pub static DEVICE_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_HW_ADDRESS).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_INFINIBAND_CARRIER")]
pub static DEVICE_INFINIBAND_CARRIER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_INFINIBAND_CARRIER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_INFINIBAND_HW_ADDRESS")]
pub static DEVICE_INFINIBAND_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_INFINIBAND_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_INTERFACE")]
pub static DEVICE_INTERFACE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_INTERFACE).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_INTERFACE_FLAGS")]
pub static DEVICE_INTERFACE_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_INTERFACE_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP4_CONFIG")]
pub static DEVICE_IP4_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP4_CONFIG).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_IP4_CONNECTIVITY")]
pub static DEVICE_IP4_CONNECTIVITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP4_CONNECTIVITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP6_CONFIG")]
pub static DEVICE_IP6_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP6_CONFIG).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_IP6_CONNECTIVITY")]
pub static DEVICE_IP6_CONNECTIVITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP6_CONNECTIVITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_INTERFACE")]
pub static DEVICE_IP_INTERFACE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_INTERFACE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_TUNNEL_ENCAPSULATION_LIMIT")]
pub static DEVICE_IP_TUNNEL_ENCAPSULATION_LIMIT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_ENCAPSULATION_LIMIT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_TUNNEL_FLAGS")]
pub static DEVICE_IP_TUNNEL_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_TUNNEL_FLOW_LABEL")]
pub static DEVICE_IP_TUNNEL_FLOW_LABEL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_FLOW_LABEL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_TUNNEL_INPUT_KEY")]
pub static DEVICE_IP_TUNNEL_INPUT_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_INPUT_KEY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_TUNNEL_LOCAL")]
pub static DEVICE_IP_TUNNEL_LOCAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_LOCAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_TUNNEL_MODE")]
pub static DEVICE_IP_TUNNEL_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_TUNNEL_OUTPUT_KEY")]
pub static DEVICE_IP_TUNNEL_OUTPUT_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_OUTPUT_KEY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_TUNNEL_PARENT")]
pub static DEVICE_IP_TUNNEL_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_TUNNEL_PATH_MTU_DISCOVERY")]
pub static DEVICE_IP_TUNNEL_PATH_MTU_DISCOVERY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_PATH_MTU_DISCOVERY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_TUNNEL_REMOTE")]
pub static DEVICE_IP_TUNNEL_REMOTE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_REMOTE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_TUNNEL_TOS")]
pub static DEVICE_IP_TUNNEL_TOS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_TOS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_IP_TUNNEL_TTL")]
pub static DEVICE_IP_TUNNEL_TTL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_TTL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_LLDP_NEIGHBORS")]
pub static DEVICE_LLDP_NEIGHBORS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_LLDP_NEIGHBORS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_CIPHER_SUITE")]
pub static DEVICE_MACSEC_CIPHER_SUITE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_CIPHER_SUITE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_ENCODING_SA")]
pub static DEVICE_MACSEC_ENCODING_SA: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_ENCODING_SA)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_ENCRYPT")]
pub static DEVICE_MACSEC_ENCRYPT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_ENCRYPT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_ES")]
pub static DEVICE_MACSEC_ES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_ES).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_HW_ADDRESS")]
pub static DEVICE_MACSEC_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_ICV_LENGTH")]
pub static DEVICE_MACSEC_ICV_LENGTH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_ICV_LENGTH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_INCLUDE_SCI")]
pub static DEVICE_MACSEC_INCLUDE_SCI: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_INCLUDE_SCI)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_PARENT")]
pub static DEVICE_MACSEC_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_PROTECT")]
pub static DEVICE_MACSEC_PROTECT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_PROTECT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_REPLAY_PROTECT")]
pub static DEVICE_MACSEC_REPLAY_PROTECT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_REPLAY_PROTECT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_SCB")]
pub static DEVICE_MACSEC_SCB: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_SCB).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_SCI")]
pub static DEVICE_MACSEC_SCI: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_SCI).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_VALIDATION")]
pub static DEVICE_MACSEC_VALIDATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_VALIDATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACSEC_WINDOW")]
pub static DEVICE_MACSEC_WINDOW: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_WINDOW)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACVLAN_HW_ADDRESS")]
pub static DEVICE_MACVLAN_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACVLAN_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACVLAN_MODE")]
pub static DEVICE_MACVLAN_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACVLAN_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACVLAN_NO_PROMISC")]
pub static DEVICE_MACVLAN_NO_PROMISC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACVLAN_NO_PROMISC)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACVLAN_PARENT")]
pub static DEVICE_MACVLAN_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACVLAN_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MACVLAN_TAP")]
pub static DEVICE_MACVLAN_TAP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACVLAN_TAP).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_MANAGED")]
pub static DEVICE_MANAGED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MANAGED).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_METERED")]
pub static DEVICE_METERED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_METERED).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_MODEM_APN")]
pub static DEVICE_MODEM_APN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MODEM_APN).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_MODEM_CURRENT_CAPABILITIES")]
pub static DEVICE_MODEM_CURRENT_CAPABILITIES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MODEM_CURRENT_CAPABILITIES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MODEM_DEVICE_ID")]
pub static DEVICE_MODEM_DEVICE_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MODEM_DEVICE_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MODEM_MODEM_CAPABILITIES")]
pub static DEVICE_MODEM_MODEM_CAPABILITIES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MODEM_MODEM_CAPABILITIES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MODEM_OPERATOR_CODE")]
pub static DEVICE_MODEM_OPERATOR_CODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MODEM_OPERATOR_CODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_MTU")]
pub static DEVICE_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe { CStr::from_ptr(ffi::NM_DEVICE_MTU).to_str().unwrap() });
#[doc(alias = "NM_DEVICE_NM_PLUGIN_MISSING")]
pub static DEVICE_NM_PLUGIN_MISSING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_NM_PLUGIN_MISSING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_OLPC_MESH_ACTIVE_CHANNEL")]
pub static DEVICE_OLPC_MESH_ACTIVE_CHANNEL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_OLPC_MESH_ACTIVE_CHANNEL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_OLPC_MESH_COMPANION")]
pub static DEVICE_OLPC_MESH_COMPANION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_OLPC_MESH_COMPANION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_OLPC_MESH_HW_ADDRESS")]
pub static DEVICE_OLPC_MESH_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_OLPC_MESH_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_OVS_BRIDGE_SLAVES")]
pub static DEVICE_OVS_BRIDGE_SLAVES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_OVS_BRIDGE_SLAVES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_OVS_PORT_SLAVES")]
pub static DEVICE_OVS_PORT_SLAVES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_OVS_PORT_SLAVES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_PATH")]
pub static DEVICE_PATH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe { CStr::from_ptr(ffi::NM_DEVICE_PATH).to_str().unwrap() });
#[doc(alias = "NM_DEVICE_PHYSICAL_PORT_ID")]
pub static DEVICE_PHYSICAL_PORT_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_PHYSICAL_PORT_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_PRODUCT")]
pub static DEVICE_PRODUCT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_PRODUCT).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_REAL")]
pub static DEVICE_REAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe { CStr::from_ptr(ffi::NM_DEVICE_REAL).to_str().unwrap() });
#[doc(alias = "NM_DEVICE_STATE")]
pub static DEVICE_STATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_STATE).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_STATE_REASON")]
pub static DEVICE_STATE_REASON: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_STATE_REASON)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_TEAM_CARRIER")]
pub static DEVICE_TEAM_CARRIER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TEAM_CARRIER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_TEAM_CONFIG")]
pub static DEVICE_TEAM_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TEAM_CONFIG).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_TEAM_HW_ADDRESS")]
pub static DEVICE_TEAM_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TEAM_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_TEAM_SLAVES")]
pub static DEVICE_TEAM_SLAVES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TEAM_SLAVES).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_TUN_GROUP")]
pub static DEVICE_TUN_GROUP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TUN_GROUP).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_TUN_HW_ADDRESS")]
pub static DEVICE_TUN_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TUN_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_TUN_MODE")]
pub static DEVICE_TUN_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TUN_MODE).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_TUN_MULTI_QUEUE")]
pub static DEVICE_TUN_MULTI_QUEUE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TUN_MULTI_QUEUE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_TUN_NO_PI")]
pub static DEVICE_TUN_NO_PI: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TUN_NO_PI).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_TUN_OWNER")]
pub static DEVICE_TUN_OWNER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TUN_OWNER).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_TUN_VNET_HDR")]
pub static DEVICE_TUN_VNET_HDR: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TUN_VNET_HDR)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_UDI")]
pub static DEVICE_UDI: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe { CStr::from_ptr(ffi::NM_DEVICE_UDI).to_str().unwrap() });
#[doc(alias = "NM_DEVICE_VENDOR")]
pub static DEVICE_VENDOR: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VENDOR).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_VETH_PEER")]
pub static DEVICE_VETH_PEER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VETH_PEER).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_VLAN_CARRIER")]
pub static DEVICE_VLAN_CARRIER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VLAN_CARRIER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VLAN_HW_ADDRESS")]
pub static DEVICE_VLAN_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VLAN_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VLAN_PARENT")]
pub static DEVICE_VLAN_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VLAN_PARENT).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_VLAN_VLAN_ID")]
pub static DEVICE_VLAN_VLAN_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VLAN_VLAN_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VRF_TABLE")]
pub static DEVICE_VRF_TABLE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VRF_TABLE).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_AGEING")]
pub static DEVICE_VXLAN_AGEING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_AGEING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_CARRIER")]
pub static DEVICE_VXLAN_CARRIER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_CARRIER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_DST_PORT")]
pub static DEVICE_VXLAN_DST_PORT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_DST_PORT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_GROUP")]
pub static DEVICE_VXLAN_GROUP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_GROUP).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_HW_ADDRESS")]
pub static DEVICE_VXLAN_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_ID")]
pub static DEVICE_VXLAN_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_ID).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_L2MISS")]
pub static DEVICE_VXLAN_L2MISS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_L2MISS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_L3MISS")]
pub static DEVICE_VXLAN_L3MISS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_L3MISS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_LEARNING")]
pub static DEVICE_VXLAN_LEARNING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_LEARNING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_LIMIT")]
pub static DEVICE_VXLAN_LIMIT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_LIMIT).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_LOCAL")]
pub static DEVICE_VXLAN_LOCAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_LOCAL).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_PARENT")]
pub static DEVICE_VXLAN_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_PROXY")]
pub static DEVICE_VXLAN_PROXY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_PROXY).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_RSC")]
pub static DEVICE_VXLAN_RSC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_RSC).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_SRC_PORT_MAX")]
pub static DEVICE_VXLAN_SRC_PORT_MAX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_SRC_PORT_MAX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_SRC_PORT_MIN")]
pub static DEVICE_VXLAN_SRC_PORT_MIN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_SRC_PORT_MIN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_TOS")]
pub static DEVICE_VXLAN_TOS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_TOS).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_VXLAN_TTL")]
pub static DEVICE_VXLAN_TTL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_TTL).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_WIFI_ACCESS_POINTS")]
pub static DEVICE_WIFI_ACCESS_POINTS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_ACCESS_POINTS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIFI_ACTIVE_ACCESS_POINT")]
pub static DEVICE_WIFI_ACTIVE_ACCESS_POINT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_ACTIVE_ACCESS_POINT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIFI_BITRATE")]
pub static DEVICE_WIFI_BITRATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_BITRATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIFI_CAPABILITIES")]
pub static DEVICE_WIFI_CAPABILITIES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_CAPABILITIES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIFI_HW_ADDRESS")]
pub static DEVICE_WIFI_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIFI_LAST_SCAN")]
pub static DEVICE_WIFI_LAST_SCAN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_LAST_SCAN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIFI_MODE")]
pub static DEVICE_WIFI_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_MODE).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_WIFI_P2P_HW_ADDRESS")]
pub static DEVICE_WIFI_P2P_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_P2P_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIFI_P2P_PEERS")]
pub static DEVICE_WIFI_P2P_PEERS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_P2P_PEERS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIFI_P2P_WFDIES")]
pub static DEVICE_WIFI_P2P_WFDIES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_P2P_WFDIES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIFI_PERMANENT_HW_ADDRESS")]
pub static DEVICE_WIFI_PERMANENT_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_PERMANENT_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIMAX_ACTIVE_NSP")]
pub static DEVICE_WIMAX_ACTIVE_NSP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIMAX_ACTIVE_NSP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIMAX_BSID")]
pub static DEVICE_WIMAX_BSID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIMAX_BSID).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_WIMAX_CENTER_FREQUENCY")]
pub static DEVICE_WIMAX_CENTER_FREQUENCY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIMAX_CENTER_FREQUENCY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIMAX_CINR")]
pub static DEVICE_WIMAX_CINR: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIMAX_CINR).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_WIMAX_HW_ADDRESS")]
pub static DEVICE_WIMAX_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIMAX_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIMAX_NSPS")]
pub static DEVICE_WIMAX_NSPS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIMAX_NSPS).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_WIMAX_RSSI")]
pub static DEVICE_WIMAX_RSSI: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIMAX_RSSI).to_str().unwrap()
    });
#[doc(alias = "NM_DEVICE_WIMAX_TX_POWER")]
pub static DEVICE_WIMAX_TX_POWER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIMAX_TX_POWER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIREGUARD_FWMARK")]
pub static DEVICE_WIREGUARD_FWMARK: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIREGUARD_FWMARK)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIREGUARD_LISTEN_PORT")]
pub static DEVICE_WIREGUARD_LISTEN_PORT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIREGUARD_LISTEN_PORT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WIREGUARD_PUBLIC_KEY")]
pub static DEVICE_WIREGUARD_PUBLIC_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIREGUARD_PUBLIC_KEY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DEVICE_WPAN_HW_ADDRESS")]
pub static DEVICE_WPAN_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WPAN_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_DHCP_CONFIG_FAMILY")]
pub static DHCP_CONFIG_FAMILY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DHCP_CONFIG_FAMILY).to_str().unwrap()
    });
#[doc(alias = "NM_DHCP_CONFIG_OPTIONS")]
pub static DHCP_CONFIG_OPTIONS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_DHCP_CONFIG_OPTIONS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_ADAPTIVE_RX")]
pub static ETHTOOL_OPTNAME_COALESCE_ADAPTIVE_RX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_ADAPTIVE_RX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_ADAPTIVE_TX")]
pub static ETHTOOL_OPTNAME_COALESCE_ADAPTIVE_TX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_ADAPTIVE_TX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_PKT_RATE_HIGH")]
pub static ETHTOOL_OPTNAME_COALESCE_PKT_RATE_HIGH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_PKT_RATE_HIGH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_PKT_RATE_LOW")]
pub static ETHTOOL_OPTNAME_COALESCE_PKT_RATE_LOW: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_PKT_RATE_LOW)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_RX_FRAMES")]
pub static ETHTOOL_OPTNAME_COALESCE_RX_FRAMES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_RX_FRAMES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_HIGH")]
pub static ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_HIGH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_HIGH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_IRQ")]
pub static ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_IRQ: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_IRQ)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_LOW")]
pub static ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_LOW: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_LOW)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_RX_USECS")]
pub static ETHTOOL_OPTNAME_COALESCE_RX_USECS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_RX_USECS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_RX_USECS_HIGH")]
pub static ETHTOOL_OPTNAME_COALESCE_RX_USECS_HIGH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_RX_USECS_HIGH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_RX_USECS_IRQ")]
pub static ETHTOOL_OPTNAME_COALESCE_RX_USECS_IRQ: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_RX_USECS_IRQ)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_RX_USECS_LOW")]
pub static ETHTOOL_OPTNAME_COALESCE_RX_USECS_LOW: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_RX_USECS_LOW)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_SAMPLE_INTERVAL")]
pub static ETHTOOL_OPTNAME_COALESCE_SAMPLE_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_SAMPLE_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_STATS_BLOCK_USECS")]
pub static ETHTOOL_OPTNAME_COALESCE_STATS_BLOCK_USECS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_STATS_BLOCK_USECS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_TX_FRAMES")]
pub static ETHTOOL_OPTNAME_COALESCE_TX_FRAMES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_TX_FRAMES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_HIGH")]
pub static ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_HIGH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_HIGH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_IRQ")]
pub static ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_IRQ: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_IRQ)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_LOW")]
pub static ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_LOW: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_LOW)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_TX_USECS")]
pub static ETHTOOL_OPTNAME_COALESCE_TX_USECS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_TX_USECS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_TX_USECS_HIGH")]
pub static ETHTOOL_OPTNAME_COALESCE_TX_USECS_HIGH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_TX_USECS_HIGH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_TX_USECS_IRQ")]
pub static ETHTOOL_OPTNAME_COALESCE_TX_USECS_IRQ: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_TX_USECS_IRQ)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_COALESCE_TX_USECS_LOW")]
pub static ETHTOOL_OPTNAME_COALESCE_TX_USECS_LOW: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_COALESCE_TX_USECS_LOW)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_ESP_HW_OFFLOAD")]
pub static ETHTOOL_OPTNAME_FEATURE_ESP_HW_OFFLOAD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_ESP_HW_OFFLOAD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_ESP_TX_CSUM_HW_OFFLOAD")]
pub static ETHTOOL_OPTNAME_FEATURE_ESP_TX_CSUM_HW_OFFLOAD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_ESP_TX_CSUM_HW_OFFLOAD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_FCOE_MTU")]
pub static ETHTOOL_OPTNAME_FEATURE_FCOE_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_FCOE_MTU)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_GRO")]
pub static ETHTOOL_OPTNAME_FEATURE_GRO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_GRO)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_GSO")]
pub static ETHTOOL_OPTNAME_FEATURE_GSO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_GSO)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_HIGHDMA")]
pub static ETHTOOL_OPTNAME_FEATURE_HIGHDMA: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_HIGHDMA)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_HW_TC_OFFLOAD")]
pub static ETHTOOL_OPTNAME_FEATURE_HW_TC_OFFLOAD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_HW_TC_OFFLOAD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_L2_FWD_OFFLOAD")]
pub static ETHTOOL_OPTNAME_FEATURE_L2_FWD_OFFLOAD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_L2_FWD_OFFLOAD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_LOOPBACK")]
pub static ETHTOOL_OPTNAME_FEATURE_LOOPBACK: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_LOOPBACK)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_LRO")]
pub static ETHTOOL_OPTNAME_FEATURE_LRO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_LRO)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_MACSEC_HW_OFFLOAD")]
pub static ETHTOOL_OPTNAME_FEATURE_MACSEC_HW_OFFLOAD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_MACSEC_HW_OFFLOAD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_NTUPLE")]
pub static ETHTOOL_OPTNAME_FEATURE_NTUPLE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_NTUPLE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_RX")]
pub static ETHTOOL_OPTNAME_FEATURE_RX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_RX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_RXHASH")]
pub static ETHTOOL_OPTNAME_FEATURE_RXHASH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_RXHASH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_RXVLAN")]
pub static ETHTOOL_OPTNAME_FEATURE_RXVLAN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_RXVLAN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_RX_ALL")]
pub static ETHTOOL_OPTNAME_FEATURE_RX_ALL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_RX_ALL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_RX_FCS")]
pub static ETHTOOL_OPTNAME_FEATURE_RX_FCS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_RX_FCS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_RX_GRO_HW")]
pub static ETHTOOL_OPTNAME_FEATURE_RX_GRO_HW: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_RX_GRO_HW)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_RX_GRO_LIST")]
pub static ETHTOOL_OPTNAME_FEATURE_RX_GRO_LIST: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_RX_GRO_LIST)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_RX_UDP_GRO_FORWARDING")]
pub static ETHTOOL_OPTNAME_FEATURE_RX_UDP_GRO_FORWARDING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_RX_UDP_GRO_FORWARDING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_RX_UDP_TUNNEL_PORT_OFFLOAD")]
pub static ETHTOOL_OPTNAME_FEATURE_RX_UDP_TUNNEL_PORT_OFFLOAD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_RX_UDP_TUNNEL_PORT_OFFLOAD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_RX_VLAN_FILTER")]
pub static ETHTOOL_OPTNAME_FEATURE_RX_VLAN_FILTER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_RX_VLAN_FILTER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_FILTER")]
pub static ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_FILTER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_FILTER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_HW_PARSE")]
pub static ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_HW_PARSE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_HW_PARSE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_SG")]
pub static ETHTOOL_OPTNAME_FEATURE_SG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_SG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TLS_HW_RECORD")]
pub static ETHTOOL_OPTNAME_FEATURE_TLS_HW_RECORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TLS_HW_RECORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TLS_HW_RX_OFFLOAD")]
pub static ETHTOOL_OPTNAME_FEATURE_TLS_HW_RX_OFFLOAD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TLS_HW_RX_OFFLOAD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TLS_HW_TX_OFFLOAD")]
pub static ETHTOOL_OPTNAME_FEATURE_TLS_HW_TX_OFFLOAD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TLS_HW_TX_OFFLOAD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TSO")]
pub static ETHTOOL_OPTNAME_FEATURE_TSO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TSO)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX")]
pub static ETHTOOL_OPTNAME_FEATURE_TX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TXVLAN")]
pub static ETHTOOL_OPTNAME_FEATURE_TXVLAN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TXVLAN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_FCOE_CRC")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_FCOE_CRC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_FCOE_CRC)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV4")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV4: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV4)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV6")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV6: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV6)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IP_GENERIC")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IP_GENERIC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IP_GENERIC)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_SCTP")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_SCTP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_SCTP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_ESP_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_ESP_SEGMENTATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_ESP_SEGMENTATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_FCOE_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_FCOE_SEGMENTATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_FCOE_SEGMENTATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_GRE_CSUM_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_GRE_CSUM_SEGMENTATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_GRE_CSUM_SEGMENTATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_GRE_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_GRE_SEGMENTATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_GRE_SEGMENTATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_GSO_LIST")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_GSO_LIST: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_GSO_LIST)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_GSO_PARTIAL")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_GSO_PARTIAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_GSO_PARTIAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_GSO_ROBUST")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_GSO_ROBUST: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_GSO_ROBUST)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_IPXIP4_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_IPXIP4_SEGMENTATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_IPXIP4_SEGMENTATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_IPXIP6_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_IPXIP6_SEGMENTATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_IPXIP6_SEGMENTATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_NOCACHE_COPY")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_NOCACHE_COPY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_NOCACHE_COPY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER_FRAGLIST")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER_FRAGLIST: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER_FRAGLIST)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_SCTP_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_SCTP_SEGMENTATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_SCTP_SEGMENTATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_TCP6_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_TCP6_SEGMENTATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_TCP6_SEGMENTATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_TCP_ECN_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_TCP_ECN_SEGMENTATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_TCP_ECN_SEGMENTATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_TCP_MANGLEID_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_TCP_MANGLEID_SEGMENTATION: once_cell::sync::Lazy<
    &'static str,
> = once_cell::sync::Lazy::new(|| unsafe {
    CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_TCP_MANGLEID_SEGMENTATION)
        .to_str()
        .unwrap()
});
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_TCP_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_TCP_SEGMENTATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_TCP_SEGMENTATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_TUNNEL_REMCSUM_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_TUNNEL_REMCSUM_SEGMENTATION: once_cell::sync::Lazy<
    &'static str,
> = once_cell::sync::Lazy::new(|| unsafe {
    CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_TUNNEL_REMCSUM_SEGMENTATION)
        .to_str()
        .unwrap()
});
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_UDP_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_UDP_SEGMENTATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_UDP_SEGMENTATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_CSUM_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_CSUM_SEGMENTATION: once_cell::sync::Lazy<
    &'static str,
> = once_cell::sync::Lazy::new(|| unsafe {
    CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_CSUM_SEGMENTATION)
        .to_str()
        .unwrap()
});
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_SEGMENTATION")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_SEGMENTATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_SEGMENTATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_FEATURE_TX_VLAN_STAG_HW_INSERT")]
pub static ETHTOOL_OPTNAME_FEATURE_TX_VLAN_STAG_HW_INSERT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_FEATURE_TX_VLAN_STAG_HW_INSERT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_PAUSE_AUTONEG")]
pub static ETHTOOL_OPTNAME_PAUSE_AUTONEG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_PAUSE_AUTONEG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_PAUSE_RX")]
pub static ETHTOOL_OPTNAME_PAUSE_RX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_PAUSE_RX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_PAUSE_TX")]
pub static ETHTOOL_OPTNAME_PAUSE_TX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_PAUSE_TX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_RING_RX")]
pub static ETHTOOL_OPTNAME_RING_RX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_RING_RX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_RING_RX_JUMBO")]
pub static ETHTOOL_OPTNAME_RING_RX_JUMBO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_RING_RX_JUMBO)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_RING_RX_MINI")]
pub static ETHTOOL_OPTNAME_RING_RX_MINI: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_RING_RX_MINI)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_ETHTOOL_OPTNAME_RING_TX")]
pub static ETHTOOL_OPTNAME_RING_TX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_ETHTOOL_OPTNAME_RING_TX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ADDRESS_ATTRIBUTE_LABEL")]
pub static IP_ADDRESS_ATTRIBUTE_LABEL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ADDRESS_ATTRIBUTE_LABEL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_CONFIG_ADDRESSES")]
pub static IP_CONFIG_ADDRESSES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_CONFIG_ADDRESSES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_CONFIG_DOMAINS")]
pub static IP_CONFIG_DOMAINS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_CONFIG_DOMAINS).to_str().unwrap()
    });
#[doc(alias = "NM_IP_CONFIG_FAMILY")]
pub static IP_CONFIG_FAMILY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_CONFIG_FAMILY).to_str().unwrap()
    });
#[doc(alias = "NM_IP_CONFIG_GATEWAY")]
pub static IP_CONFIG_GATEWAY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_CONFIG_GATEWAY).to_str().unwrap()
    });
#[doc(alias = "NM_IP_CONFIG_NAMESERVERS")]
pub static IP_CONFIG_NAMESERVERS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_CONFIG_NAMESERVERS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_CONFIG_ROUTES")]
pub static IP_CONFIG_ROUTES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_CONFIG_ROUTES).to_str().unwrap()
    });
#[doc(alias = "NM_IP_CONFIG_SEARCHES")]
pub static IP_CONFIG_SEARCHES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_CONFIG_SEARCHES).to_str().unwrap()
    });
#[doc(alias = "NM_IP_CONFIG_WINS_SERVERS")]
pub static IP_CONFIG_WINS_SERVERS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_CONFIG_WINS_SERVERS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_CWND")]
pub static IP_ROUTE_ATTRIBUTE_CWND: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_CWND)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_FROM")]
pub static IP_ROUTE_ATTRIBUTE_FROM: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_FROM)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_INITCWND")]
pub static IP_ROUTE_ATTRIBUTE_INITCWND: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_INITCWND)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_INITRWND")]
pub static IP_ROUTE_ATTRIBUTE_INITRWND: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_INITRWND)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_LOCK_CWND")]
pub static IP_ROUTE_ATTRIBUTE_LOCK_CWND: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_LOCK_CWND)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_LOCK_INITCWND")]
pub static IP_ROUTE_ATTRIBUTE_LOCK_INITCWND: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_LOCK_INITCWND)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_LOCK_INITRWND")]
pub static IP_ROUTE_ATTRIBUTE_LOCK_INITRWND: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_LOCK_INITRWND)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_LOCK_MTU")]
pub static IP_ROUTE_ATTRIBUTE_LOCK_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_LOCK_MTU)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_LOCK_WINDOW")]
pub static IP_ROUTE_ATTRIBUTE_LOCK_WINDOW: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_LOCK_WINDOW)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_MTU")]
pub static IP_ROUTE_ATTRIBUTE_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_MTU)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_ONLINK")]
pub static IP_ROUTE_ATTRIBUTE_ONLINK: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_ONLINK)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_SCOPE")]
pub static IP_ROUTE_ATTRIBUTE_SCOPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_SCOPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_SRC")]
pub static IP_ROUTE_ATTRIBUTE_SRC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_SRC)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_TABLE")]
pub static IP_ROUTE_ATTRIBUTE_TABLE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_TABLE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_TOS")]
pub static IP_ROUTE_ATTRIBUTE_TOS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_TOS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_TYPE")]
pub static IP_ROUTE_ATTRIBUTE_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_TYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_IP_ROUTE_ATTRIBUTE_WINDOW")]
pub static IP_ROUTE_ATTRIBUTE_WINDOW: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_WINDOW)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_CHASSIS_ID")]
pub static LLDP_ATTR_CHASSIS_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_CHASSIS_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_CHASSIS_ID_TYPE")]
pub static LLDP_ATTR_CHASSIS_ID_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_CHASSIS_ID_TYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_DESTINATION")]
pub static LLDP_ATTR_DESTINATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_DESTINATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_IEEE_802_1_PPVID")]
pub static LLDP_ATTR_IEEE_802_1_PPVID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_1_PPVID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_IEEE_802_1_PPVIDS")]
pub static LLDP_ATTR_IEEE_802_1_PPVIDS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_1_PPVIDS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_IEEE_802_1_PPVID_FLAGS")]
pub static LLDP_ATTR_IEEE_802_1_PPVID_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_1_PPVID_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_IEEE_802_1_PVID")]
pub static LLDP_ATTR_IEEE_802_1_PVID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_1_PVID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_IEEE_802_1_VID")]
pub static LLDP_ATTR_IEEE_802_1_VID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_1_VID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_IEEE_802_1_VLANS")]
pub static LLDP_ATTR_IEEE_802_1_VLANS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_1_VLANS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_IEEE_802_1_VLAN_NAME")]
pub static LLDP_ATTR_IEEE_802_1_VLAN_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_1_VLAN_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_IEEE_802_3_MAC_PHY_CONF")]
pub static LLDP_ATTR_IEEE_802_3_MAC_PHY_CONF: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_3_MAC_PHY_CONF)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_IEEE_802_3_MAX_FRAME_SIZE")]
pub static LLDP_ATTR_IEEE_802_3_MAX_FRAME_SIZE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_3_MAX_FRAME_SIZE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_IEEE_802_3_POWER_VIA_MDI")]
pub static LLDP_ATTR_IEEE_802_3_POWER_VIA_MDI: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_3_POWER_VIA_MDI)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_MANAGEMENT_ADDRESSES")]
pub static LLDP_ATTR_MANAGEMENT_ADDRESSES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_MANAGEMENT_ADDRESSES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_MUD_URL")]
pub static LLDP_ATTR_MUD_URL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_MUD_URL).to_str().unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_PORT_DESCRIPTION")]
pub static LLDP_ATTR_PORT_DESCRIPTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_PORT_DESCRIPTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_PORT_ID")]
pub static LLDP_ATTR_PORT_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_PORT_ID).to_str().unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_PORT_ID_TYPE")]
pub static LLDP_ATTR_PORT_ID_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_PORT_ID_TYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_RAW")]
pub static LLDP_ATTR_RAW: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_RAW).to_str().unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_SYSTEM_CAPABILITIES")]
pub static LLDP_ATTR_SYSTEM_CAPABILITIES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_SYSTEM_CAPABILITIES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_SYSTEM_DESCRIPTION")]
pub static LLDP_ATTR_SYSTEM_DESCRIPTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_SYSTEM_DESCRIPTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_ATTR_SYSTEM_NAME")]
pub static LLDP_ATTR_SYSTEM_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_SYSTEM_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_DEST_NEAREST_BRIDGE")]
pub static LLDP_DEST_NEAREST_BRIDGE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_DEST_NEAREST_BRIDGE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_DEST_NEAREST_CUSTOMER_BRIDGE")]
pub static LLDP_DEST_NEAREST_CUSTOMER_BRIDGE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_DEST_NEAREST_CUSTOMER_BRIDGE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_LLDP_DEST_NEAREST_NON_TPMR_BRIDGE")]
pub static LLDP_DEST_NEAREST_NON_TPMR_BRIDGE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_LLDP_DEST_NEAREST_NON_TPMR_BRIDGE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_OBJECT_PATH")]
pub static OBJECT_PATH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe { CStr::from_ptr(ffi::NM_OBJECT_PATH).to_str().unwrap() });
#[doc(alias = "NM_REMOTE_CONNECTION_DBUS_CONNECTION")]
pub static REMOTE_CONNECTION_DBUS_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_REMOTE_CONNECTION_DBUS_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_REMOTE_CONNECTION_FILENAME")]
pub static REMOTE_CONNECTION_FILENAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_REMOTE_CONNECTION_FILENAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_REMOTE_CONNECTION_FLAGS")]
pub static REMOTE_CONNECTION_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_REMOTE_CONNECTION_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_REMOTE_CONNECTION_PATH")]
pub static REMOTE_CONNECTION_PATH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_REMOTE_CONNECTION_PATH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_REMOTE_CONNECTION_UNSAVED")]
pub static REMOTE_CONNECTION_UNSAVED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_REMOTE_CONNECTION_UNSAVED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_REMOTE_CONNECTION_VISIBLE")]
pub static REMOTE_CONNECTION_VISIBLE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_REMOTE_CONNECTION_VISIBLE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SECRET_AGENT_OLD_AUTO_REGISTER")]
pub static SECRET_AGENT_OLD_AUTO_REGISTER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SECRET_AGENT_OLD_AUTO_REGISTER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SECRET_AGENT_OLD_CAPABILITIES")]
pub static SECRET_AGENT_OLD_CAPABILITIES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SECRET_AGENT_OLD_CAPABILITIES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SECRET_AGENT_OLD_DBUS_CONNECTION")]
pub static SECRET_AGENT_OLD_DBUS_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SECRET_AGENT_OLD_DBUS_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SECRET_AGENT_OLD_IDENTIFIER")]
pub static SECRET_AGENT_OLD_IDENTIFIER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SECRET_AGENT_OLD_IDENTIFIER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SECRET_AGENT_OLD_REGISTERED")]
pub static SECRET_AGENT_OLD_REGISTERED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SECRET_AGENT_OLD_REGISTERED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_6LOWPAN_PARENT")]
pub static SETTING_6LOWPAN_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_6LOWPAN_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_6LOWPAN_SETTING_NAME")]
pub static SETTING_6LOWPAN_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_6LOWPAN_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_ALTSUBJECT_MATCHES")]
pub static SETTING_802_1X_ALTSUBJECT_MATCHES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_ALTSUBJECT_MATCHES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_ANONYMOUS_IDENTITY")]
pub static SETTING_802_1X_ANONYMOUS_IDENTITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_ANONYMOUS_IDENTITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_AUTH_TIMEOUT")]
pub static SETTING_802_1X_AUTH_TIMEOUT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_AUTH_TIMEOUT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_CA_CERT")]
pub static SETTING_802_1X_CA_CERT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CA_CERT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_CA_CERT_PASSWORD")]
pub static SETTING_802_1X_CA_CERT_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CA_CERT_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_CA_CERT_PASSWORD_FLAGS")]
pub static SETTING_802_1X_CA_CERT_PASSWORD_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CA_CERT_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_CA_PATH")]
pub static SETTING_802_1X_CA_PATH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CA_PATH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_CERT_SCHEME_PREFIX_PATH")]
pub static SETTING_802_1X_CERT_SCHEME_PREFIX_PATH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CERT_SCHEME_PREFIX_PATH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_CERT_SCHEME_PREFIX_PKCS11")]
pub static SETTING_802_1X_CERT_SCHEME_PREFIX_PKCS11: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CERT_SCHEME_PREFIX_PKCS11)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_CLIENT_CERT")]
pub static SETTING_802_1X_CLIENT_CERT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CLIENT_CERT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_CLIENT_CERT_PASSWORD")]
pub static SETTING_802_1X_CLIENT_CERT_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CLIENT_CERT_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_CLIENT_CERT_PASSWORD_FLAGS")]
pub static SETTING_802_1X_CLIENT_CERT_PASSWORD_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CLIENT_CERT_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_DOMAIN_MATCH")]
pub static SETTING_802_1X_DOMAIN_MATCH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_DOMAIN_MATCH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_DOMAIN_SUFFIX_MATCH")]
pub static SETTING_802_1X_DOMAIN_SUFFIX_MATCH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_DOMAIN_SUFFIX_MATCH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_EAP")]
pub static SETTING_802_1X_EAP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_EAP).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_IDENTITY")]
pub static SETTING_802_1X_IDENTITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_IDENTITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_OPTIONAL")]
pub static SETTING_802_1X_OPTIONAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_OPTIONAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PAC_FILE")]
pub static SETTING_802_1X_PAC_FILE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PAC_FILE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PASSWORD")]
pub static SETTING_802_1X_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PASSWORD_FLAGS")]
pub static SETTING_802_1X_PASSWORD_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PASSWORD_RAW")]
pub static SETTING_802_1X_PASSWORD_RAW: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PASSWORD_RAW)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PASSWORD_RAW_FLAGS")]
pub static SETTING_802_1X_PASSWORD_RAW_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PASSWORD_RAW_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE1_AUTH_FLAGS")]
pub static SETTING_802_1X_PHASE1_AUTH_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE1_AUTH_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE1_FAST_PROVISIONING")]
pub static SETTING_802_1X_PHASE1_FAST_PROVISIONING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE1_FAST_PROVISIONING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE1_PEAPLABEL")]
pub static SETTING_802_1X_PHASE1_PEAPLABEL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE1_PEAPLABEL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE1_PEAPVER")]
pub static SETTING_802_1X_PHASE1_PEAPVER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE1_PEAPVER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_ALTSUBJECT_MATCHES")]
pub static SETTING_802_1X_PHASE2_ALTSUBJECT_MATCHES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_ALTSUBJECT_MATCHES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_AUTH")]
pub static SETTING_802_1X_PHASE2_AUTH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_AUTH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_AUTHEAP")]
pub static SETTING_802_1X_PHASE2_AUTHEAP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_AUTHEAP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_CA_CERT")]
pub static SETTING_802_1X_PHASE2_CA_CERT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CA_CERT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_CA_CERT_PASSWORD")]
pub static SETTING_802_1X_PHASE2_CA_CERT_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CA_CERT_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_CA_CERT_PASSWORD_FLAGS")]
pub static SETTING_802_1X_PHASE2_CA_CERT_PASSWORD_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CA_CERT_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_CA_PATH")]
pub static SETTING_802_1X_PHASE2_CA_PATH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CA_PATH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_CLIENT_CERT")]
pub static SETTING_802_1X_PHASE2_CLIENT_CERT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CLIENT_CERT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD")]
pub static SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD_FLAGS")]
pub static SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_DOMAIN_MATCH")]
pub static SETTING_802_1X_PHASE2_DOMAIN_MATCH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_DOMAIN_MATCH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_DOMAIN_SUFFIX_MATCH")]
pub static SETTING_802_1X_PHASE2_DOMAIN_SUFFIX_MATCH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_DOMAIN_SUFFIX_MATCH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_PRIVATE_KEY")]
pub static SETTING_802_1X_PHASE2_PRIVATE_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_PRIVATE_KEY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD")]
pub static SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD_FLAGS")]
pub static SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PHASE2_SUBJECT_MATCH")]
pub static SETTING_802_1X_PHASE2_SUBJECT_MATCH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_SUBJECT_MATCH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PIN")]
pub static SETTING_802_1X_PIN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PIN).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PIN_FLAGS")]
pub static SETTING_802_1X_PIN_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PIN_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PRIVATE_KEY")]
pub static SETTING_802_1X_PRIVATE_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PRIVATE_KEY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PRIVATE_KEY_PASSWORD")]
pub static SETTING_802_1X_PRIVATE_KEY_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PRIVATE_KEY_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_PRIVATE_KEY_PASSWORD_FLAGS")]
pub static SETTING_802_1X_PRIVATE_KEY_PASSWORD_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PRIVATE_KEY_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_SETTING_NAME")]
pub static SETTING_802_1X_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_SUBJECT_MATCH")]
pub static SETTING_802_1X_SUBJECT_MATCH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_SUBJECT_MATCH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_802_1X_SYSTEM_CA_CERTS")]
pub static SETTING_802_1X_SYSTEM_CA_CERTS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_SYSTEM_CA_CERTS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_ENCAPSULATION")]
pub static SETTING_ADSL_ENCAPSULATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_ENCAPSULATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_ENCAPSULATION_LLC")]
pub static SETTING_ADSL_ENCAPSULATION_LLC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_ENCAPSULATION_LLC)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_ENCAPSULATION_VCMUX")]
pub static SETTING_ADSL_ENCAPSULATION_VCMUX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_ENCAPSULATION_VCMUX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_PASSWORD")]
pub static SETTING_ADSL_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_PASSWORD_FLAGS")]
pub static SETTING_ADSL_PASSWORD_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_PROTOCOL")]
pub static SETTING_ADSL_PROTOCOL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_PROTOCOL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_PROTOCOL_IPOATM")]
pub static SETTING_ADSL_PROTOCOL_IPOATM: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_PROTOCOL_IPOATM)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_PROTOCOL_PPPOA")]
pub static SETTING_ADSL_PROTOCOL_PPPOA: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_PROTOCOL_PPPOA)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_PROTOCOL_PPPOE")]
pub static SETTING_ADSL_PROTOCOL_PPPOE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_PROTOCOL_PPPOE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_SETTING_NAME")]
pub static SETTING_ADSL_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_USERNAME")]
pub static SETTING_ADSL_USERNAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_USERNAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_VCI")]
pub static SETTING_ADSL_VCI: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_VCI).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_ADSL_VPI")]
pub static SETTING_ADSL_VPI: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_VPI).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_BLUETOOTH_BDADDR")]
pub static SETTING_BLUETOOTH_BDADDR: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BLUETOOTH_BDADDR)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BLUETOOTH_SETTING_NAME")]
pub static SETTING_BLUETOOTH_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BLUETOOTH_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BLUETOOTH_TYPE")]
pub static SETTING_BLUETOOTH_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BLUETOOTH_TYPE)
            .to_str()
            .unwrap()
    });
/// Connection type describing a connection to devices that support the Bluetooth
/// DUN profile.
#[doc(alias = "NM_SETTING_BLUETOOTH_TYPE_DUN")]
pub static SETTING_BLUETOOTH_TYPE_DUN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BLUETOOTH_TYPE_DUN)
            .to_str()
            .unwrap()
    });
/// Connection type describing a Bluetooth NAP (Network Access Point),
/// which accepts PANU clients.
#[doc(alias = "NM_SETTING_BLUETOOTH_TYPE_NAP")]
pub static SETTING_BLUETOOTH_TYPE_NAP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BLUETOOTH_TYPE_NAP)
            .to_str()
            .unwrap()
    });
/// Connection type describing PANU connection to a Bluetooth NAP (Network
/// Access Point).
#[doc(alias = "NM_SETTING_BLUETOOTH_TYPE_PANU")]
pub static SETTING_BLUETOOTH_TYPE_PANU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BLUETOOTH_TYPE_PANU)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTIONS")]
pub static SETTING_BOND_OPTIONS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTIONS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_ACTIVE_SLAVE")]
pub static SETTING_BOND_OPTION_ACTIVE_SLAVE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_ACTIVE_SLAVE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_AD_ACTOR_SYSTEM")]
pub static SETTING_BOND_OPTION_AD_ACTOR_SYSTEM: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_AD_ACTOR_SYSTEM)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_AD_ACTOR_SYS_PRIO")]
pub static SETTING_BOND_OPTION_AD_ACTOR_SYS_PRIO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_AD_ACTOR_SYS_PRIO)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_AD_SELECT")]
pub static SETTING_BOND_OPTION_AD_SELECT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_AD_SELECT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_AD_USER_PORT_KEY")]
pub static SETTING_BOND_OPTION_AD_USER_PORT_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_AD_USER_PORT_KEY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_ALL_SLAVES_ACTIVE")]
pub static SETTING_BOND_OPTION_ALL_SLAVES_ACTIVE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_ALL_SLAVES_ACTIVE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_ARP_ALL_TARGETS")]
pub static SETTING_BOND_OPTION_ARP_ALL_TARGETS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_ARP_ALL_TARGETS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_ARP_INTERVAL")]
pub static SETTING_BOND_OPTION_ARP_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_ARP_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_ARP_IP_TARGET")]
pub static SETTING_BOND_OPTION_ARP_IP_TARGET: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_ARP_IP_TARGET)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_ARP_VALIDATE")]
pub static SETTING_BOND_OPTION_ARP_VALIDATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_ARP_VALIDATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_DOWNDELAY")]
pub static SETTING_BOND_OPTION_DOWNDELAY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_DOWNDELAY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_FAIL_OVER_MAC")]
pub static SETTING_BOND_OPTION_FAIL_OVER_MAC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_FAIL_OVER_MAC)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_LACP_RATE")]
pub static SETTING_BOND_OPTION_LACP_RATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_LACP_RATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_LP_INTERVAL")]
pub static SETTING_BOND_OPTION_LP_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_LP_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_MIIMON")]
pub static SETTING_BOND_OPTION_MIIMON: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_MIIMON)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_MIN_LINKS")]
pub static SETTING_BOND_OPTION_MIN_LINKS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_MIN_LINKS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_MODE")]
pub static SETTING_BOND_OPTION_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_NUM_GRAT_ARP")]
pub static SETTING_BOND_OPTION_NUM_GRAT_ARP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_NUM_GRAT_ARP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_NUM_UNSOL_NA")]
pub static SETTING_BOND_OPTION_NUM_UNSOL_NA: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_NUM_UNSOL_NA)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_PACKETS_PER_SLAVE")]
pub static SETTING_BOND_OPTION_PACKETS_PER_SLAVE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_PACKETS_PER_SLAVE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_PEER_NOTIF_DELAY")]
pub static SETTING_BOND_OPTION_PEER_NOTIF_DELAY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_PEER_NOTIF_DELAY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_PRIMARY")]
pub static SETTING_BOND_OPTION_PRIMARY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_PRIMARY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_PRIMARY_RESELECT")]
pub static SETTING_BOND_OPTION_PRIMARY_RESELECT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_PRIMARY_RESELECT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_RESEND_IGMP")]
pub static SETTING_BOND_OPTION_RESEND_IGMP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_RESEND_IGMP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_TLB_DYNAMIC_LB")]
pub static SETTING_BOND_OPTION_TLB_DYNAMIC_LB: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_TLB_DYNAMIC_LB)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_UPDELAY")]
pub static SETTING_BOND_OPTION_UPDELAY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_UPDELAY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_USE_CARRIER")]
pub static SETTING_BOND_OPTION_USE_CARRIER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_USE_CARRIER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_OPTION_XMIT_HASH_POLICY")]
pub static SETTING_BOND_OPTION_XMIT_HASH_POLICY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_XMIT_HASH_POLICY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BOND_SETTING_NAME")]
pub static SETTING_BOND_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_AGEING_TIME")]
pub static SETTING_BRIDGE_AGEING_TIME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_AGEING_TIME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_FORWARD_DELAY")]
pub static SETTING_BRIDGE_FORWARD_DELAY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_FORWARD_DELAY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_GROUP_ADDRESS")]
pub static SETTING_BRIDGE_GROUP_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_GROUP_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_GROUP_FORWARD_MASK")]
pub static SETTING_BRIDGE_GROUP_FORWARD_MASK: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_GROUP_FORWARD_MASK)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_HELLO_TIME")]
pub static SETTING_BRIDGE_HELLO_TIME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_HELLO_TIME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MAC_ADDRESS")]
pub static SETTING_BRIDGE_MAC_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MAC_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MAX_AGE")]
pub static SETTING_BRIDGE_MAX_AGE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MAX_AGE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_HASH_MAX")]
pub static SETTING_BRIDGE_MULTICAST_HASH_MAX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_HASH_MAX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_LAST_MEMBER_COUNT")]
pub static SETTING_BRIDGE_MULTICAST_LAST_MEMBER_COUNT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_LAST_MEMBER_COUNT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_LAST_MEMBER_INTERVAL")]
pub static SETTING_BRIDGE_MULTICAST_LAST_MEMBER_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_LAST_MEMBER_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_MEMBERSHIP_INTERVAL")]
pub static SETTING_BRIDGE_MULTICAST_MEMBERSHIP_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_MEMBERSHIP_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_QUERIER")]
pub static SETTING_BRIDGE_MULTICAST_QUERIER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_QUERIER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_QUERIER_INTERVAL")]
pub static SETTING_BRIDGE_MULTICAST_QUERIER_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_QUERIER_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_QUERY_INTERVAL")]
pub static SETTING_BRIDGE_MULTICAST_QUERY_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_QUERY_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_QUERY_RESPONSE_INTERVAL")]
pub static SETTING_BRIDGE_MULTICAST_QUERY_RESPONSE_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_QUERY_RESPONSE_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_QUERY_USE_IFADDR")]
pub static SETTING_BRIDGE_MULTICAST_QUERY_USE_IFADDR: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_QUERY_USE_IFADDR)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_ROUTER")]
pub static SETTING_BRIDGE_MULTICAST_ROUTER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_ROUTER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_SNOOPING")]
pub static SETTING_BRIDGE_MULTICAST_SNOOPING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_SNOOPING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_STARTUP_QUERY_COUNT")]
pub static SETTING_BRIDGE_MULTICAST_STARTUP_QUERY_COUNT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_STARTUP_QUERY_COUNT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_MULTICAST_STARTUP_QUERY_INTERVAL")]
pub static SETTING_BRIDGE_MULTICAST_STARTUP_QUERY_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_STARTUP_QUERY_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_PORT_HAIRPIN_MODE")]
pub static SETTING_BRIDGE_PORT_HAIRPIN_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_PORT_HAIRPIN_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_PORT_PATH_COST")]
pub static SETTING_BRIDGE_PORT_PATH_COST: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_PORT_PATH_COST)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_PORT_PRIORITY")]
pub static SETTING_BRIDGE_PORT_PRIORITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_PORT_PRIORITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_PORT_SETTING_NAME")]
pub static SETTING_BRIDGE_PORT_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_PORT_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_PORT_VLANS")]
pub static SETTING_BRIDGE_PORT_VLANS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_PORT_VLANS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_PRIORITY")]
pub static SETTING_BRIDGE_PRIORITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_PRIORITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_SETTING_NAME")]
pub static SETTING_BRIDGE_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_STP")]
pub static SETTING_BRIDGE_STP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_STP).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_VLANS")]
pub static SETTING_BRIDGE_VLANS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_VLANS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_VLAN_DEFAULT_PVID")]
pub static SETTING_BRIDGE_VLAN_DEFAULT_PVID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_VLAN_DEFAULT_PVID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_VLAN_FILTERING")]
pub static SETTING_BRIDGE_VLAN_FILTERING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_VLAN_FILTERING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_VLAN_PROTOCOL")]
pub static SETTING_BRIDGE_VLAN_PROTOCOL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_VLAN_PROTOCOL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_BRIDGE_VLAN_STATS_ENABLED")]
pub static SETTING_BRIDGE_VLAN_STATS_ENABLED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_VLAN_STATS_ENABLED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CDMA_MTU")]
pub static SETTING_CDMA_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CDMA_MTU).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_CDMA_NUMBER")]
pub static SETTING_CDMA_NUMBER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CDMA_NUMBER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CDMA_PASSWORD")]
pub static SETTING_CDMA_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CDMA_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CDMA_PASSWORD_FLAGS")]
pub static SETTING_CDMA_PASSWORD_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CDMA_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CDMA_SETTING_NAME")]
pub static SETTING_CDMA_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CDMA_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CDMA_USERNAME")]
pub static SETTING_CDMA_USERNAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CDMA_USERNAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_AUTH_RETRIES")]
pub static SETTING_CONNECTION_AUTH_RETRIES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_AUTH_RETRIES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_AUTOCONNECT")]
pub static SETTING_CONNECTION_AUTOCONNECT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_AUTOCONNECT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_AUTOCONNECT_PRIORITY")]
pub static SETTING_CONNECTION_AUTOCONNECT_PRIORITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_AUTOCONNECT_PRIORITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_AUTOCONNECT_RETRIES")]
pub static SETTING_CONNECTION_AUTOCONNECT_RETRIES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_AUTOCONNECT_RETRIES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_AUTOCONNECT_SLAVES")]
pub static SETTING_CONNECTION_AUTOCONNECT_SLAVES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_AUTOCONNECT_SLAVES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_GATEWAY_PING_TIMEOUT")]
pub static SETTING_CONNECTION_GATEWAY_PING_TIMEOUT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_GATEWAY_PING_TIMEOUT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_ID")]
pub static SETTING_CONNECTION_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_INTERFACE_NAME")]
pub static SETTING_CONNECTION_INTERFACE_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_INTERFACE_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_LLDP")]
pub static SETTING_CONNECTION_LLDP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_LLDP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_LLMNR")]
pub static SETTING_CONNECTION_LLMNR: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_LLMNR)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_MASTER")]
pub static SETTING_CONNECTION_MASTER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_MASTER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_MDNS")]
pub static SETTING_CONNECTION_MDNS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_MDNS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_METERED")]
pub static SETTING_CONNECTION_METERED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_METERED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_MUD_URL")]
pub static SETTING_CONNECTION_MUD_URL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_MUD_URL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_MULTI_CONNECT")]
pub static SETTING_CONNECTION_MULTI_CONNECT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_MULTI_CONNECT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_PERMISSIONS")]
pub static SETTING_CONNECTION_PERMISSIONS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_PERMISSIONS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_READ_ONLY")]
pub static SETTING_CONNECTION_READ_ONLY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_READ_ONLY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_SECONDARIES")]
pub static SETTING_CONNECTION_SECONDARIES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_SECONDARIES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_SETTING_NAME")]
pub static SETTING_CONNECTION_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_SLAVE_TYPE")]
pub static SETTING_CONNECTION_SLAVE_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_SLAVE_TYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_STABLE_ID")]
pub static SETTING_CONNECTION_STABLE_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_STABLE_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_TIMESTAMP")]
pub static SETTING_CONNECTION_TIMESTAMP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_TIMESTAMP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_TYPE")]
pub static SETTING_CONNECTION_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_TYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_UUID")]
pub static SETTING_CONNECTION_UUID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_UUID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_WAIT_DEVICE_TIMEOUT")]
pub static SETTING_CONNECTION_WAIT_DEVICE_TIMEOUT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_WAIT_DEVICE_TIMEOUT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_CONNECTION_ZONE")]
pub static SETTING_CONNECTION_ZONE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_ZONE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_APP_FCOE_FLAGS")]
pub static SETTING_DCB_APP_FCOE_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_FCOE_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_APP_FCOE_MODE")]
pub static SETTING_DCB_APP_FCOE_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_FCOE_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_APP_FCOE_PRIORITY")]
pub static SETTING_DCB_APP_FCOE_PRIORITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_FCOE_PRIORITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_APP_FIP_FLAGS")]
pub static SETTING_DCB_APP_FIP_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_FIP_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_APP_FIP_PRIORITY")]
pub static SETTING_DCB_APP_FIP_PRIORITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_FIP_PRIORITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_APP_ISCSI_FLAGS")]
pub static SETTING_DCB_APP_ISCSI_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_ISCSI_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_APP_ISCSI_PRIORITY")]
pub static SETTING_DCB_APP_ISCSI_PRIORITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_ISCSI_PRIORITY)
            .to_str()
            .unwrap()
    });
/// Indicates that the FCoE controller should use "fabric" mode (default)
#[doc(alias = "NM_SETTING_DCB_FCOE_MODE_FABRIC")]
pub static SETTING_DCB_FCOE_MODE_FABRIC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_FCOE_MODE_FABRIC)
            .to_str()
            .unwrap()
    });
/// Indicates that the FCoE controller should use "VN2VN" mode.
#[doc(alias = "NM_SETTING_DCB_FCOE_MODE_VN2VN")]
pub static SETTING_DCB_FCOE_MODE_VN2VN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_FCOE_MODE_VN2VN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_PRIORITY_BANDWIDTH")]
pub static SETTING_DCB_PRIORITY_BANDWIDTH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_BANDWIDTH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_PRIORITY_FLOW_CONTROL")]
pub static SETTING_DCB_PRIORITY_FLOW_CONTROL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_FLOW_CONTROL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_PRIORITY_FLOW_CONTROL_FLAGS")]
pub static SETTING_DCB_PRIORITY_FLOW_CONTROL_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_FLOW_CONTROL_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_PRIORITY_GROUP_BANDWIDTH")]
pub static SETTING_DCB_PRIORITY_GROUP_BANDWIDTH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_GROUP_BANDWIDTH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_PRIORITY_GROUP_FLAGS")]
pub static SETTING_DCB_PRIORITY_GROUP_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_GROUP_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_PRIORITY_GROUP_ID")]
pub static SETTING_DCB_PRIORITY_GROUP_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_GROUP_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_PRIORITY_STRICT_BANDWIDTH")]
pub static SETTING_DCB_PRIORITY_STRICT_BANDWIDTH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_STRICT_BANDWIDTH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_PRIORITY_TRAFFIC_CLASS")]
pub static SETTING_DCB_PRIORITY_TRAFFIC_CLASS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_TRAFFIC_CLASS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DCB_SETTING_NAME")]
pub static SETTING_DCB_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_ATTEMPTS")]
pub static SETTING_DNS_OPTION_ATTEMPTS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_ATTEMPTS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_DEBUG")]
pub static SETTING_DNS_OPTION_DEBUG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_DEBUG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_EDNS0")]
pub static SETTING_DNS_OPTION_EDNS0: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_EDNS0)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_INET6")]
pub static SETTING_DNS_OPTION_INET6: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_INET6)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_IP6_BYTESTRING")]
pub static SETTING_DNS_OPTION_IP6_BYTESTRING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_IP6_BYTESTRING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_IP6_DOTINT")]
pub static SETTING_DNS_OPTION_IP6_DOTINT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_IP6_DOTINT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_NDOTS")]
pub static SETTING_DNS_OPTION_NDOTS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_NDOTS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_NO_CHECK_NAMES")]
pub static SETTING_DNS_OPTION_NO_CHECK_NAMES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_NO_CHECK_NAMES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_NO_IP6_DOTINT")]
pub static SETTING_DNS_OPTION_NO_IP6_DOTINT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_NO_IP6_DOTINT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_NO_RELOAD")]
pub static SETTING_DNS_OPTION_NO_RELOAD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_NO_RELOAD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_NO_TLD_QUERY")]
pub static SETTING_DNS_OPTION_NO_TLD_QUERY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_NO_TLD_QUERY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_ROTATE")]
pub static SETTING_DNS_OPTION_ROTATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_ROTATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_SINGLE_REQUEST")]
pub static SETTING_DNS_OPTION_SINGLE_REQUEST: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_SINGLE_REQUEST)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_SINGLE_REQUEST_REOPEN")]
pub static SETTING_DNS_OPTION_SINGLE_REQUEST_REOPEN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_SINGLE_REQUEST_REOPEN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_TIMEOUT")]
pub static SETTING_DNS_OPTION_TIMEOUT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_TIMEOUT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_TRUST_AD")]
pub static SETTING_DNS_OPTION_TRUST_AD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_TRUST_AD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DNS_OPTION_USE_VC")]
pub static SETTING_DNS_OPTION_USE_VC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_USE_VC)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_DUMMY_SETTING_NAME")]
pub static SETTING_DUMMY_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DUMMY_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_ETHTOOL_SETTING_NAME")]
pub static SETTING_ETHTOOL_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ETHTOOL_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_GENERIC_SETTING_NAME")]
pub static SETTING_GENERIC_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GENERIC_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_APN")]
pub static SETTING_GSM_APN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_APN).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_AUTO_CONFIG")]
pub static SETTING_GSM_AUTO_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_AUTO_CONFIG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_DEVICE_ID")]
pub static SETTING_GSM_DEVICE_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_DEVICE_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_HOME_ONLY")]
pub static SETTING_GSM_HOME_ONLY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_HOME_ONLY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_MTU")]
pub static SETTING_GSM_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_MTU).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_NETWORK_ID")]
pub static SETTING_GSM_NETWORK_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_NETWORK_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_NUMBER")]
pub static SETTING_GSM_NUMBER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_NUMBER).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_PASSWORD")]
pub static SETTING_GSM_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_PASSWORD_FLAGS")]
pub static SETTING_GSM_PASSWORD_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_PIN")]
pub static SETTING_GSM_PIN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_PIN).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_PIN_FLAGS")]
pub static SETTING_GSM_PIN_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_PIN_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_SETTING_NAME")]
pub static SETTING_GSM_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_SIM_ID")]
pub static SETTING_GSM_SIM_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_SIM_ID).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_SIM_OPERATOR_ID")]
pub static SETTING_GSM_SIM_OPERATOR_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_SIM_OPERATOR_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_GSM_USERNAME")]
pub static SETTING_GSM_USERNAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_USERNAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_HOSTNAME_FROM_DHCP")]
pub static SETTING_HOSTNAME_FROM_DHCP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_HOSTNAME_FROM_DHCP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_HOSTNAME_FROM_DNS_LOOKUP")]
pub static SETTING_HOSTNAME_FROM_DNS_LOOKUP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_HOSTNAME_FROM_DNS_LOOKUP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_HOSTNAME_ONLY_FROM_DEFAULT")]
pub static SETTING_HOSTNAME_ONLY_FROM_DEFAULT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_HOSTNAME_ONLY_FROM_DEFAULT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_HOSTNAME_PRIORITY")]
pub static SETTING_HOSTNAME_PRIORITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_HOSTNAME_PRIORITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_HOSTNAME_SETTING_NAME")]
pub static SETTING_HOSTNAME_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_HOSTNAME_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_INFINIBAND_MAC_ADDRESS")]
pub static SETTING_INFINIBAND_MAC_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_INFINIBAND_MAC_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_INFINIBAND_MTU")]
pub static SETTING_INFINIBAND_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_INFINIBAND_MTU)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_INFINIBAND_PARENT")]
pub static SETTING_INFINIBAND_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_INFINIBAND_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_INFINIBAND_P_KEY")]
pub static SETTING_INFINIBAND_P_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_INFINIBAND_P_KEY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_INFINIBAND_SETTING_NAME")]
pub static SETTING_INFINIBAND_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_INFINIBAND_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_INFINIBAND_TRANSPORT_MODE")]
pub static SETTING_INFINIBAND_TRANSPORT_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_INFINIBAND_TRANSPORT_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP4_CONFIG_DHCP_CLIENT_ID")]
pub static SETTING_IP4_CONFIG_DHCP_CLIENT_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_DHCP_CLIENT_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP4_CONFIG_DHCP_FQDN")]
pub static SETTING_IP4_CONFIG_DHCP_FQDN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_DHCP_FQDN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP4_CONFIG_DHCP_VENDOR_CLASS_IDENTIFIER")]
pub static SETTING_IP4_CONFIG_DHCP_VENDOR_CLASS_IDENTIFIER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_DHCP_VENDOR_CLASS_IDENTIFIER)
            .to_str()
            .unwrap()
    });
/// IPv4 configuration should be automatically determined via a method appropriate
/// for the hardware interface, ie DHCP or PPP or some other device-specific
/// manner.
#[doc(alias = "NM_SETTING_IP4_CONFIG_METHOD_AUTO")]
pub static SETTING_IP4_CONFIG_METHOD_AUTO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_METHOD_AUTO)
            .to_str()
            .unwrap()
    });
/// This connection does not use or require IPv4 address and it should be disabled.
#[doc(alias = "NM_SETTING_IP4_CONFIG_METHOD_DISABLED")]
pub static SETTING_IP4_CONFIG_METHOD_DISABLED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_METHOD_DISABLED)
            .to_str()
            .unwrap()
    });
/// IPv4 configuration should be automatically configured for link-local-only
/// operation.
#[doc(alias = "NM_SETTING_IP4_CONFIG_METHOD_LINK_LOCAL")]
pub static SETTING_IP4_CONFIG_METHOD_LINK_LOCAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_METHOD_LINK_LOCAL)
            .to_str()
            .unwrap()
    });
/// All necessary IPv4 configuration (addresses, prefix, DNS, etc) is specified
/// in the setting's properties.
#[doc(alias = "NM_SETTING_IP4_CONFIG_METHOD_MANUAL")]
pub static SETTING_IP4_CONFIG_METHOD_MANUAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_METHOD_MANUAL)
            .to_str()
            .unwrap()
    });
/// This connection specifies configuration that allows other computers to
/// connect through it to the default network (usually the Internet). The
/// connection's interface will be assigned a private address, and a DHCP server,
/// caching DNS server, and Network Address Translation (NAT) functionality will
/// be started on this connection's interface to allow other devices to connect
/// through that interface to the default network.
#[doc(alias = "NM_SETTING_IP4_CONFIG_METHOD_SHARED")]
pub static SETTING_IP4_CONFIG_METHOD_SHARED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_METHOD_SHARED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP4_CONFIG_SETTING_NAME")]
pub static SETTING_IP4_CONFIG_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP6_CONFIG_ADDR_GEN_MODE")]
pub static SETTING_IP6_CONFIG_ADDR_GEN_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_ADDR_GEN_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP6_CONFIG_DHCP_DUID")]
pub static SETTING_IP6_CONFIG_DHCP_DUID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_DHCP_DUID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP6_CONFIG_IP6_PRIVACY")]
pub static SETTING_IP6_CONFIG_IP6_PRIVACY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_IP6_PRIVACY)
            .to_str()
            .unwrap()
    });
/// IPv6 configuration should be automatically determined via a method appropriate
/// for the hardware interface, ie router advertisements, DHCP, or PPP or some
/// other device-specific manner.
#[doc(alias = "NM_SETTING_IP6_CONFIG_METHOD_AUTO")]
pub static SETTING_IP6_CONFIG_METHOD_AUTO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_AUTO)
            .to_str()
            .unwrap()
    });
/// IPv6 configuration should be automatically determined via DHCPv6 only and
/// router advertisements should be ignored.
#[doc(alias = "NM_SETTING_IP6_CONFIG_METHOD_DHCP")]
pub static SETTING_IP6_CONFIG_METHOD_DHCP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_DHCP)
            .to_str()
            .unwrap()
    });
/// IPv6 is disabled for the connection.
#[cfg(any(feature = "v1_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
#[doc(alias = "NM_SETTING_IP6_CONFIG_METHOD_DISABLED")]
pub static SETTING_IP6_CONFIG_METHOD_DISABLED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_DISABLED)
            .to_str()
            .unwrap()
    });
/// IPv6 is not required or is handled by some other mechanism, and NetworkManager
/// should not configure IPv6 for this connection.
#[doc(alias = "NM_SETTING_IP6_CONFIG_METHOD_IGNORE")]
pub static SETTING_IP6_CONFIG_METHOD_IGNORE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_IGNORE)
            .to_str()
            .unwrap()
    });
/// IPv6 configuration should be automatically configured for link-local-only
/// operation.
#[doc(alias = "NM_SETTING_IP6_CONFIG_METHOD_LINK_LOCAL")]
pub static SETTING_IP6_CONFIG_METHOD_LINK_LOCAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_LINK_LOCAL)
            .to_str()
            .unwrap()
    });
/// All necessary IPv6 configuration (addresses, prefix, DNS, etc) is specified
/// in the setting's properties.
#[doc(alias = "NM_SETTING_IP6_CONFIG_METHOD_MANUAL")]
pub static SETTING_IP6_CONFIG_METHOD_MANUAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_MANUAL)
            .to_str()
            .unwrap()
    });
/// This connection specifies configuration that allows other computers to
/// connect through it to the default network (usually the Internet). The
/// connection's interface will be assigned a private address, and router
/// advertisements, a caching DNS server, and Network Address Translation (NAT)
/// functionality will be started on this connection's interface to allow other
/// devices to connect through that interface to the default network. (not yet
/// supported for IPv6)
#[doc(alias = "NM_SETTING_IP6_CONFIG_METHOD_SHARED")]
pub static SETTING_IP6_CONFIG_METHOD_SHARED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_SHARED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP6_CONFIG_RA_TIMEOUT")]
pub static SETTING_IP6_CONFIG_RA_TIMEOUT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_RA_TIMEOUT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP6_CONFIG_SETTING_NAME")]
pub static SETTING_IP6_CONFIG_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP6_CONFIG_TOKEN")]
pub static SETTING_IP6_CONFIG_TOKEN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_TOKEN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_ADDRESSES")]
pub static SETTING_IP_CONFIG_ADDRESSES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_ADDRESSES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_DAD_TIMEOUT")]
pub static SETTING_IP_CONFIG_DAD_TIMEOUT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DAD_TIMEOUT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_DHCP_HOSTNAME")]
pub static SETTING_IP_CONFIG_DHCP_HOSTNAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DHCP_HOSTNAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_DHCP_HOSTNAME_FLAGS")]
pub static SETTING_IP_CONFIG_DHCP_HOSTNAME_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DHCP_HOSTNAME_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_DHCP_IAID")]
pub static SETTING_IP_CONFIG_DHCP_IAID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DHCP_IAID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_DHCP_REJECT_SERVERS")]
pub static SETTING_IP_CONFIG_DHCP_REJECT_SERVERS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DHCP_REJECT_SERVERS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_DHCP_SEND_HOSTNAME")]
pub static SETTING_IP_CONFIG_DHCP_SEND_HOSTNAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DHCP_SEND_HOSTNAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_DHCP_TIMEOUT")]
pub static SETTING_IP_CONFIG_DHCP_TIMEOUT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DHCP_TIMEOUT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_DNS")]
pub static SETTING_IP_CONFIG_DNS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DNS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_DNS_OPTIONS")]
pub static SETTING_IP_CONFIG_DNS_OPTIONS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DNS_OPTIONS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_DNS_PRIORITY")]
pub static SETTING_IP_CONFIG_DNS_PRIORITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DNS_PRIORITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_DNS_SEARCH")]
pub static SETTING_IP_CONFIG_DNS_SEARCH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DNS_SEARCH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_GATEWAY")]
pub static SETTING_IP_CONFIG_GATEWAY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_GATEWAY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_IGNORE_AUTO_DNS")]
pub static SETTING_IP_CONFIG_IGNORE_AUTO_DNS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_IGNORE_AUTO_DNS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_IGNORE_AUTO_ROUTES")]
pub static SETTING_IP_CONFIG_IGNORE_AUTO_ROUTES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_IGNORE_AUTO_ROUTES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_MAY_FAIL")]
pub static SETTING_IP_CONFIG_MAY_FAIL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_MAY_FAIL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_METHOD")]
pub static SETTING_IP_CONFIG_METHOD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_METHOD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_NEVER_DEFAULT")]
pub static SETTING_IP_CONFIG_NEVER_DEFAULT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_NEVER_DEFAULT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_REQUIRED_TIMEOUT")]
pub static SETTING_IP_CONFIG_REQUIRED_TIMEOUT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_REQUIRED_TIMEOUT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_ROUTES")]
pub static SETTING_IP_CONFIG_ROUTES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_ROUTES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_ROUTE_METRIC")]
pub static SETTING_IP_CONFIG_ROUTE_METRIC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_ROUTE_METRIC)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_ROUTE_TABLE")]
pub static SETTING_IP_CONFIG_ROUTE_TABLE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_ROUTE_TABLE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_CONFIG_ROUTING_RULES")]
pub static SETTING_IP_CONFIG_ROUTING_RULES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_ROUTING_RULES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_ENCAPSULATION_LIMIT")]
pub static SETTING_IP_TUNNEL_ENCAPSULATION_LIMIT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_ENCAPSULATION_LIMIT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_FLAGS")]
pub static SETTING_IP_TUNNEL_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_FLOW_LABEL")]
pub static SETTING_IP_TUNNEL_FLOW_LABEL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_FLOW_LABEL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_INPUT_KEY")]
pub static SETTING_IP_TUNNEL_INPUT_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_INPUT_KEY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_LOCAL")]
pub static SETTING_IP_TUNNEL_LOCAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_LOCAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_MODE")]
pub static SETTING_IP_TUNNEL_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_MTU")]
pub static SETTING_IP_TUNNEL_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_MTU)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_OUTPUT_KEY")]
pub static SETTING_IP_TUNNEL_OUTPUT_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_OUTPUT_KEY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_PARENT")]
pub static SETTING_IP_TUNNEL_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_PATH_MTU_DISCOVERY")]
pub static SETTING_IP_TUNNEL_PATH_MTU_DISCOVERY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_PATH_MTU_DISCOVERY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_REMOTE")]
pub static SETTING_IP_TUNNEL_REMOTE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_REMOTE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_SETTING_NAME")]
pub static SETTING_IP_TUNNEL_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_TOS")]
pub static SETTING_IP_TUNNEL_TOS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_TOS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_IP_TUNNEL_TTL")]
pub static SETTING_IP_TUNNEL_TTL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_TTL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACSEC_ENCRYPT")]
pub static SETTING_MACSEC_ENCRYPT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_ENCRYPT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACSEC_MKA_CAK")]
pub static SETTING_MACSEC_MKA_CAK: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_MKA_CAK)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACSEC_MKA_CAK_FLAGS")]
pub static SETTING_MACSEC_MKA_CAK_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_MKA_CAK_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACSEC_MKA_CKN")]
pub static SETTING_MACSEC_MKA_CKN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_MKA_CKN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACSEC_MODE")]
pub static SETTING_MACSEC_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACSEC_PARENT")]
pub static SETTING_MACSEC_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACSEC_PORT")]
pub static SETTING_MACSEC_PORT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_PORT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACSEC_SEND_SCI")]
pub static SETTING_MACSEC_SEND_SCI: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_SEND_SCI)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACSEC_SETTING_NAME")]
pub static SETTING_MACSEC_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACSEC_VALIDATION")]
pub static SETTING_MACSEC_VALIDATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_VALIDATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACVLAN_MODE")]
pub static SETTING_MACVLAN_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACVLAN_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACVLAN_PARENT")]
pub static SETTING_MACVLAN_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACVLAN_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACVLAN_PROMISCUOUS")]
pub static SETTING_MACVLAN_PROMISCUOUS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACVLAN_PROMISCUOUS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACVLAN_SETTING_NAME")]
pub static SETTING_MACVLAN_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACVLAN_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MACVLAN_TAP")]
pub static SETTING_MACVLAN_TAP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACVLAN_TAP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MATCH_DRIVER")]
pub static SETTING_MATCH_DRIVER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MATCH_DRIVER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MATCH_INTERFACE_NAME")]
pub static SETTING_MATCH_INTERFACE_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MATCH_INTERFACE_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MATCH_KERNEL_COMMAND_LINE")]
pub static SETTING_MATCH_KERNEL_COMMAND_LINE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MATCH_KERNEL_COMMAND_LINE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_MATCH_PATH")]
pub static SETTING_MATCH_PATH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MATCH_PATH).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_MATCH_SETTING_NAME")]
pub static SETTING_MATCH_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MATCH_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_NAME")]
pub static SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_NAME).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_OLPC_MESH_CHANNEL")]
pub static SETTING_OLPC_MESH_CHANNEL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OLPC_MESH_CHANNEL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OLPC_MESH_DHCP_ANYCAST_ADDRESS")]
pub static SETTING_OLPC_MESH_DHCP_ANYCAST_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OLPC_MESH_DHCP_ANYCAST_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OLPC_MESH_SETTING_NAME")]
pub static SETTING_OLPC_MESH_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OLPC_MESH_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OLPC_MESH_SSID")]
pub static SETTING_OLPC_MESH_SSID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OLPC_MESH_SSID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_BRIDGE_DATAPATH_TYPE")]
pub static SETTING_OVS_BRIDGE_DATAPATH_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_BRIDGE_DATAPATH_TYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_BRIDGE_FAIL_MODE")]
pub static SETTING_OVS_BRIDGE_FAIL_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_BRIDGE_FAIL_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_BRIDGE_MCAST_SNOOPING_ENABLE")]
pub static SETTING_OVS_BRIDGE_MCAST_SNOOPING_ENABLE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_BRIDGE_MCAST_SNOOPING_ENABLE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_BRIDGE_RSTP_ENABLE")]
pub static SETTING_OVS_BRIDGE_RSTP_ENABLE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_BRIDGE_RSTP_ENABLE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_BRIDGE_SETTING_NAME")]
pub static SETTING_OVS_BRIDGE_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_BRIDGE_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_BRIDGE_STP_ENABLE")]
pub static SETTING_OVS_BRIDGE_STP_ENABLE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_BRIDGE_STP_ENABLE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_DPDK_DEVARGS")]
pub static SETTING_OVS_DPDK_DEVARGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_DPDK_DEVARGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_DPDK_SETTING_NAME")]
pub static SETTING_OVS_DPDK_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_DPDK_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_EXTERNAL_IDS_DATA")]
pub static SETTING_OVS_EXTERNAL_IDS_DATA: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_EXTERNAL_IDS_DATA)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_EXTERNAL_IDS_SETTING_NAME")]
pub static SETTING_OVS_EXTERNAL_IDS_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_EXTERNAL_IDS_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_INTERFACE_SETTING_NAME")]
pub static SETTING_OVS_INTERFACE_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_INTERFACE_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_INTERFACE_TYPE")]
pub static SETTING_OVS_INTERFACE_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_INTERFACE_TYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_PATCH_PEER")]
pub static SETTING_OVS_PATCH_PEER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PATCH_PEER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_PATCH_SETTING_NAME")]
pub static SETTING_OVS_PATCH_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PATCH_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_PORT_BOND_DOWNDELAY")]
pub static SETTING_OVS_PORT_BOND_DOWNDELAY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_BOND_DOWNDELAY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_PORT_BOND_MODE")]
pub static SETTING_OVS_PORT_BOND_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_BOND_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_PORT_BOND_UPDELAY")]
pub static SETTING_OVS_PORT_BOND_UPDELAY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_BOND_UPDELAY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_PORT_LACP")]
pub static SETTING_OVS_PORT_LACP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_LACP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_PORT_SETTING_NAME")]
pub static SETTING_OVS_PORT_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_PORT_TAG")]
pub static SETTING_OVS_PORT_TAG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_TAG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_OVS_PORT_VLAN_MODE")]
pub static SETTING_OVS_PORT_VLAN_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_VLAN_MODE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPPOE_PARENT")]
pub static SETTING_PPPOE_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPPOE_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPPOE_PASSWORD")]
pub static SETTING_PPPOE_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPPOE_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPPOE_PASSWORD_FLAGS")]
pub static SETTING_PPPOE_PASSWORD_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPPOE_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPPOE_SERVICE")]
pub static SETTING_PPPOE_SERVICE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPPOE_SERVICE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPPOE_SETTING_NAME")]
pub static SETTING_PPPOE_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPPOE_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPPOE_USERNAME")]
pub static SETTING_PPPOE_USERNAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPPOE_USERNAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_BAUD")]
pub static SETTING_PPP_BAUD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_BAUD).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_CRTSCTS")]
pub static SETTING_PPP_CRTSCTS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_CRTSCTS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_LCP_ECHO_FAILURE")]
pub static SETTING_PPP_LCP_ECHO_FAILURE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_LCP_ECHO_FAILURE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_LCP_ECHO_INTERVAL")]
pub static SETTING_PPP_LCP_ECHO_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_LCP_ECHO_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_MPPE_STATEFUL")]
pub static SETTING_PPP_MPPE_STATEFUL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_MPPE_STATEFUL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_MRU")]
pub static SETTING_PPP_MRU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_MRU).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_MTU")]
pub static SETTING_PPP_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_MTU).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_NOAUTH")]
pub static SETTING_PPP_NOAUTH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_NOAUTH).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_NOBSDCOMP")]
pub static SETTING_PPP_NOBSDCOMP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_NOBSDCOMP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_NODEFLATE")]
pub static SETTING_PPP_NODEFLATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_NODEFLATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_NO_VJ_COMP")]
pub static SETTING_PPP_NO_VJ_COMP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_NO_VJ_COMP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_REFUSE_CHAP")]
pub static SETTING_PPP_REFUSE_CHAP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REFUSE_CHAP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_REFUSE_EAP")]
pub static SETTING_PPP_REFUSE_EAP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REFUSE_EAP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_REFUSE_MSCHAP")]
pub static SETTING_PPP_REFUSE_MSCHAP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REFUSE_MSCHAP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_REFUSE_MSCHAPV2")]
pub static SETTING_PPP_REFUSE_MSCHAPV2: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REFUSE_MSCHAPV2)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_REFUSE_PAP")]
pub static SETTING_PPP_REFUSE_PAP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REFUSE_PAP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_REQUIRE_MPPE")]
pub static SETTING_PPP_REQUIRE_MPPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REQUIRE_MPPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_REQUIRE_MPPE_128")]
pub static SETTING_PPP_REQUIRE_MPPE_128: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REQUIRE_MPPE_128)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PPP_SETTING_NAME")]
pub static SETTING_PPP_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PROXY_BROWSER_ONLY")]
pub static SETTING_PROXY_BROWSER_ONLY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PROXY_BROWSER_ONLY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PROXY_METHOD")]
pub static SETTING_PROXY_METHOD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PROXY_METHOD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PROXY_PAC_SCRIPT")]
pub static SETTING_PROXY_PAC_SCRIPT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PROXY_PAC_SCRIPT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PROXY_PAC_URL")]
pub static SETTING_PROXY_PAC_URL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PROXY_PAC_URL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_PROXY_SETTING_NAME")]
pub static SETTING_PROXY_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PROXY_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_SERIAL_BAUD")]
pub static SETTING_SERIAL_BAUD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SERIAL_BAUD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_SERIAL_BITS")]
pub static SETTING_SERIAL_BITS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SERIAL_BITS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_SERIAL_PARITY")]
pub static SETTING_SERIAL_PARITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SERIAL_PARITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_SERIAL_SEND_DELAY")]
pub static SETTING_SERIAL_SEND_DELAY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SERIAL_SEND_DELAY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_SERIAL_SETTING_NAME")]
pub static SETTING_SERIAL_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SERIAL_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_SERIAL_STOPBITS")]
pub static SETTING_SERIAL_STOPBITS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SERIAL_STOPBITS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_SRIOV_AUTOPROBE_DRIVERS")]
pub static SETTING_SRIOV_AUTOPROBE_DRIVERS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SRIOV_AUTOPROBE_DRIVERS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_SRIOV_SETTING_NAME")]
pub static SETTING_SRIOV_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SRIOV_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_SRIOV_TOTAL_VFS")]
pub static SETTING_SRIOV_TOTAL_VFS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SRIOV_TOTAL_VFS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_SRIOV_VFS")]
pub static SETTING_SRIOV_VFS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SRIOV_VFS).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_TC_CONFIG_QDISCS")]
pub static SETTING_TC_CONFIG_QDISCS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TC_CONFIG_QDISCS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TC_CONFIG_SETTING_NAME")]
pub static SETTING_TC_CONFIG_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TC_CONFIG_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TC_CONFIG_TFILTERS")]
pub static SETTING_TC_CONFIG_TFILTERS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TC_CONFIG_TFILTERS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_CONFIG")]
pub static SETTING_TEAM_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_CONFIG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_LINK_WATCHERS")]
pub static SETTING_TEAM_LINK_WATCHERS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_LINK_WATCHERS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_MCAST_REJOIN_COUNT")]
pub static SETTING_TEAM_MCAST_REJOIN_COUNT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_MCAST_REJOIN_COUNT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_MCAST_REJOIN_INTERVAL")]
pub static SETTING_TEAM_MCAST_REJOIN_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_MCAST_REJOIN_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_NOTIFY_PEERS_COUNT")]
pub static SETTING_TEAM_NOTIFY_PEERS_COUNT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_NOTIFY_PEERS_COUNT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_NOTIFY_PEERS_INTERVAL")]
pub static SETTING_TEAM_NOTIFY_PEERS_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_NOTIFY_PEERS_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_PORT_CONFIG")]
pub static SETTING_TEAM_PORT_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_CONFIG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_PORT_LACP_KEY")]
pub static SETTING_TEAM_PORT_LACP_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_LACP_KEY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_PORT_LACP_PRIO")]
pub static SETTING_TEAM_PORT_LACP_PRIO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_LACP_PRIO)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_PORT_LINK_WATCHERS")]
pub static SETTING_TEAM_PORT_LINK_WATCHERS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_LINK_WATCHERS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_PORT_PRIO")]
pub static SETTING_TEAM_PORT_PRIO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_PRIO)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_PORT_QUEUE_ID")]
pub static SETTING_TEAM_PORT_QUEUE_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_QUEUE_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_PORT_SETTING_NAME")]
pub static SETTING_TEAM_PORT_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_PORT_STICKY")]
pub static SETTING_TEAM_PORT_STICKY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_STICKY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER")]
pub static SETTING_TEAM_RUNNER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_ACTIVE")]
pub static SETTING_TEAM_RUNNER_ACTIVE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_ACTIVE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_ACTIVEBACKUP")]
pub static SETTING_TEAM_RUNNER_ACTIVEBACKUP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_ACTIVEBACKUP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY")]
pub static SETTING_TEAM_RUNNER_AGG_SELECT_POLICY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_BANDWIDTH")]
pub static SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_BANDWIDTH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_BANDWIDTH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_COUNT")]
pub static SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_COUNT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_COUNT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO")]
pub static SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO_STABLE")]
pub static SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO_STABLE: once_cell::sync::Lazy<
    &'static str,
> = once_cell::sync::Lazy::new(|| unsafe {
    CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO_STABLE)
        .to_str()
        .unwrap()
});
#[doc(alias = "NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_PORT_CONFIG")]
pub static SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_PORT_CONFIG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_PORT_CONFIG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_BROADCAST")]
pub static SETTING_TEAM_RUNNER_BROADCAST: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_BROADCAST)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_FAST_RATE")]
pub static SETTING_TEAM_RUNNER_FAST_RATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_FAST_RATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_HWADDR_POLICY")]
pub static SETTING_TEAM_RUNNER_HWADDR_POLICY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_HWADDR_POLICY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_HWADDR_POLICY_BY_ACTIVE")]
pub static SETTING_TEAM_RUNNER_HWADDR_POLICY_BY_ACTIVE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_HWADDR_POLICY_BY_ACTIVE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_HWADDR_POLICY_ONLY_ACTIVE")]
pub static SETTING_TEAM_RUNNER_HWADDR_POLICY_ONLY_ACTIVE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_HWADDR_POLICY_ONLY_ACTIVE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_HWADDR_POLICY_SAME_ALL")]
pub static SETTING_TEAM_RUNNER_HWADDR_POLICY_SAME_ALL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_HWADDR_POLICY_SAME_ALL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_LACP")]
pub static SETTING_TEAM_RUNNER_LACP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_LACP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_LOADBALANCE")]
pub static SETTING_TEAM_RUNNER_LOADBALANCE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_LOADBALANCE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_MIN_PORTS")]
pub static SETTING_TEAM_RUNNER_MIN_PORTS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_MIN_PORTS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_RANDOM")]
pub static SETTING_TEAM_RUNNER_RANDOM: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_RANDOM)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_ROUNDROBIN")]
pub static SETTING_TEAM_RUNNER_ROUNDROBIN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_ROUNDROBIN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_SYS_PRIO")]
pub static SETTING_TEAM_RUNNER_SYS_PRIO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_SYS_PRIO)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_TX_BALANCER")]
pub static SETTING_TEAM_RUNNER_TX_BALANCER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_TX_BALANCER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL")]
pub static SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_RUNNER_TX_HASH")]
pub static SETTING_TEAM_RUNNER_TX_HASH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_TX_HASH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TEAM_SETTING_NAME")]
pub static SETTING_TEAM_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TUN_GROUP")]
pub static SETTING_TUN_GROUP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TUN_GROUP).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_TUN_MODE")]
pub static SETTING_TUN_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TUN_MODE).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_TUN_MULTI_QUEUE")]
pub static SETTING_TUN_MULTI_QUEUE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TUN_MULTI_QUEUE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TUN_OWNER")]
pub static SETTING_TUN_OWNER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TUN_OWNER).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_TUN_PI")]
pub static SETTING_TUN_PI: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TUN_PI).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_TUN_SETTING_NAME")]
pub static SETTING_TUN_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TUN_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_TUN_VNET_HDR")]
pub static SETTING_TUN_VNET_HDR: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TUN_VNET_HDR)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_USER_DATA")]
pub static SETTING_USER_DATA: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_USER_DATA).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_USER_SETTING_NAME")]
pub static SETTING_USER_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_USER_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VETH_PEER")]
pub static SETTING_VETH_PEER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VETH_PEER).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_VETH_SETTING_NAME")]
pub static SETTING_VETH_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VETH_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VLAN_EGRESS_PRIORITY_MAP")]
pub static SETTING_VLAN_EGRESS_PRIORITY_MAP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VLAN_EGRESS_PRIORITY_MAP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VLAN_FLAGS")]
pub static SETTING_VLAN_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VLAN_FLAGS).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_VLAN_ID")]
pub static SETTING_VLAN_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VLAN_ID).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_VLAN_INGRESS_PRIORITY_MAP")]
pub static SETTING_VLAN_INGRESS_PRIORITY_MAP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VLAN_INGRESS_PRIORITY_MAP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VLAN_PARENT")]
pub static SETTING_VLAN_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VLAN_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VLAN_SETTING_NAME")]
pub static SETTING_VLAN_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VLAN_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VPN_DATA")]
pub static SETTING_VPN_DATA: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_DATA).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_VPN_PERSISTENT")]
pub static SETTING_VPN_PERSISTENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_PERSISTENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VPN_SECRETS")]
pub static SETTING_VPN_SECRETS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_SECRETS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VPN_SERVICE_TYPE")]
pub static SETTING_VPN_SERVICE_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_SERVICE_TYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VPN_SETTING_NAME")]
pub static SETTING_VPN_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VPN_TIMEOUT")]
pub static SETTING_VPN_TIMEOUT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_TIMEOUT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VPN_USER_NAME")]
pub static SETTING_VPN_USER_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_USER_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VRF_SETTING_NAME")]
pub static SETTING_VRF_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VRF_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VRF_TABLE")]
pub static SETTING_VRF_TABLE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VRF_TABLE).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_AGEING")]
pub static SETTING_VXLAN_AGEING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_AGEING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_DESTINATION_PORT")]
pub static SETTING_VXLAN_DESTINATION_PORT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_DESTINATION_PORT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_ID")]
pub static SETTING_VXLAN_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_ID).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_L2_MISS")]
pub static SETTING_VXLAN_L2_MISS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_L2_MISS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_L3_MISS")]
pub static SETTING_VXLAN_L3_MISS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_L3_MISS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_LEARNING")]
pub static SETTING_VXLAN_LEARNING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_LEARNING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_LIMIT")]
pub static SETTING_VXLAN_LIMIT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_LIMIT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_LOCAL")]
pub static SETTING_VXLAN_LOCAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_LOCAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_PARENT")]
pub static SETTING_VXLAN_PARENT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_PARENT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_PROXY")]
pub static SETTING_VXLAN_PROXY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_PROXY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_REMOTE")]
pub static SETTING_VXLAN_REMOTE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_REMOTE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_RSC")]
pub static SETTING_VXLAN_RSC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_RSC).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_SETTING_NAME")]
pub static SETTING_VXLAN_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_SOURCE_PORT_MAX")]
pub static SETTING_VXLAN_SOURCE_PORT_MAX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_SOURCE_PORT_MAX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_SOURCE_PORT_MIN")]
pub static SETTING_VXLAN_SOURCE_PORT_MIN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_SOURCE_PORT_MIN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_TOS")]
pub static SETTING_VXLAN_TOS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_TOS).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_VXLAN_TTL")]
pub static SETTING_VXLAN_TTL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_TTL).to_str().unwrap()
    });
/// The mac address of the peer to connect to.
#[doc(alias = "NM_SETTING_WIFI_P2P_PEER")]
pub static SETTING_WIFI_P2P_PEER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIFI_P2P_PEER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIFI_P2P_SETTING_NAME")]
pub static SETTING_WIFI_P2P_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIFI_P2P_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIFI_P2P_WFD_IES")]
pub static SETTING_WIFI_P2P_WFD_IES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIFI_P2P_WFD_IES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIFI_P2P_WPS_METHOD")]
pub static SETTING_WIFI_P2P_WPS_METHOD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIFI_P2P_WPS_METHOD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIMAX_MAC_ADDRESS")]
pub static SETTING_WIMAX_MAC_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIMAX_MAC_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIMAX_NETWORK_NAME")]
pub static SETTING_WIMAX_NETWORK_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIMAX_NETWORK_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIMAX_SETTING_NAME")]
pub static SETTING_WIMAX_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIMAX_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_ACCEPT_ALL_MAC_ADDRESSES")]
pub static SETTING_WIRED_ACCEPT_ALL_MAC_ADDRESSES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_ACCEPT_ALL_MAC_ADDRESSES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_AUTO_NEGOTIATE")]
pub static SETTING_WIRED_AUTO_NEGOTIATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_AUTO_NEGOTIATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_CLONED_MAC_ADDRESS")]
pub static SETTING_WIRED_CLONED_MAC_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_CLONED_MAC_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_DUPLEX")]
pub static SETTING_WIRED_DUPLEX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_DUPLEX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_GENERATE_MAC_ADDRESS_MASK")]
pub static SETTING_WIRED_GENERATE_MAC_ADDRESS_MASK: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_GENERATE_MAC_ADDRESS_MASK)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_MAC_ADDRESS")]
pub static SETTING_WIRED_MAC_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_MAC_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_MAC_ADDRESS_BLACKLIST")]
pub static SETTING_WIRED_MAC_ADDRESS_BLACKLIST: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_MAC_ADDRESS_BLACKLIST)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_MTU")]
pub static SETTING_WIRED_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_MTU).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_PORT")]
pub static SETTING_WIRED_PORT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_PORT).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_S390_NETTYPE")]
pub static SETTING_WIRED_S390_NETTYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_S390_NETTYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_S390_OPTIONS")]
pub static SETTING_WIRED_S390_OPTIONS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_S390_OPTIONS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_S390_SUBCHANNELS")]
pub static SETTING_WIRED_S390_SUBCHANNELS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_S390_SUBCHANNELS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_SETTING_NAME")]
pub static SETTING_WIRED_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_SPEED")]
pub static SETTING_WIRED_SPEED: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_SPEED)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_WAKE_ON_LAN")]
pub static SETTING_WIRED_WAKE_ON_LAN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_WAKE_ON_LAN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRED_WAKE_ON_LAN_PASSWORD")]
pub static SETTING_WIRED_WAKE_ON_LAN_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_WAKE_ON_LAN_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIREGUARD_FWMARK")]
pub static SETTING_WIREGUARD_FWMARK: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIREGUARD_FWMARK)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIREGUARD_IP4_AUTO_DEFAULT_ROUTE")]
pub static SETTING_WIREGUARD_IP4_AUTO_DEFAULT_ROUTE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIREGUARD_IP4_AUTO_DEFAULT_ROUTE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIREGUARD_IP6_AUTO_DEFAULT_ROUTE")]
pub static SETTING_WIREGUARD_IP6_AUTO_DEFAULT_ROUTE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIREGUARD_IP6_AUTO_DEFAULT_ROUTE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIREGUARD_LISTEN_PORT")]
pub static SETTING_WIREGUARD_LISTEN_PORT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIREGUARD_LISTEN_PORT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIREGUARD_MTU")]
pub static SETTING_WIREGUARD_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIREGUARD_MTU)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIREGUARD_PEERS")]
pub static SETTING_WIREGUARD_PEERS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIREGUARD_PEERS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIREGUARD_PEER_ROUTES")]
pub static SETTING_WIREGUARD_PEER_ROUTES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIREGUARD_PEER_ROUTES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIREGUARD_PRIVATE_KEY")]
pub static SETTING_WIREGUARD_PRIVATE_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIREGUARD_PRIVATE_KEY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIREGUARD_PRIVATE_KEY_FLAGS")]
pub static SETTING_WIREGUARD_PRIVATE_KEY_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIREGUARD_PRIVATE_KEY_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIREGUARD_SETTING_NAME")]
pub static SETTING_WIREGUARD_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIREGUARD_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_AP_ISOLATION")]
pub static SETTING_WIRELESS_AP_ISOLATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_AP_ISOLATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_BAND")]
pub static SETTING_WIRELESS_BAND: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_BAND)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_BSSID")]
pub static SETTING_WIRELESS_BSSID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_BSSID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_CHANNEL")]
pub static SETTING_WIRELESS_CHANNEL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_CHANNEL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_CLONED_MAC_ADDRESS")]
pub static SETTING_WIRELESS_CLONED_MAC_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_CLONED_MAC_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_GENERATE_MAC_ADDRESS_MASK")]
pub static SETTING_WIRELESS_GENERATE_MAC_ADDRESS_MASK: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_GENERATE_MAC_ADDRESS_MASK)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_HIDDEN")]
pub static SETTING_WIRELESS_HIDDEN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_HIDDEN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_MAC_ADDRESS")]
pub static SETTING_WIRELESS_MAC_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MAC_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_MAC_ADDRESS_BLACKLIST")]
pub static SETTING_WIRELESS_MAC_ADDRESS_BLACKLIST: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MAC_ADDRESS_BLACKLIST)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_MAC_ADDRESS_RANDOMIZATION")]
pub static SETTING_WIRELESS_MAC_ADDRESS_RANDOMIZATION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MAC_ADDRESS_RANDOMIZATION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_MODE")]
pub static SETTING_WIRELESS_MODE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MODE)
            .to_str()
            .unwrap()
    });
/// Indicates Ad-Hoc mode where no access point is expected to be present.
#[doc(alias = "NM_SETTING_WIRELESS_MODE_ADHOC")]
pub static SETTING_WIRELESS_MODE_ADHOC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MODE_ADHOC)
            .to_str()
            .unwrap()
    });
/// Indicates AP/master mode where the wireless device is started as an access
/// point/hotspot.
#[doc(alias = "NM_SETTING_WIRELESS_MODE_AP")]
pub static SETTING_WIRELESS_MODE_AP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MODE_AP)
            .to_str()
            .unwrap()
    });
/// Indicates infrastructure mode where an access point is expected to be present
/// for this connection.
#[doc(alias = "NM_SETTING_WIRELESS_MODE_INFRA")]
pub static SETTING_WIRELESS_MODE_INFRA: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MODE_INFRA)
            .to_str()
            .unwrap()
    });
/// Indicates that the connection should create a mesh point.
#[cfg(any(feature = "v1_20", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
#[doc(alias = "NM_SETTING_WIRELESS_MODE_MESH")]
pub static SETTING_WIRELESS_MODE_MESH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MODE_MESH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_MTU")]
pub static SETTING_WIRELESS_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MTU)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_POWERSAVE")]
pub static SETTING_WIRELESS_POWERSAVE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_POWERSAVE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_RATE")]
pub static SETTING_WIRELESS_RATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_RATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_AUTH_ALG")]
pub static SETTING_WIRELESS_SECURITY_AUTH_ALG: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_AUTH_ALG)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_FILS")]
pub static SETTING_WIRELESS_SECURITY_FILS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_FILS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_GROUP")]
pub static SETTING_WIRELESS_SECURITY_GROUP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_GROUP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_KEY_MGMT")]
pub static SETTING_WIRELESS_SECURITY_KEY_MGMT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_KEY_MGMT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_LEAP_PASSWORD")]
pub static SETTING_WIRELESS_SECURITY_LEAP_PASSWORD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_LEAP_PASSWORD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_LEAP_PASSWORD_FLAGS")]
pub static SETTING_WIRELESS_SECURITY_LEAP_PASSWORD_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_LEAP_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_LEAP_USERNAME")]
pub static SETTING_WIRELESS_SECURITY_LEAP_USERNAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_LEAP_USERNAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_PAIRWISE")]
pub static SETTING_WIRELESS_SECURITY_PAIRWISE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_PAIRWISE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_PMF")]
pub static SETTING_WIRELESS_SECURITY_PMF: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_PMF)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_PROTO")]
pub static SETTING_WIRELESS_SECURITY_PROTO: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_PROTO)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_PSK")]
pub static SETTING_WIRELESS_SECURITY_PSK: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_PSK)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_PSK_FLAGS")]
pub static SETTING_WIRELESS_SECURITY_PSK_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_PSK_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_SETTING_NAME")]
pub static SETTING_WIRELESS_SECURITY_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_WEP_KEY0")]
pub static SETTING_WIRELESS_SECURITY_WEP_KEY0: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_KEY0)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_WEP_KEY1")]
pub static SETTING_WIRELESS_SECURITY_WEP_KEY1: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_KEY1)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_WEP_KEY2")]
pub static SETTING_WIRELESS_SECURITY_WEP_KEY2: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_KEY2)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_WEP_KEY3")]
pub static SETTING_WIRELESS_SECURITY_WEP_KEY3: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_KEY3)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_WEP_KEY_FLAGS")]
pub static SETTING_WIRELESS_SECURITY_WEP_KEY_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_KEY_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE")]
pub static SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_WEP_TX_KEYIDX")]
pub static SETTING_WIRELESS_SECURITY_WEP_TX_KEYIDX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_TX_KEYIDX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SECURITY_WPS_METHOD")]
pub static SETTING_WIRELESS_SECURITY_WPS_METHOD: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WPS_METHOD)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SEEN_BSSIDS")]
pub static SETTING_WIRELESS_SEEN_BSSIDS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SEEN_BSSIDS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SETTING_NAME")]
pub static SETTING_WIRELESS_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_SSID")]
pub static SETTING_WIRELESS_SSID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SSID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_TX_POWER")]
pub static SETTING_WIRELESS_TX_POWER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_TX_POWER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WIRELESS_WAKE_ON_WLAN")]
pub static SETTING_WIRELESS_WAKE_ON_WLAN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_WAKE_ON_WLAN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WPAN_CHANNEL")]
pub static SETTING_WPAN_CHANNEL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WPAN_CHANNEL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WPAN_MAC_ADDRESS")]
pub static SETTING_WPAN_MAC_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WPAN_MAC_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WPAN_PAGE")]
pub static SETTING_WPAN_PAGE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WPAN_PAGE).to_str().unwrap()
    });
#[doc(alias = "NM_SETTING_WPAN_PAN_ID")]
pub static SETTING_WPAN_PAN_ID: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WPAN_PAN_ID)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WPAN_SETTING_NAME")]
pub static SETTING_WPAN_SETTING_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WPAN_SETTING_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SETTING_WPAN_SHORT_ADDRESS")]
pub static SETTING_WPAN_SHORT_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WPAN_SHORT_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SRIOV_VF_ATTRIBUTE_MAC")]
pub static SRIOV_VF_ATTRIBUTE_MAC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SRIOV_VF_ATTRIBUTE_MAC)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SRIOV_VF_ATTRIBUTE_MAX_TX_RATE")]
pub static SRIOV_VF_ATTRIBUTE_MAX_TX_RATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SRIOV_VF_ATTRIBUTE_MAX_TX_RATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SRIOV_VF_ATTRIBUTE_MIN_TX_RATE")]
pub static SRIOV_VF_ATTRIBUTE_MIN_TX_RATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SRIOV_VF_ATTRIBUTE_MIN_TX_RATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SRIOV_VF_ATTRIBUTE_SPOOF_CHECK")]
pub static SRIOV_VF_ATTRIBUTE_SPOOF_CHECK: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SRIOV_VF_ATTRIBUTE_SPOOF_CHECK)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_SRIOV_VF_ATTRIBUTE_TRUST")]
pub static SRIOV_VF_ATTRIBUTE_TRUST: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_SRIOV_VF_ATTRIBUTE_TRUST)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_TEAM_LINK_WATCHER_ARP_PING")]
pub static TEAM_LINK_WATCHER_ARP_PING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_TEAM_LINK_WATCHER_ARP_PING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_TEAM_LINK_WATCHER_ETHTOOL")]
pub static TEAM_LINK_WATCHER_ETHTOOL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_TEAM_LINK_WATCHER_ETHTOOL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_TEAM_LINK_WATCHER_NSNA_PING")]
pub static TEAM_LINK_WATCHER_NSNA_PING: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_TEAM_LINK_WATCHER_NSNA_PING)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_CONNECTION_BANNER")]
pub static VPN_CONNECTION_BANNER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_CONNECTION_BANNER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_CONNECTION_VPN_STATE")]
pub static VPN_CONNECTION_VPN_STATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_CONNECTION_VPN_STATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_DBUS_PLUGIN_INTERFACE")]
pub static VPN_DBUS_PLUGIN_INTERFACE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_DBUS_PLUGIN_INTERFACE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_DBUS_PLUGIN_PATH")]
pub static VPN_DBUS_PLUGIN_PATH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_DBUS_PLUGIN_PATH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_EDITOR_PLUGIN_DESCRIPTION")]
pub static VPN_EDITOR_PLUGIN_DESCRIPTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_EDITOR_PLUGIN_DESCRIPTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_EDITOR_PLUGIN_NAME")]
pub static VPN_EDITOR_PLUGIN_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_EDITOR_PLUGIN_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_EDITOR_PLUGIN_SERVICE")]
pub static VPN_EDITOR_PLUGIN_SERVICE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_EDITOR_PLUGIN_SERVICE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_CAN_PERSIST")]
pub static VPN_PLUGIN_CAN_PERSIST: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CAN_PERSIST)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_CONFIG_BANNER")]
pub static VPN_PLUGIN_CONFIG_BANNER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_BANNER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_CONFIG_EXT_GATEWAY")]
pub static VPN_PLUGIN_CONFIG_EXT_GATEWAY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_EXT_GATEWAY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_CONFIG_HAS_IP4")]
pub static VPN_PLUGIN_CONFIG_HAS_IP4: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_HAS_IP4)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_CONFIG_HAS_IP6")]
pub static VPN_PLUGIN_CONFIG_HAS_IP6: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_HAS_IP6)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_CONFIG_MTU")]
pub static VPN_PLUGIN_CONFIG_MTU: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_MTU)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_CONFIG_PROXY_PAC")]
pub static VPN_PLUGIN_CONFIG_PROXY_PAC: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_PROXY_PAC)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_CONFIG_TUNDEV")]
pub static VPN_PLUGIN_CONFIG_TUNDEV: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_TUNDEV)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_INFO_FILENAME")]
pub static VPN_PLUGIN_INFO_FILENAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_INFO_FILENAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_INFO_KEYFILE")]
pub static VPN_PLUGIN_INFO_KEYFILE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_INFO_KEYFILE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_INFO_KF_GROUP_CONNECTION")]
pub static VPN_PLUGIN_INFO_KF_GROUP_CONNECTION: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_INFO_KF_GROUP_CONNECTION)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_INFO_KF_GROUP_GNOME")]
pub static VPN_PLUGIN_INFO_KF_GROUP_GNOME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_INFO_KF_GROUP_GNOME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_INFO_KF_GROUP_LIBNM")]
pub static VPN_PLUGIN_INFO_KF_GROUP_LIBNM: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_INFO_KF_GROUP_LIBNM)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_INFO_NAME")]
pub static VPN_PLUGIN_INFO_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_INFO_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP4_CONFIG_ADDRESS")]
pub static VPN_PLUGIN_IP4_CONFIG_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP4_CONFIG_DNS")]
pub static VPN_PLUGIN_IP4_CONFIG_DNS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_DNS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP4_CONFIG_DOMAIN")]
pub static VPN_PLUGIN_IP4_CONFIG_DOMAIN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_DOMAIN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP4_CONFIG_DOMAINS")]
pub static VPN_PLUGIN_IP4_CONFIG_DOMAINS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_DOMAINS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP4_CONFIG_INT_GATEWAY")]
pub static VPN_PLUGIN_IP4_CONFIG_INT_GATEWAY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_INT_GATEWAY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP4_CONFIG_MSS")]
pub static VPN_PLUGIN_IP4_CONFIG_MSS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_MSS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP4_CONFIG_NBNS")]
pub static VPN_PLUGIN_IP4_CONFIG_NBNS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_NBNS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP4_CONFIG_NEVER_DEFAULT")]
pub static VPN_PLUGIN_IP4_CONFIG_NEVER_DEFAULT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_NEVER_DEFAULT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP4_CONFIG_PREFIX")]
pub static VPN_PLUGIN_IP4_CONFIG_PREFIX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_PREFIX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP4_CONFIG_PRESERVE_ROUTES")]
pub static VPN_PLUGIN_IP4_CONFIG_PRESERVE_ROUTES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_PRESERVE_ROUTES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP4_CONFIG_PTP")]
pub static VPN_PLUGIN_IP4_CONFIG_PTP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_PTP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP4_CONFIG_ROUTES")]
pub static VPN_PLUGIN_IP4_CONFIG_ROUTES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_ROUTES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP6_CONFIG_ADDRESS")]
pub static VPN_PLUGIN_IP6_CONFIG_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP6_CONFIG_DNS")]
pub static VPN_PLUGIN_IP6_CONFIG_DNS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_DNS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP6_CONFIG_DOMAIN")]
pub static VPN_PLUGIN_IP6_CONFIG_DOMAIN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_DOMAIN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP6_CONFIG_DOMAINS")]
pub static VPN_PLUGIN_IP6_CONFIG_DOMAINS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_DOMAINS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP6_CONFIG_INT_GATEWAY")]
pub static VPN_PLUGIN_IP6_CONFIG_INT_GATEWAY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_INT_GATEWAY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP6_CONFIG_MSS")]
pub static VPN_PLUGIN_IP6_CONFIG_MSS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_MSS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP6_CONFIG_NEVER_DEFAULT")]
pub static VPN_PLUGIN_IP6_CONFIG_NEVER_DEFAULT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_NEVER_DEFAULT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP6_CONFIG_PREFIX")]
pub static VPN_PLUGIN_IP6_CONFIG_PREFIX: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_PREFIX)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP6_CONFIG_PRESERVE_ROUTES")]
pub static VPN_PLUGIN_IP6_CONFIG_PRESERVE_ROUTES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_PRESERVE_ROUTES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP6_CONFIG_PTP")]
pub static VPN_PLUGIN_IP6_CONFIG_PTP: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_PTP)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_IP6_CONFIG_ROUTES")]
pub static VPN_PLUGIN_IP6_CONFIG_ROUTES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_ROUTES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_OLD_DBUS_SERVICE_NAME")]
pub static VPN_PLUGIN_OLD_DBUS_SERVICE_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_OLD_DBUS_SERVICE_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_PLUGIN_OLD_STATE")]
pub static VPN_PLUGIN_OLD_STATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_OLD_STATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_SERVICE_PLUGIN_DBUS_SERVICE_NAME")]
pub static VPN_SERVICE_PLUGIN_DBUS_SERVICE_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_SERVICE_PLUGIN_DBUS_SERVICE_NAME)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_SERVICE_PLUGIN_DBUS_WATCH_PEER")]
pub static VPN_SERVICE_PLUGIN_DBUS_WATCH_PEER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_SERVICE_PLUGIN_DBUS_WATCH_PEER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_VPN_SERVICE_PLUGIN_STATE")]
pub static VPN_SERVICE_PLUGIN_STATE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_VPN_SERVICE_PLUGIN_STATE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIFI_P2P_PEER_FLAGS")]
pub static WIFI_P2P_PEER_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIFI_P2P_PEER_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIFI_P2P_PEER_HW_ADDRESS")]
pub static WIFI_P2P_PEER_HW_ADDRESS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIFI_P2P_PEER_HW_ADDRESS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIFI_P2P_PEER_LAST_SEEN")]
pub static WIFI_P2P_PEER_LAST_SEEN: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIFI_P2P_PEER_LAST_SEEN)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIFI_P2P_PEER_MANUFACTURER")]
pub static WIFI_P2P_PEER_MANUFACTURER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIFI_P2P_PEER_MANUFACTURER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIFI_P2P_PEER_MODEL")]
pub static WIFI_P2P_PEER_MODEL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIFI_P2P_PEER_MODEL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIFI_P2P_PEER_MODEL_NUMBER")]
pub static WIFI_P2P_PEER_MODEL_NUMBER: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIFI_P2P_PEER_MODEL_NUMBER)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIFI_P2P_PEER_NAME")]
pub static WIFI_P2P_PEER_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIFI_P2P_PEER_NAME).to_str().unwrap()
    });
#[doc(alias = "NM_WIFI_P2P_PEER_SERIAL")]
pub static WIFI_P2P_PEER_SERIAL: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIFI_P2P_PEER_SERIAL)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIFI_P2P_PEER_STRENGTH")]
pub static WIFI_P2P_PEER_STRENGTH: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIFI_P2P_PEER_STRENGTH)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIFI_P2P_PEER_WFD_IES")]
pub static WIFI_P2P_PEER_WFD_IES: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIFI_P2P_PEER_WFD_IES)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIMAX_NSP_NAME")]
pub static WIMAX_NSP_NAME: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIMAX_NSP_NAME).to_str().unwrap()
    });
#[doc(alias = "NM_WIMAX_NSP_NETWORK_TYPE")]
pub static WIMAX_NSP_NETWORK_TYPE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIMAX_NSP_NETWORK_TYPE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIMAX_NSP_SIGNAL_QUALITY")]
pub static WIMAX_NSP_SIGNAL_QUALITY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIMAX_NSP_SIGNAL_QUALITY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIREGUARD_PEER_ATTR_ALLOWED_IPS")]
pub static WIREGUARD_PEER_ATTR_ALLOWED_IPS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIREGUARD_PEER_ATTR_ALLOWED_IPS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIREGUARD_PEER_ATTR_ENDPOINT")]
pub static WIREGUARD_PEER_ATTR_ENDPOINT: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIREGUARD_PEER_ATTR_ENDPOINT)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIREGUARD_PEER_ATTR_PERSISTENT_KEEPALIVE")]
pub static WIREGUARD_PEER_ATTR_PERSISTENT_KEEPALIVE: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIREGUARD_PEER_ATTR_PERSISTENT_KEEPALIVE)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIREGUARD_PEER_ATTR_PRESHARED_KEY")]
pub static WIREGUARD_PEER_ATTR_PRESHARED_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIREGUARD_PEER_ATTR_PRESHARED_KEY)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIREGUARD_PEER_ATTR_PRESHARED_KEY_FLAGS")]
pub static WIREGUARD_PEER_ATTR_PRESHARED_KEY_FLAGS: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIREGUARD_PEER_ATTR_PRESHARED_KEY_FLAGS)
            .to_str()
            .unwrap()
    });
#[doc(alias = "NM_WIREGUARD_PEER_ATTR_PUBLIC_KEY")]
pub static WIREGUARD_PEER_ATTR_PUBLIC_KEY: once_cell::sync::Lazy<&'static str> =
    once_cell::sync::Lazy::new(|| unsafe {
        CStr::from_ptr(ffi::NM_WIREGUARD_PEER_ATTR_PUBLIC_KEY)
            .to_str()
            .unwrap()
    });
