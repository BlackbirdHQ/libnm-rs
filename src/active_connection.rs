// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
use crate::ActivationStateFlags;
use crate::ActiveConnectionState;
#[cfg(any(feature = "v1_8", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
use crate::ActiveConnectionStateReason;
use crate::Device;
use crate::DhcpConfig;
use crate::IPConfig;
use crate::Object;
use crate::RemoteConnection;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMActiveConnection")]
    pub struct ActiveConnection(Object<ffi::NMActiveConnection, ffi::NMActiveConnectionClass>) @extends Object;

    match fn {
        type_ => || ffi::nm_active_connection_get_type(),
    }
}

pub const NONE_ACTIVE_CONNECTION: Option<&ActiveConnection> = None;

/// Trait containing all [`struct@ActiveConnection`] methods.
///
/// # Implementors
///
/// [`ActiveConnection`][struct@crate::ActiveConnection], [`VpnConnection`][struct@crate::VpnConnection]
pub trait ActiveConnectionExt: 'static {
    /// Gets the [`RemoteConnection`][crate::RemoteConnection] associated with `self`.
    ///
    /// # Returns
    ///
    /// the [`RemoteConnection`][crate::RemoteConnection] which this
    /// [`ActiveConnection`][crate::ActiveConnection] is an active instance of.
    #[doc(alias = "nm_active_connection_get_connection")]
    #[doc(alias = "get_connection")]
    fn connection(&self) -> Option<RemoteConnection>;

    /// Gets the [`Connection`][crate::Connection]'s type.
    ///
    /// # Returns
    ///
    /// the type of the [`Connection`][crate::Connection] that backs the [`ActiveConnection`][crate::ActiveConnection].
    /// This is the internal string used by the connection, and must not be modified.
    #[doc(alias = "nm_active_connection_get_connection_type")]
    #[doc(alias = "get_connection_type")]
    fn connection_type(&self) -> Option<glib::GString>;

    /// Whether the active connection is the default IPv4 one (that is, is used for
    /// the default IPv4 route and DNS information).
    ///
    /// # Returns
    ///
    /// [`true`] if the active connection is the default IPv4 connection
    #[doc(alias = "nm_active_connection_get_default")]
    #[doc(alias = "get_default")]
    fn is_default(&self) -> bool;

    /// Whether the active connection is the default IPv6 one (that is, is used for
    /// the default IPv6 route and DNS information).
    ///
    /// # Returns
    ///
    /// [`true`] if the active connection is the default IPv6 connection
    #[doc(alias = "nm_active_connection_get_default6")]
    #[doc(alias = "get_default6")]
    fn is_default6(&self) -> bool;

    /// Gets the `NMDevices` used for the active connections.
    ///
    /// # Returns
    ///
    /// the [`glib::PtrArray`][crate::glib::PtrArray] containing `NMDevices`.
    /// This is the internal copy used by the connection, and must not be modified.
    #[doc(alias = "nm_active_connection_get_devices")]
    #[doc(alias = "get_devices")]
    fn devices(&self) -> Vec<Device>;

    /// Gets the current IPv4 [`DhcpConfig`][crate::DhcpConfig] (if any) associated with the
    /// [`ActiveConnection`][crate::ActiveConnection].
    ///
    /// # Returns
    ///
    /// the IPv4 [`DhcpConfig`][crate::DhcpConfig], or [`None`] if the connection
    ///  does not use DHCP, or is not in the [`ActiveConnectionState::Activated`][crate::ActiveConnectionState::Activated]
    ///  state.
    #[doc(alias = "nm_active_connection_get_dhcp4_config")]
    #[doc(alias = "get_dhcp4_config")]
    fn dhcp4_config(&self) -> Option<DhcpConfig>;

    /// Gets the current IPv6 [`DhcpConfig`][crate::DhcpConfig] (if any) associated with the
    /// [`ActiveConnection`][crate::ActiveConnection].
    ///
    /// # Returns
    ///
    /// the IPv6 [`DhcpConfig`][crate::DhcpConfig], or [`None`] if the connection
    ///  does not use DHCPv6, or is not in the [`ActiveConnectionState::Activated`][crate::ActiveConnectionState::Activated]
    ///  state.
    #[doc(alias = "nm_active_connection_get_dhcp6_config")]
    #[doc(alias = "get_dhcp6_config")]
    fn dhcp6_config(&self) -> Option<DhcpConfig>;

    /// Gets the [`Connection`][crate::Connection]'s ID.
    ///
    /// # Returns
    ///
    /// the ID of the [`Connection`][crate::Connection] that backs the [`ActiveConnection`][crate::ActiveConnection].
    /// This is the internal string used by the connection, and must not be modified.
    #[doc(alias = "nm_active_connection_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> Option<glib::GString>;

    /// Gets the current IPv4 [`IPConfig`][crate::IPConfig] associated with the [`ActiveConnection`][crate::ActiveConnection].
    ///
    /// # Returns
    ///
    /// the IPv4 [`IPConfig`][crate::IPConfig], or [`None`] if the connection is
    ///  not in the [`ActiveConnectionState::Activated`][crate::ActiveConnectionState::Activated] state.
    #[doc(alias = "nm_active_connection_get_ip4_config")]
    #[doc(alias = "get_ip4_config")]
    fn ip4_config(&self) -> Option<IPConfig>;

    /// Gets the current IPv6 [`IPConfig`][crate::IPConfig] associated with the [`ActiveConnection`][crate::ActiveConnection].
    ///
    /// # Returns
    ///
    /// the IPv6 [`IPConfig`][crate::IPConfig], or [`None`] if the connection is
    ///  not in the [`ActiveConnectionState::Activated`][crate::ActiveConnectionState::Activated] state.
    #[doc(alias = "nm_active_connection_get_ip6_config")]
    #[doc(alias = "get_ip6_config")]
    fn ip6_config(&self) -> Option<IPConfig>;

    /// Gets the master [`Device`][crate::Device] of the connection.
    ///
    /// # Returns
    ///
    /// the master [`Device`][crate::Device] of the [`ActiveConnection`][crate::ActiveConnection].
    #[doc(alias = "nm_active_connection_get_master")]
    #[doc(alias = "get_master")]
    fn master(&self) -> Option<Device>;

    /// Gets the path of the "specific object" used at activation.
    ///
    /// Currently, there is no single method that will allow you to automatically turn
    /// this into an appropriate [`Object`][crate::Object]; you need to know what kind of object it
    /// is based on other information. (Eg, if `self` corresponds to a Wi-Fi
    /// connection, then the specific object will be an [`AccessPoint`][crate::AccessPoint], and you can
    /// resolve it with [`DeviceWifi::access_point_by_path()`][crate::DeviceWifi::access_point_by_path()].)
    ///
    /// # Returns
    ///
    /// the specific object's D-Bus path. This is the internal string used
    /// by the connection, and must not be modified.
    #[doc(alias = "nm_active_connection_get_specific_object_path")]
    #[doc(alias = "get_specific_object_path")]
    fn specific_object_path(&self) -> Option<glib::GString>;

    /// Gets the active connection's state.
    ///
    /// # Returns
    ///
    /// the state
    #[doc(alias = "nm_active_connection_get_state")]
    #[doc(alias = "get_state")]
    fn state(&self) -> ActiveConnectionState;

    /// Gets the active connection's state flags.
    ///
    /// # Returns
    ///
    /// the state flags
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "nm_active_connection_get_state_flags")]
    #[doc(alias = "get_state_flags")]
    fn state_flags(&self) -> ActivationStateFlags;

    /// Gets the reason for active connection's state.
    ///
    /// # Returns
    ///
    /// the reason
    #[cfg(any(feature = "v1_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
    #[doc(alias = "nm_active_connection_get_state_reason")]
    #[doc(alias = "get_state_reason")]
    fn state_reason(&self) -> ActiveConnectionStateReason;

    /// Gets the [`Connection`][crate::Connection]'s UUID.
    ///
    /// # Returns
    ///
    /// the UUID of the [`Connection`][crate::Connection] that backs the [`ActiveConnection`][crate::ActiveConnection].
    /// This is the internal string used by the connection, and must not be modified.
    #[doc(alias = "nm_active_connection_get_uuid")]
    #[doc(alias = "get_uuid")]
    fn uuid(&self) -> Option<glib::GString>;

    /// Whether the active connection is a VPN connection.
    ///
    /// # Returns
    ///
    /// [`true`] if the active connection is a VPN connection
    #[doc(alias = "nm_active_connection_get_vpn")]
    #[doc(alias = "get_vpn")]
    fn is_vpn(&self) -> bool;

    /// The active connection's type
    #[doc(alias = "type")]
    fn type_(&self) -> Option<glib::GString>;

    /// ## `state`
    /// the new state number ([`ActiveConnectionState`][crate::ActiveConnectionState])
    /// ## `reason`
    /// the state change reason ([`ActiveConnectionStateReason`][crate::ActiveConnectionStateReason])
    #[doc(alias = "state-changed")]
    fn connect_state_changed<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "connection")]
    fn connect_connection_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "default")]
    fn connect_default_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "default6")]
    fn connect_default6_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "devices")]
    fn connect_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "dhcp4-config")]
    fn connect_dhcp4_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "dhcp6-config")]
    fn connect_dhcp6_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "id")]
    fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "ip4-config")]
    fn connect_ip4_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "ip6-config")]
    fn connect_ip6_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "master")]
    fn connect_master_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "specific-object-path")]
    fn connect_specific_object_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "state")]
    fn connect_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "state-flags")]
    fn connect_state_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "type")]
    fn connect_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "uuid")]
    fn connect_uuid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "vpn")]
    fn connect_vpn_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ActiveConnection>> ActiveConnectionExt for O {
    fn connection(&self) -> Option<RemoteConnection> {
        unsafe {
            from_glib_none(ffi::nm_active_connection_get_connection(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn connection_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_active_connection_get_connection_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_default(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_active_connection_get_default(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_default6(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_active_connection_get_default6(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn devices(&self) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::nm_active_connection_get_devices(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn dhcp4_config(&self) -> Option<DhcpConfig> {
        unsafe {
            from_glib_none(ffi::nm_active_connection_get_dhcp4_config(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn dhcp6_config(&self) -> Option<DhcpConfig> {
        unsafe {
            from_glib_none(ffi::nm_active_connection_get_dhcp6_config(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_active_connection_get_id(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn ip4_config(&self) -> Option<IPConfig> {
        unsafe {
            from_glib_none(ffi::nm_active_connection_get_ip4_config(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn ip6_config(&self) -> Option<IPConfig> {
        unsafe {
            from_glib_none(ffi::nm_active_connection_get_ip6_config(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn master(&self) -> Option<Device> {
        unsafe {
            from_glib_none(ffi::nm_active_connection_get_master(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn specific_object_path(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_active_connection_get_specific_object_path(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn state(&self) -> ActiveConnectionState {
        unsafe {
            from_glib(ffi::nm_active_connection_get_state(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn state_flags(&self) -> ActivationStateFlags {
        unsafe {
            from_glib(ffi::nm_active_connection_get_state_flags(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
    fn state_reason(&self) -> ActiveConnectionStateReason {
        unsafe {
            from_glib(ffi::nm_active_connection_get_state_reason(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn uuid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_active_connection_get_uuid(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_vpn(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_active_connection_get_vpn(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn type_(&self) -> Option<glib::GString> {
        unsafe {
            let mut value = glib::Value::from_type(<glib::GString as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"type\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `type` getter")
        }
    }

    #[doc(alias = "state-changed")]
    fn connect_state_changed<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn state_changed_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P, u32, u32) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            state: libc::c_uint,
            reason: libc::c_uint,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                &ActiveConnection::from_glib_borrow(this).unsafe_cast_ref(),
                state,
                reason,
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"state-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    state_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "connection")]
    fn connect_connection_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_connection_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::connection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_connection_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "default")]
    fn connect_default_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::default\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_default_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "default6")]
    fn connect_default6_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default6_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::default6\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_default6_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "devices")]
    fn connect_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_devices_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::devices\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_devices_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "dhcp4-config")]
    fn connect_dhcp4_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dhcp4_config_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dhcp4-config\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dhcp4_config_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "dhcp6-config")]
    fn connect_dhcp6_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dhcp6_config_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dhcp6-config\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dhcp6_config_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "id")]
    fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<P: IsA<ActiveConnection>, F: Fn(&P) + 'static>(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "ip4-config")]
    fn connect_ip4_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ip4_config_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ip4-config\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ip4_config_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "ip6-config")]
    fn connect_ip6_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ip6_config_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ip6-config\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ip6_config_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "master")]
    fn connect_master_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_master_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::master\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_master_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "specific-object-path")]
    fn connect_specific_object_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_specific_object_path_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::specific-object-path\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_specific_object_path_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "state")]
    fn connect_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_state_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::state\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_state_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "state-flags")]
    fn connect_state_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_state_flags_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::state-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_state_flags_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "type")]
    fn connect_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_type_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "uuid")]
    fn connect_uuid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uuid_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::uuid\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_uuid_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "vpn")]
    fn connect_vpn_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vpn_trampoline<
            P: IsA<ActiveConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::NMActiveConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&ActiveConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vpn\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vpn_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for ActiveConnection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ActiveConnection")
    }
}
