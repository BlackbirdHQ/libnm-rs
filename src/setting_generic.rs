// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::translate::*;
use nm_sys;
use std::fmt;
use crate::Setting;

glib_wrapper! {
    pub struct SettingGeneric(Object<nm_sys::NMSettingGeneric, nm_sys::NMSettingGenericClass, SettingGenericClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_generic_get_type(),
    }
}

impl SettingGeneric {
    /// Creates a new `SettingGeneric` object with default values.
    ///
    /// # Returns
    ///
    /// the new empty `SettingGeneric` object
    pub fn new() -> SettingGeneric {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_generic_new()).unsafe_cast() }
    }
}

impl Default for SettingGeneric {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_GENERIC: Option<&SettingGeneric> = None;

impl fmt::Display for SettingGeneric {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingGeneric")
    }
}
