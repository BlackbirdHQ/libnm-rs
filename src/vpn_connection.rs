// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::ActiveConnection;
use crate::Object;
use crate::VpnConnectionState;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMVpnConnection")]
    pub struct VpnConnection(Object<ffi::NMVpnConnection, ffi::NMVpnConnectionClass>) @extends ActiveConnection, Object;

    match fn {
        type_ => || ffi::nm_vpn_connection_get_type(),
    }
}

impl VpnConnection {
    /// Gets the VPN login banner of the active [`VpnConnection`][crate::VpnConnection].
    ///
    /// # Returns
    ///
    /// the VPN login banner of the VPN connection. This is the internal
    /// string used by the connection, and must not be modified.
    #[doc(alias = "nm_vpn_connection_get_banner")]
    #[doc(alias = "get_banner")]
    pub fn banner(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_vpn_connection_get_banner(self.to_glib_none().0)) }
    }

    /// Gets the current [`VpnConnection`][crate::VpnConnection] state.
    ///
    /// # Returns
    ///
    /// the VPN state of the active VPN connection.
    #[doc(alias = "nm_vpn_connection_get_vpn_state")]
    #[doc(alias = "get_vpn_state")]
    pub fn vpn_state(&self) -> VpnConnectionState {
        unsafe { from_glib(ffi::nm_vpn_connection_get_vpn_state(self.to_glib_none().0)) }
    }

    #[doc(alias = "vpn-state-changed")]
    pub fn connect_vpn_state_changed<F: Fn(&Self, u32, u32) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn vpn_state_changed_trampoline<
            F: Fn(&VpnConnection, u32, u32) + 'static,
        >(
            this: *mut ffi::NMVpnConnection,
            object: libc::c_uint,
            p0: libc::c_uint,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), object, p0)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"vpn-state-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    vpn_state_changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "banner")]
    pub fn connect_banner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_banner_trampoline<F: Fn(&VpnConnection) + 'static>(
            this: *mut ffi::NMVpnConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::banner\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_banner_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "vpn-state")]
    pub fn connect_vpn_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vpn_state_trampoline<F: Fn(&VpnConnection) + 'static>(
            this: *mut ffi::NMVpnConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vpn-state\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vpn_state_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for VpnConnection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("VpnConnection")
    }
}
