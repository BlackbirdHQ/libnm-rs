// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib_sys;
use nm_sys;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use std::mem::transmute;
use Device;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use IPTunnelFlags;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use IPTunnelMode;
use Object;

glib_wrapper! {
    pub struct DeviceIPTunnel(Object<nm_sys::NMDeviceIPTunnel, nm_sys::NMDeviceIPTunnelClass, DeviceIPTunnelClass>) @extends Device, Object;

    match fn {
        get_type => || nm_sys::nm_device_ip_tunnel_get_type(),
    }
}

impl DeviceIPTunnel {
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the maximum permitted encapsulation level
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_encapsulation_limit(&self) -> u8 {
        unsafe { nm_sys::nm_device_ip_tunnel_get_encapsulation_limit(self.to_glib_none().0) }
    }

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the tunnel flags
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn get_flags(&self) -> IPTunnelFlags {
        unsafe { from_glib(nm_sys::nm_device_ip_tunnel_get_flags(self.to_glib_none().0)) }
    }

    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the flow label assigned to tunnel packets
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_flow_label(&self) -> u32 {
        unsafe { nm_sys::nm_device_ip_tunnel_get_flow_label(self.to_glib_none().0) }
    }

    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the key used for incoming packets
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_input_key(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_device_ip_tunnel_get_input_key(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the local endpoint of the tunnel
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_local(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_device_ip_tunnel_get_local(self.to_glib_none().0)) }
    }

    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the tunneling mode
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_mode(&self) -> IPTunnelMode {
        unsafe { from_glib(nm_sys::nm_device_ip_tunnel_get_mode(self.to_glib_none().0)) }
    }

    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the key used for outgoing packets
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_output_key(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_device_ip_tunnel_get_output_key(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the device's parent device
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_parent(&self) -> Option<Device> {
        unsafe {
            from_glib_none(nm_sys::nm_device_ip_tunnel_get_parent(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// whether path MTU discovery is enabled
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_path_mtu_discovery(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_device_ip_tunnel_get_path_mtu_discovery(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the remote endpoint of the tunnel
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_remote(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_device_ip_tunnel_get_remote(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// type of service (IPv4) or traffic class (IPv6) assigned
    /// to tunneled packets.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_tos(&self) -> u8 {
        unsafe { nm_sys::nm_device_ip_tunnel_get_tos(self.to_glib_none().0) }
    }

    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the TTL assigned to tunneled packets
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_ttl(&self) -> u8 {
        unsafe { nm_sys::nm_device_ip_tunnel_get_ttl(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_encapsulation_limit_notify<F: Fn(&DeviceIPTunnel) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_encapsulation_limit_trampoline<
            F: Fn(&DeviceIPTunnel) + 'static,
        >(
            this: *mut nm_sys::NMDeviceIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::encapsulation-limit\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_encapsulation_limit_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn connect_property_flags_notify<F: Fn(&DeviceIPTunnel) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_flags_trampoline<F: Fn(&DeviceIPTunnel) + 'static>(
            this: *mut nm_sys::NMDeviceIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_flow_label_notify<F: Fn(&DeviceIPTunnel) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_flow_label_trampoline<F: Fn(&DeviceIPTunnel) + 'static>(
            this: *mut nm_sys::NMDeviceIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::flow-label\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_flow_label_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_input_key_notify<F: Fn(&DeviceIPTunnel) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_input_key_trampoline<F: Fn(&DeviceIPTunnel) + 'static>(
            this: *mut nm_sys::NMDeviceIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::input-key\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_input_key_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_local_notify<F: Fn(&DeviceIPTunnel) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_local_trampoline<F: Fn(&DeviceIPTunnel) + 'static>(
            this: *mut nm_sys::NMDeviceIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::local\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_local_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_mode_notify<F: Fn(&DeviceIPTunnel) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_mode_trampoline<F: Fn(&DeviceIPTunnel) + 'static>(
            this: *mut nm_sys::NMDeviceIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_output_key_notify<F: Fn(&DeviceIPTunnel) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_output_key_trampoline<F: Fn(&DeviceIPTunnel) + 'static>(
            this: *mut nm_sys::NMDeviceIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::output-key\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_output_key_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_parent_notify<F: Fn(&DeviceIPTunnel) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<F: Fn(&DeviceIPTunnel) + 'static>(
            this: *mut nm_sys::NMDeviceIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parent_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_path_mtu_discovery_notify<F: Fn(&DeviceIPTunnel) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_path_mtu_discovery_trampoline<
            F: Fn(&DeviceIPTunnel) + 'static,
        >(
            this: *mut nm_sys::NMDeviceIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::path-mtu-discovery\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_path_mtu_discovery_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_remote_notify<F: Fn(&DeviceIPTunnel) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_remote_trampoline<F: Fn(&DeviceIPTunnel) + 'static>(
            this: *mut nm_sys::NMDeviceIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::remote\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_remote_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_tos_notify<F: Fn(&DeviceIPTunnel) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_tos_trampoline<F: Fn(&DeviceIPTunnel) + 'static>(
            this: *mut nm_sys::NMDeviceIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tos\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tos_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_ttl_notify<F: Fn(&DeviceIPTunnel) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_ttl_trampoline<F: Fn(&DeviceIPTunnel) + 'static>(
            this: *mut nm_sys::NMDeviceIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ttl\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ttl_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DeviceIPTunnel {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DeviceIPTunnel")
    }
}
