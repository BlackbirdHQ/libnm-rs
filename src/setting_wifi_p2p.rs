// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::{Setting, SettingWirelessSecurityWpsMethod};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    /// Wi-Fi P2P Settings
    ///
    /// ## Properties
    ///
    ///
    /// #### `peer`
    ///  The P2P device that should be connected to. Currently, this is the only
    /// way to create or join a group.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `wfd-ies`
    ///  The Wi-Fi Display (WFD) Information Elements (IEs) to set.
    ///
    /// Wi-Fi Display requires a protocol specific information element to be
    /// set in certain Wi-Fi frames. These can be specified here for the
    /// purpose of establishing a connection.
    /// This setting is only useful when implementing a Wi-Fi Display client.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `wps-method`
    ///  Flags indicating which mode of WPS is to be used.
    ///
    /// There's little point in changing the default setting as NetworkManager will
    /// automatically determine the best method to use.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Setting</h4></summary>
    ///
    ///
    /// #### `name`
    ///  The setting's name, which uniquely identifies the setting within the
    /// connection. Each setting type has a name unique to that type, for
    /// example "ppp" or "802-11-wireless" or "802-3-ethernet".
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`SettingExt`][trait@crate::prelude::SettingExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMSettingWifiP2P")]
    pub struct SettingWifiP2P(Object<ffi::NMSettingWifiP2P, ffi::NMSettingWifiP2PClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_wifi_p2p_get_type(),
    }
}

impl SettingWifiP2P {
    /// Creates a new [`SettingWifiP2P`][crate::SettingWifiP2P] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingWifiP2P`][crate::SettingWifiP2P] object
    #[doc(alias = "nm_setting_wifi_p2p_new")]
    pub fn new() -> SettingWifiP2P {
        unsafe { Setting::from_glib_full(ffi::nm_setting_wifi_p2p_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the [`peer`][struct@crate::SettingWifiP2P#peer] property of the setting
    #[doc(alias = "nm_setting_wifi_p2p_get_peer")]
    #[doc(alias = "get_peer")]
    pub fn peer(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_wifi_p2p_get_peer(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the `NMSettingWiFiP2P:wfd-ies` property of the setting
    #[doc(alias = "nm_setting_wifi_p2p_get_wfd_ies")]
    #[doc(alias = "get_wfd_ies")]
    pub fn wfd_ies(&self) -> Option<glib::Bytes> {
        unsafe { from_glib_none(ffi::nm_setting_wifi_p2p_get_wfd_ies(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`wps-method`][struct@crate::SettingWifiP2P#wps-method] property of the setting
    #[doc(alias = "nm_setting_wifi_p2p_get_wps_method")]
    #[doc(alias = "get_wps_method")]
    pub fn wps_method(&self) -> SettingWirelessSecurityWpsMethod {
        unsafe {
            from_glib(ffi::nm_setting_wifi_p2p_get_wps_method(
                self.to_glib_none().0,
            ))
        }
    }

    /// The P2P device that should be connected to. Currently, this is the only
    /// way to create or join a group.
    #[cfg(any(feature = "v1_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_16")))]
    pub fn set_peer(&self, peer: Option<&str>) {
        glib::ObjectExt::set_property(self, "peer", &peer)
    }

    /// The Wi-Fi Display (WFD) Information Elements (IEs) to set.
    ///
    /// Wi-Fi Display requires a protocol specific information element to be
    /// set in certain Wi-Fi frames. These can be specified here for the
    /// purpose of establishing a connection.
    /// This setting is only useful when implementing a Wi-Fi Display client.
    #[cfg(any(feature = "v1_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_16")))]
    #[doc(alias = "wfd-ies")]
    pub fn set_wfd_ies(&self, wfd_ies: Option<&glib::Bytes>) {
        glib::ObjectExt::set_property(self, "wfd-ies", &wfd_ies)
    }

    /// Flags indicating which mode of WPS is to be used.
    ///
    /// There's little point in changing the default setting as NetworkManager will
    /// automatically determine the best method to use.
    #[cfg(any(feature = "v1_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_16")))]
    #[doc(alias = "wps-method")]
    pub fn set_wps_method(&self, wps_method: u32) {
        glib::ObjectExt::set_property(self, "wps-method", &wps_method)
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_16")))]
    #[doc(alias = "peer")]
    pub fn connect_peer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_peer_trampoline<F: Fn(&SettingWifiP2P) + 'static>(
            this: *mut ffi::NMSettingWifiP2P,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::peer\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_peer_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_16")))]
    #[doc(alias = "wfd-ies")]
    pub fn connect_wfd_ies_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wfd_ies_trampoline<F: Fn(&SettingWifiP2P) + 'static>(
            this: *mut ffi::NMSettingWifiP2P,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wfd-ies\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wfd_ies_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_16")))]
    #[doc(alias = "wps-method")]
    pub fn connect_wps_method_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wps_method_trampoline<F: Fn(&SettingWifiP2P) + 'static>(
            this: *mut ffi::NMSettingWifiP2P,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wps-method\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wps_method_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_16", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_16")))]
impl Default for SettingWifiP2P {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingWifiP2P {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingWifiP2P")
    }
}
