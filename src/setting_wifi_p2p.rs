// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib::object::Cast;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib::Value;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib_sys;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use gobject_sys;
use nm_sys;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use std::mem::transmute;
use Setting;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use SettingWirelessSecurityWpsMethod;

glib_wrapper! {
    pub struct SettingWifiP2P(Object<nm_sys::NMSettingWifiP2P, nm_sys::NMSettingWifiP2PClass, SettingWifiP2PClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_wifi_p2p_get_type(),
    }
}

impl SettingWifiP2P {
    /// Creates a new `SettingWifiP2P` object with default values.
    ///
    /// Feature: `v1_16`
    ///
    ///
    /// # Returns
    ///
    /// the new empty `SettingWifiP2P` object
    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn new() -> SettingWifiP2P {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_wifi_p2p_new()).unsafe_cast() }
    }

    ///
    /// Feature: `v1_16`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingWifiP2P:peer` property of the setting
    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn get_peer(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_setting_wifi_p2p_get_peer(self.to_glib_none().0)) }
    }

    ///
    /// Feature: `v1_16`
    ///
    ///
    /// # Returns
    ///
    /// the `NMSettingWiFiP2P:wfd-ies` property of the setting
    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn get_wfd_ies(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_wifi_p2p_get_wfd_ies(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_16`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingWifiP2P:wps-method` property of the setting
    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn get_wps_method(&self) -> SettingWirelessSecurityWpsMethod {
        unsafe {
            from_glib(nm_sys::nm_setting_wifi_p2p_get_wps_method(
                self.to_glib_none().0,
            ))
        }
    }

    /// The P2P device that should be connected to. Currently this is the only
    /// way to create or join a group.
    ///
    /// Feature: `v1_16`
    ///
    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn set_property_peer(&self, peer: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"peer\0".as_ptr() as *const _,
                Value::from(peer).to_glib_none().0,
            );
        }
    }

    /// The Wi-Fi Display (WFD) Information Elements (IEs) to set.
    ///
    /// Wi-Fi Display requires a protocol specific information element to be
    /// set in certain Wi-Fi frames. These can be specified here for the
    /// purpose of establishing a connection.
    /// This setting is only useful when implementing a Wi-Fi Display client.
    ///
    /// Feature: `v1_16`
    ///
    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn set_property_wfd_ies(&self, wfd_ies: Option<&glib::Bytes>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wfd-ies\0".as_ptr() as *const _,
                Value::from(wfd_ies).to_glib_none().0,
            );
        }
    }

    /// Flags indicating which mode of WPS is to be used.
    ///
    /// There's little point in changing the default setting as NetworkManager will
    /// automatically determine the best method to use.
    ///
    /// Feature: `v1_16`
    ///
    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn set_property_wps_method(&self, wps_method: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wps-method\0".as_ptr() as *const _,
                Value::from(&wps_method).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn connect_property_peer_notify<F: Fn(&SettingWifiP2P) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_peer_trampoline<F: Fn(&SettingWifiP2P) + 'static>(
            this: *mut nm_sys::NMSettingWifiP2P,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::peer\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_peer_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn connect_property_wfd_ies_notify<F: Fn(&SettingWifiP2P) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wfd_ies_trampoline<F: Fn(&SettingWifiP2P) + 'static>(
            this: *mut nm_sys::NMSettingWifiP2P,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wfd-ies\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wfd_ies_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn connect_property_wps_method_notify<F: Fn(&SettingWifiP2P) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wps_method_trampoline<F: Fn(&SettingWifiP2P) + 'static>(
            this: *mut nm_sys::NMSettingWifiP2P,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wps-method\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wps_method_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_16", feature = "dox"))]
impl Default for SettingWifiP2P {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingWifiP2P {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingWifiP2P")
    }
}
