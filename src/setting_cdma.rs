// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::Value;
use glib_sys;
use gobject_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Setting;
use SettingSecretFlags;

glib_wrapper! {
    pub struct SettingCdma(Object<nm_sys::NMSettingCdma, nm_sys::NMSettingCdmaClass, SettingCdmaClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_cdma_get_type(),
    }
}

impl SettingCdma {
    pub fn new() -> SettingCdma {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_cdma_new()).unsafe_cast() }
    }
}

impl Default for SettingCdma {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_CDMA: Option<&SettingCdma> = None;

pub trait SettingCdmaExt: 'static {
    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_mtu(&self) -> u32;

    fn get_number(&self) -> Option<GString>;

    fn get_password(&self) -> Option<GString>;

    fn get_password_flags(&self) -> SettingSecretFlags;

    fn get_username(&self) -> Option<GString>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_mtu(&self, mtu: u32);

    fn set_property_number(&self, number: Option<&str>);

    fn set_property_password(&self, password: Option<&str>);

    fn set_property_password_flags(&self, password_flags: SettingSecretFlags);

    fn set_property_username(&self, username: Option<&str>);

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_number_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_password_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_username_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingCdma>> SettingCdmaExt for O {
    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_mtu(&self) -> u32 {
        unsafe { nm_sys::nm_setting_cdma_get_mtu(self.as_ref().to_glib_none().0) }
    }

    fn get_number(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_cdma_get_number(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_password(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_cdma_get_password(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_password_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(nm_sys::nm_setting_cdma_get_password_flags(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_username(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_cdma_get_username(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_mtu(&self, mtu: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mtu\0".as_ptr() as *const _,
                Value::from(&mtu).to_glib_none().0,
            );
        }
    }

    fn set_property_number(&self, number: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"number\0".as_ptr() as *const _,
                Value::from(number).to_glib_none().0,
            );
        }
    }

    fn set_property_password(&self, password: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"password\0".as_ptr() as *const _,
                Value::from(password).to_glib_none().0,
            );
        }
    }

    fn set_property_password_flags(&self, password_flags: SettingSecretFlags) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"password-flags\0".as_ptr() as *const _,
                Value::from(&password_flags).to_glib_none().0,
            );
        }
    }

    fn set_property_username(&self, username: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"username\0".as_ptr() as *const _,
                Value::from(username).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mtu_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingCdma,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingCdma>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingCdma::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mtu\0".as_ptr() as *const _,
                Some(transmute(notify_mtu_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_number_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_number_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingCdma,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingCdma>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingCdma::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::number\0".as_ptr() as *const _,
                Some(transmute(notify_number_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_password_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_password_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingCdma,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingCdma>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingCdma::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::password\0".as_ptr() as *const _,
                Some(transmute(notify_password_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_password_flags_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingCdma,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingCdma>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingCdma::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::password-flags\0".as_ptr() as *const _,
                Some(transmute(
                    notify_password_flags_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_username_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_username_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingCdma,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingCdma>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingCdma::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::username\0".as_ptr() as *const _,
                Some(transmute(notify_username_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingCdma {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingCdma")
    }
}
