// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Connection;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "NMVpnEditor")]
    pub struct VpnEditor(Interface<ffi::NMVpnEditor, ffi::NMVpnEditorInterface>);

    match fn {
        type_ => || ffi::nm_vpn_editor_get_type(),
    }
}

impl VpnEditor {
    pub const NONE: Option<&'static VpnEditor> = None;
}

/// Trait containing all [`struct@VpnEditor`] methods.
///
/// # Implementors
///
/// [`VpnEditor`][struct@crate::VpnEditor]
pub trait VpnEditorExt: 'static {
    #[doc(alias = "nm_vpn_editor_get_widget")]
    #[doc(alias = "get_widget")]
    fn widget(&self) -> Option<glib::Object>;

    #[doc(alias = "nm_vpn_editor_update_connection")]
    fn update_connection(&self, connection: &impl IsA<Connection>) -> Result<(), glib::Error>;

    #[doc(alias = "changed")]
    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<VpnEditor>> VpnEditorExt for O {
    fn widget(&self) -> Option<glib::Object> {
        unsafe {
            from_glib_none(ffi::nm_vpn_editor_get_widget(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn update_connection(&self, connection: &impl IsA<Connection>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::nm_vpn_editor_update_connection(
                self.as_ref().to_glib_none().0,
                connection.as_ref().to_glib_none().0,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<P: IsA<VpnEditor>, F: Fn(&P) + 'static>(
            this: *mut ffi::NMVpnEditor,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(VpnEditor::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for VpnEditor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("VpnEditor")
    }
}
