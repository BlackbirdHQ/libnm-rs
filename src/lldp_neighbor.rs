// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::translate::*;
use nm_sys;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use std::mem;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct LldpNeighbor(Shared<nm_sys::NMLldpNeighbor>);

    match fn {
        ref => |ptr| nm_sys::nm_lldp_neighbor_ref(ptr),
        unref => |ptr| nm_sys::nm_lldp_neighbor_unref(ptr),
        get_type => || nm_sys::nm_lldp_neighbor_get_type(),
    }
}

impl LldpNeighbor {
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn new() -> LldpNeighbor {
        unsafe { from_glib_full(nm_sys::nm_lldp_neighbor_new()) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_attr_type(&self, name: &str) -> Option<glib::VariantType> {
        unsafe {
            from_glib_none(nm_sys::nm_lldp_neighbor_get_attr_type(
                self.to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_attr_uint_value(&self, name: &str) -> Option<u32> {
        unsafe {
            let mut out_value = mem::MaybeUninit::uninit();
            let ret = from_glib(nm_sys::nm_lldp_neighbor_get_attr_uint_value(
                self.to_glib_none().0,
                name.to_glib_none().0,
                out_value.as_mut_ptr(),
            ));
            let out_value = out_value.assume_init();
            if ret {
                Some(out_value)
            } else {
                None
            }
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_attr_value(&self, name: &str) -> Option<glib::Variant> {
        unsafe {
            from_glib_none(nm_sys::nm_lldp_neighbor_get_attr_value(
                self.to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }
}

#[cfg(any(feature = "v1_2", feature = "dox"))]
impl Default for LldpNeighbor {
    fn default() -> Self {
        Self::new()
    }
}
