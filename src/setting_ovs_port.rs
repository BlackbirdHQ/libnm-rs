// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::object::Cast;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::Value;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib_sys;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use gobject_sys;
use nm_sys;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use std::mem::transmute;
use Setting;

glib_wrapper! {
    pub struct SettingOvsPort(Object<nm_sys::NMSettingOvsPort, nm_sys::NMSettingOvsPortClass, SettingOvsPortClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_ovs_port_get_type(),
    }
}

impl SettingOvsPort {
    /// Creates a new `SettingOvsPort` object with default values.
    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// the new empty `SettingOvsPort` object
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn new() -> SettingOvsPort {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_ovs_port_new()).unsafe_cast() }
    }

    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingOvsPort:bond-downdelay` property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn get_bond_downdelay(&self) -> u32 {
        unsafe { nm_sys::nm_setting_ovs_port_get_bond_downdelay(self.to_glib_none().0) }
    }

    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingOvsPort:bond-mode` property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn get_bond_mode(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_ovs_port_get_bond_mode(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingOvsPort:bond-updelay` property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn get_bond_updelay(&self) -> u32 {
        unsafe { nm_sys::nm_setting_ovs_port_get_bond_updelay(self.to_glib_none().0) }
    }

    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingOvsPort:lacp` property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn get_lacp(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_setting_ovs_port_get_lacp(self.to_glib_none().0)) }
    }

    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingOvsPort:tag` property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn get_tag(&self) -> u32 {
        unsafe { nm_sys::nm_setting_ovs_port_get_tag(self.to_glib_none().0) }
    }

    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingOvsPort:vlan-mode` property of the setting
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn get_vlan_mode(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_ovs_port_get_vlan_mode(
                self.to_glib_none().0,
            ))
        }
    }

    /// The time port must be inactive in order to be considered down.
    ///
    /// Feature: `v1_10`
    ///
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn set_property_bond_downdelay(&self, bond_downdelay: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"bond-downdelay\0".as_ptr() as *const _,
                Value::from(&bond_downdelay).to_glib_none().0,
            );
        }
    }

    /// Bonding mode. One of "active-backup", "balance-slb", or "balance-tcp".
    ///
    /// Feature: `v1_10`
    ///
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn set_property_bond_mode(&self, bond_mode: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"bond-mode\0".as_ptr() as *const _,
                Value::from(bond_mode).to_glib_none().0,
            );
        }
    }

    /// The time port must be active before it starts forwarding traffic.
    ///
    /// Feature: `v1_10`
    ///
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn set_property_bond_updelay(&self, bond_updelay: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"bond-updelay\0".as_ptr() as *const _,
                Value::from(&bond_updelay).to_glib_none().0,
            );
        }
    }

    /// LACP mode. One of "active", "off", or "passive".
    ///
    /// Feature: `v1_10`
    ///
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn set_property_lacp(&self, lacp: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"lacp\0".as_ptr() as *const _,
                Value::from(lacp).to_glib_none().0,
            );
        }
    }

    /// The VLAN tag in the range 0-4095.
    ///
    /// Feature: `v1_10`
    ///
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn set_property_tag(&self, tag: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"tag\0".as_ptr() as *const _,
                Value::from(&tag).to_glib_none().0,
            );
        }
    }

    /// The VLAN mode. One of "access", "native-tagged", "native-untagged",
    /// "trunk" or unset.
    ///
    /// Feature: `v1_10`
    ///
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn set_property_vlan_mode(&self, vlan_mode: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"vlan-mode\0".as_ptr() as *const _,
                Value::from(vlan_mode).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connect_property_bond_downdelay_notify<F: Fn(&SettingOvsPort) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_bond_downdelay_trampoline<F: Fn(&SettingOvsPort) + 'static>(
            this: *mut nm_sys::NMSettingOvsPort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::bond-downdelay\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_bond_downdelay_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connect_property_bond_mode_notify<F: Fn(&SettingOvsPort) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_bond_mode_trampoline<F: Fn(&SettingOvsPort) + 'static>(
            this: *mut nm_sys::NMSettingOvsPort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::bond-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_bond_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connect_property_bond_updelay_notify<F: Fn(&SettingOvsPort) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_bond_updelay_trampoline<F: Fn(&SettingOvsPort) + 'static>(
            this: *mut nm_sys::NMSettingOvsPort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::bond-updelay\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_bond_updelay_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connect_property_lacp_notify<F: Fn(&SettingOvsPort) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_lacp_trampoline<F: Fn(&SettingOvsPort) + 'static>(
            this: *mut nm_sys::NMSettingOvsPort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::lacp\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_lacp_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connect_property_tag_notify<F: Fn(&SettingOvsPort) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_tag_trampoline<F: Fn(&SettingOvsPort) + 'static>(
            this: *mut nm_sys::NMSettingOvsPort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tag\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tag_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connect_property_vlan_mode_notify<F: Fn(&SettingOvsPort) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_vlan_mode_trampoline<F: Fn(&SettingOvsPort) + 'static>(
            this: *mut nm_sys::NMSettingOvsPort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vlan-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vlan_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
impl Default for SettingOvsPort {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingOvsPort {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingOvsPort")
    }
}
