// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::Value;
use glib_sys;
use gobject_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Setting;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use TeamLinkWatcher;

glib_wrapper! {
    pub struct SettingTeamPort(Object<nm_sys::NMSettingTeamPort, nm_sys::NMSettingTeamPortClass, SettingTeamPortClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_team_port_get_type(),
    }
}

impl SettingTeamPort {
    /// Creates a new `SettingTeamPort` object with default values.
    ///
    /// # Returns
    ///
    /// the new empty `SettingTeamPort` object
    pub fn new() -> SettingTeamPort {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_team_port_new()).unsafe_cast() }
    }
}

impl Default for SettingTeamPort {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_TEAM_PORT: Option<&SettingTeamPort> = None;

/// Trait containing all `SettingTeamPort` methods.
///
/// # Implementors
///
/// [`SettingTeamPort`](struct.SettingTeamPort.html)
pub trait SettingTeamPortExt: 'static {
    /// Appends a new link watcher to the setting.
    ///
    /// Feature: `v1_12`
    ///
    /// ## `link_watcher`
    /// the link watcher to add
    ///
    /// # Returns
    ///
    /// `true` if the link watcher is added; `false` if an identical link
    /// watcher was already there.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn add_link_watcher(&self, link_watcher: &TeamLinkWatcher) -> bool;

    /// Removes all configured link watchers.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn clear_link_watchers(&self);

    ///
    /// # Returns
    ///
    /// the `SettingTeamPort:config` property of the setting
    fn get_config(&self) -> Option<GString>;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingTeamPort:lacp-key` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_lacp_key(&self) -> i32;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingTeamPort:lacp-prio` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_lacp_prio(&self) -> i32;

    ///
    /// Feature: `v1_12`
    ///
    /// ## `idx`
    /// index number of the link watcher to return
    ///
    /// # Returns
    ///
    /// the link watcher at index `idx`.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_link_watcher(&self, idx: u32) -> Option<TeamLinkWatcher>;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the number of configured link watchers
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_num_link_watchers(&self) -> u32;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingTeamPort:prio` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_prio(&self) -> i32;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingTeamPort:queue_id` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_queue_id(&self) -> i32;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the `SettingTeamPort:sticky` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_sticky(&self) -> bool;

    /// Removes the link watcher at index `idx`.
    ///
    /// Feature: `v1_12`
    ///
    /// ## `idx`
    /// index number of the link watcher to remove
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_link_watcher(&self, idx: u32);

    /// Removes the link watcher entry matching link_watcher.
    ///
    /// Feature: `v1_12`
    ///
    /// ## `link_watcher`
    /// the link watcher to remove
    ///
    /// # Returns
    ///
    /// `true` if the link watcher was found and removed, `false` otherwise.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_link_watcher_by_value(&self, link_watcher: &TeamLinkWatcher) -> bool;

    /// The JSON configuration for the team port. The property should contain raw
    /// JSON configuration data suitable for teamd, because the value is passed
    /// directly to teamd. If not specified, the default configuration is
    /// used. See man teamd.conf for the format details.
    fn set_property_config(&self, config: Option<&str>);

    /// Corresponds to the teamd ports.PORTIFNAME.lacp_key.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_lacp_key(&self, lacp_key: i32);

    /// Corresponds to the teamd ports.PORTIFNAME.lacp_prio.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_lacp_prio(&self, lacp_prio: i32);

    /// Corresponds to the teamd ports.PORTIFNAME.prio.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_prio(&self, prio: i32);

    /// Corresponds to the teamd ports.PORTIFNAME.queue_id.
    /// When set to -1 means the parameter is skipped from the json config.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_queue_id(&self, queue_id: i32);

    /// Corresponds to the teamd ports.PORTIFNAME.sticky.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_sticky(&self, sticky: bool);

    fn connect_property_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_lacp_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_lacp_prio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_prio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_queue_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_sticky_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingTeamPort>> SettingTeamPortExt for O {
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn add_link_watcher(&self, link_watcher: &TeamLinkWatcher) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_team_port_add_link_watcher(
                self.as_ref().to_glib_none().0,
                link_watcher.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn clear_link_watchers(&self) {
        unsafe {
            nm_sys::nm_setting_team_port_clear_link_watchers(self.as_ref().to_glib_none().0);
        }
    }

    fn get_config(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_team_port_get_config(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_lacp_key(&self) -> i32 {
        unsafe { nm_sys::nm_setting_team_port_get_lacp_key(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_lacp_prio(&self) -> i32 {
        unsafe { nm_sys::nm_setting_team_port_get_lacp_prio(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_link_watcher(&self, idx: u32) -> Option<TeamLinkWatcher> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_team_port_get_link_watcher(
                self.as_ref().to_glib_none().0,
                idx,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_num_link_watchers(&self) -> u32 {
        unsafe {
            nm_sys::nm_setting_team_port_get_num_link_watchers(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_prio(&self) -> i32 {
        unsafe { nm_sys::nm_setting_team_port_get_prio(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_queue_id(&self) -> i32 {
        unsafe { nm_sys::nm_setting_team_port_get_queue_id(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_sticky(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_team_port_get_sticky(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_link_watcher(&self, idx: u32) {
        unsafe {
            nm_sys::nm_setting_team_port_remove_link_watcher(self.as_ref().to_glib_none().0, idx);
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_link_watcher_by_value(&self, link_watcher: &TeamLinkWatcher) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_team_port_remove_link_watcher_by_value(
                self.as_ref().to_glib_none().0,
                link_watcher.to_glib_none().0,
            ))
        }
    }

    fn set_property_config(&self, config: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"config\0".as_ptr() as *const _,
                Value::from(config).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_lacp_key(&self, lacp_key: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"lacp-key\0".as_ptr() as *const _,
                Value::from(&lacp_key).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_lacp_prio(&self, lacp_prio: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"lacp-prio\0".as_ptr() as *const _,
                Value::from(&lacp_prio).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_prio(&self, prio: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"prio\0".as_ptr() as *const _,
                Value::from(&prio).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_queue_id(&self, queue_id: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"queue-id\0".as_ptr() as *const _,
                Value::from(&queue_id).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_sticky(&self, sticky: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"sticky\0".as_ptr() as *const _,
                Value::from(&sticky).to_glib_none().0,
            );
        }
    }

    fn connect_property_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_config_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeamPort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeamPort>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeamPort::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::config\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_config_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_lacp_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_lacp_key_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeamPort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeamPort>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeamPort::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::lacp-key\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_lacp_key_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_lacp_prio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_lacp_prio_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeamPort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeamPort>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeamPort::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::lacp-prio\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_lacp_prio_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_prio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_prio_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeamPort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeamPort>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeamPort::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::prio\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_prio_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_queue_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_queue_id_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeamPort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeamPort>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeamPort::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::queue-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_queue_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_sticky_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sticky_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeamPort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeamPort>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeamPort::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::sticky\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_sticky_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingTeamPort {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingTeamPort")
    }
}
