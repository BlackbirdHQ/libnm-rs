// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use crate::VpnEditorPlugin;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use glib::object::IsA;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use glib::translate::*;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use std::mem::transmute;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use std::ptr;

glib::wrapper! {
    #[doc(alias = "NMVpnPluginInfo")]
    pub struct VpnPluginInfo(Object<ffi::NMVpnPluginInfo, ffi::NMVpnPluginInfoClass>);

    match fn {
        type_ => || ffi::nm_vpn_plugin_info_get_type(),
    }
}

impl VpnPluginInfo {
    /// Read the plugin info from file `filename`. Does not do
    /// any further verification on the file. You might want to check
    /// file permissions and ownership of the file.
    /// ## `filename`
    /// filename to read.
    ///
    /// # Returns
    ///
    /// [`None`] if there is any error or a newly created
    /// [`VpnPluginInfo`][crate::VpnPluginInfo] instance.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_vpn_plugin_info_new_from_file")]
    #[doc(alias = "new_from_file")]
    pub fn from_file(filename: &str) -> Result<VpnPluginInfo, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_vpn_plugin_info_new_from_file(filename.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    /// This has the same effect as doing a full `nm_vpn_plugin_info_list_load()`
    /// followed by a search for the first matching VPN plugin info that has the
    /// given `name` and/or `service`.
    /// ## `name`
    /// the name to search for. Either `name` or `service`
    ///  must be present.
    /// ## `service`
    /// the service to search for. Either `name` or
    ///  `service` must be present.
    ///
    /// # Returns
    ///
    /// a newly created instance of plugin info
    ///  or [`None`] if no matching value was found.
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "nm_vpn_plugin_info_new_search_file")]
    pub fn new_search_file(name: Option<&str>, service: Option<&str>) -> VpnPluginInfo {
        unsafe {
            from_glib_full(ffi::nm_vpn_plugin_info_new_search_file(
                name.to_glib_none().0,
                service.to_glib_none().0,
            ))
        }
    }

    /// This constructor does not read any data from file but
    /// takes instead a `keyfile` argument.
    /// ## `filename`
    /// optional filename.
    /// ## `keyfile`
    /// inject data for the plugin info instance.
    ///
    /// # Returns
    ///
    /// new plugin info instance.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_vpn_plugin_info_new_with_data")]
    #[doc(alias = "new_with_data")]
    pub fn with_data(
        filename: &str,
        keyfile: &glib::KeyFile,
    ) -> Result<VpnPluginInfo, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_vpn_plugin_info_new_with_data(
                filename.to_glib_none().0,
                keyfile.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    ///
    /// # Returns
    ///
    ///
    ///  the aliases from the name-file.
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "nm_vpn_plugin_info_get_aliases")]
    #[doc(alias = "get_aliases")]
    pub fn aliases(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::nm_vpn_plugin_info_get_aliases(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the absolute path to the auth-dialog helper or [`None`].
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "nm_vpn_plugin_info_get_auth_dialog")]
    #[doc(alias = "get_auth_dialog")]
    pub fn auth_dialog(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_vpn_plugin_info_get_auth_dialog(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the cached [`VpnEditorPlugin`][crate::VpnEditorPlugin] instance.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_vpn_plugin_info_get_editor_plugin")]
    #[doc(alias = "get_editor_plugin")]
    pub fn editor_plugin(&self) -> Option<VpnEditorPlugin> {
        unsafe {
            from_glib_none(ffi::nm_vpn_plugin_info_get_editor_plugin(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the filename. Can be [`None`].
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_vpn_plugin_info_get_filename")]
    #[doc(alias = "get_filename")]
    pub fn filename(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_vpn_plugin_info_get_filename(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the name. Cannot be [`None`].
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_vpn_plugin_info_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_vpn_plugin_info_get_name(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the plugin. Can be [`None`].
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_vpn_plugin_info_get_plugin")]
    #[doc(alias = "get_plugin")]
    pub fn plugin(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_vpn_plugin_info_get_plugin(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the program. Can be [`None`].
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_vpn_plugin_info_get_program")]
    #[doc(alias = "get_program")]
    pub fn program(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_vpn_plugin_info_get_program(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the service. Cannot be [`None`].
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "nm_vpn_plugin_info_get_service")]
    #[doc(alias = "get_service")]
    pub fn service(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_vpn_plugin_info_get_service(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// loads the plugin and returns the newly created
    ///  instance. The plugin is owned by `self` and can be later retrieved again
    ///  via [`editor_plugin()`][Self::editor_plugin()]. You can load the
    ///  plugin only once, unless you reset the state via
    ///  [`set_editor_plugin()`][Self::set_editor_plugin()].
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_vpn_plugin_info_load_editor_plugin")]
    pub fn load_editor_plugin(&self) -> Result<VpnEditorPlugin, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_vpn_plugin_info_load_editor_plugin(self.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_none(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    /// ## `group`
    /// group name
    /// ## `key`
    /// name of the property
    ///
    /// # Returns
    ///
    /// [`VpnPluginInfo`][crate::VpnPluginInfo] is internally a [`glib::KeyFile`][crate::glib::KeyFile]. Returns the matching
    /// property.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_vpn_plugin_info_lookup_property")]
    pub fn lookup_property(&self, group: &str, key: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_vpn_plugin_info_lookup_property(
                self.to_glib_none().0,
                group.to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    /// Set the internal plugin instance. If [`None`], only clear the previous instance.
    /// ## `plugin`
    /// plugin instance
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_vpn_plugin_info_set_editor_plugin")]
    pub fn set_editor_plugin(&self, plugin: Option<&impl IsA<VpnEditorPlugin>>) {
        unsafe {
            ffi::nm_vpn_plugin_info_set_editor_plugin(
                self.to_glib_none().0,
                plugin.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    ///
    /// # Returns
    ///
    /// [`true`] if the supports hints for secret requests, otherwise [`false`]
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "nm_vpn_plugin_info_supports_hints")]
    pub fn supports_hints(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_vpn_plugin_info_supports_hints(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// [`true`] if the service supports multiple instances with different bus names, otherwise [`false`]
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_vpn_plugin_info_supports_multiple")]
    pub fn supports_multiple(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_vpn_plugin_info_supports_multiple(
                self.to_glib_none().0,
            ))
        }
    }

    /// Regular name files have a certain pattern. That basically means
    /// they have the file extension "name". Check if `filename`
    /// is valid according to that pattern.
    /// ## `filename`
    /// the filename to check
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_vpn_plugin_info_validate_filename")]
    pub fn validate_filename(filename: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_vpn_plugin_info_validate_filename(
                filename.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "name")]
    pub fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<F: Fn(&VpnPluginInfo) + 'static>(
            this: *mut ffi::NMVpnPluginInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_name_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for VpnPluginInfo {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("VpnPluginInfo")
    }
}
