// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::IPAddress;
use crate::IPRoute;
use crate::Object;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct IPConfig(Object<nm_sys::NMIPConfig, nm_sys::NMIPConfigClass, IPConfigClass>) @extends Object;

    match fn {
        get_type => || nm_sys::nm_ip_config_get_type(),
    }
}

impl IPConfig {
    /// Gets the IP addresses (containing the address, prefix, and gateway).
    ///
    /// # Returns
    ///
    /// the `glib::PtrArray`
    /// containing `IPAddress`<!-- -->es. This is the internal copy used by the
    /// configuration and must not be modified. The library never modifies the
    /// returned array and thus it is safe for callers to reference and keep using it.
    pub fn get_addresses(&self) -> Vec<IPAddress> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_ip_config_get_addresses(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets the domain names.
    ///
    /// # Returns
    ///
    /// the array of domains.
    /// (This is never `None`, though it may be 0-length).
    pub fn get_domains(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_ip_config_get_domains(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets the IP address family
    ///
    /// # Returns
    ///
    /// the IP address family; either `<literal>`AF_INET`</literal>` or
    /// `<literal>`AF_INET6`</literal>`
    pub fn get_family(&self) -> i32 {
        unsafe { nm_sys::nm_ip_config_get_family(self.to_glib_none().0) }
    }

    /// Gets the IP gateway address.
    ///
    /// # Returns
    ///
    /// the IP address of the gateway.
    pub fn get_gateway(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_ip_config_get_gateway(self.to_glib_none().0)) }
    }

    /// Gets the domain name servers (DNS).
    ///
    /// # Returns
    ///
    /// the array of nameserver IP addresses
    pub fn get_nameservers(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_ip_config_get_nameservers(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets the routes.
    ///
    /// # Returns
    ///
    /// the `glib::PtrArray` containing
    /// `IPRoute`<!-- -->s. This is the internal copy used by the configuration, and must
    /// not be modified. The library never modifies the returned array and thus it is
    /// safe for callers to reference and keep using it.
    pub fn get_routes(&self) -> Vec<IPRoute> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_ip_config_get_routes(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets the DNS searches.
    ///
    /// # Returns
    ///
    /// the array of DNS search strings.
    /// (This is never `None`, though it may be 0-length).
    pub fn get_searches(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_ip_config_get_searches(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets the Windows Internet Name Service servers (WINS).
    ///
    /// # Returns
    ///
    /// the arry of WINS server IP address strings.
    /// (This is never `None`, though it may be 0-length.)
    pub fn get_wins_servers(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_ip_config_get_wins_servers(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn connect_property_addresses_notify<F: Fn(&IPConfig) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_addresses_trampoline<F: Fn(&IPConfig) + 'static>(
            this: *mut nm_sys::NMIPConfig,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::addresses\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_addresses_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_domains_notify<F: Fn(&IPConfig) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_domains_trampoline<F: Fn(&IPConfig) + 'static>(
            this: *mut nm_sys::NMIPConfig,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::domains\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_domains_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_family_notify<F: Fn(&IPConfig) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_family_trampoline<F: Fn(&IPConfig) + 'static>(
            this: *mut nm_sys::NMIPConfig,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::family\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_family_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_gateway_notify<F: Fn(&IPConfig) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_gateway_trampoline<F: Fn(&IPConfig) + 'static>(
            this: *mut nm_sys::NMIPConfig,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::gateway\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_gateway_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_nameservers_notify<F: Fn(&IPConfig) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_nameservers_trampoline<F: Fn(&IPConfig) + 'static>(
            this: *mut nm_sys::NMIPConfig,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::nameservers\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_nameservers_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_searches_notify<F: Fn(&IPConfig) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_searches_trampoline<F: Fn(&IPConfig) + 'static>(
            this: *mut nm_sys::NMIPConfig,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::searches\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_searches_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_wins_servers_notify<F: Fn(&IPConfig) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wins_servers_trampoline<F: Fn(&IPConfig) + 'static>(
            this: *mut nm_sys::NMIPConfig,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wins-servers\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wins_servers_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for IPConfig {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "IPConfig")
    }
}
