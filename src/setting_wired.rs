// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Setting;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use SettingWiredWakeOnLan;

glib_wrapper! {
    pub struct SettingWired(Object<nm_sys::NMSettingWired, nm_sys::NMSettingWiredClass, SettingWiredClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_wired_get_type(),
    }
}

impl SettingWired {
    pub fn new() -> SettingWired {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_wired_new()).unsafe_cast() }
    }
}

impl Default for SettingWired {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_WIRED: Option<&SettingWired> = None;

pub trait SettingWiredExt: 'static {
    fn add_mac_blacklist_item(&self, mac: &str) -> bool;

    fn add_s390_option(&self, key: &str, value: &str) -> bool;

    fn clear_mac_blacklist_items(&self);

    fn get_auto_negotiate(&self) -> bool;

    fn get_cloned_mac_address(&self) -> Option<GString>;

    fn get_duplex(&self) -> Option<GString>;

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn get_generate_mac_address_mask(&self) -> Option<GString>;

    fn get_mac_address(&self) -> Option<GString>;

    fn get_mac_address_blacklist(&self) -> Vec<GString>;

    fn get_mac_blacklist_item(&self, idx: u32) -> Option<GString>;

    fn get_mtu(&self) -> u32;

    fn get_num_mac_blacklist_items(&self) -> u32;

    fn get_num_s390_options(&self) -> u32;

    fn get_port(&self) -> Option<GString>;

    fn get_s390_nettype(&self) -> Option<GString>;

    fn get_s390_option_by_key(&self, key: &str) -> Option<GString>;

    fn get_s390_subchannels(&self) -> Vec<GString>;

    fn get_speed(&self) -> u32;

    fn get_valid_s390_options(&self) -> Vec<GString>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_wake_on_lan(&self) -> SettingWiredWakeOnLan;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_wake_on_lan_password(&self) -> Option<GString>;

    fn remove_mac_blacklist_item(&self, idx: u32);

    fn remove_mac_blacklist_item_by_value(&self, mac: &str) -> bool;

    fn remove_s390_option(&self, key: &str) -> bool;

    fn set_property_auto_negotiate(&self, auto_negotiate: bool);

    fn set_property_cloned_mac_address(&self, cloned_mac_address: Option<&str>);

    fn set_property_duplex(&self, duplex: Option<&str>);

    fn get_property_generate_mac_address_mask(&self) -> Option<GString>;

    fn set_property_generate_mac_address_mask(&self, generate_mac_address_mask: Option<&str>);

    fn set_property_mac_address(&self, mac_address: Option<&str>);

    fn set_property_mac_address_blacklist(&self, mac_address_blacklist: &[&str]);

    fn set_property_mtu(&self, mtu: u32);

    fn set_property_port(&self, port: Option<&str>);

    fn set_property_s390_nettype(&self, s390_nettype: Option<&str>);

    //fn get_property_s390_options(&self) -> /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 };

    //fn set_property_s390_options(&self, s390_options: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 });

    fn set_property_s390_subchannels(&self, s390_subchannels: &[&str]);

    fn set_property_speed(&self, speed: u32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_wake_on_lan(&self, wake_on_lan: u32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_wake_on_lan_password(&self, wake_on_lan_password: Option<&str>);

    fn connect_property_auto_negotiate_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_cloned_mac_address_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_duplex_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_generate_mac_address_mask_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_mac_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mac_address_blacklist_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_port_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_s390_nettype_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_s390_options_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_s390_subchannels_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_speed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_wake_on_lan_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_wake_on_lan_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<SettingWired>> SettingWiredExt for O {
    fn add_mac_blacklist_item(&self, mac: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_wired_add_mac_blacklist_item(
                self.as_ref().to_glib_none().0,
                mac.to_glib_none().0,
            ))
        }
    }

    fn add_s390_option(&self, key: &str, value: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_wired_add_s390_option(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
                value.to_glib_none().0,
            ))
        }
    }

    fn clear_mac_blacklist_items(&self) {
        unsafe {
            nm_sys::nm_setting_wired_clear_mac_blacklist_items(self.as_ref().to_glib_none().0);
        }
    }

    fn get_auto_negotiate(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_wired_get_auto_negotiate(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_cloned_mac_address(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_wired_get_cloned_mac_address(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_duplex(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_wired_get_duplex(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn get_generate_mac_address_mask(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_wired_get_generate_mac_address_mask(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_mac_address(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_wired_get_mac_address(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_mac_address_blacklist(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(
                nm_sys::nm_setting_wired_get_mac_address_blacklist(self.as_ref().to_glib_none().0),
            )
        }
    }

    fn get_mac_blacklist_item(&self, idx: u32) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_wired_get_mac_blacklist_item(
                self.as_ref().to_glib_none().0,
                idx,
            ))
        }
    }

    fn get_mtu(&self) -> u32 {
        unsafe { nm_sys::nm_setting_wired_get_mtu(self.as_ref().to_glib_none().0) }
    }

    fn get_num_mac_blacklist_items(&self) -> u32 {
        unsafe {
            nm_sys::nm_setting_wired_get_num_mac_blacklist_items(self.as_ref().to_glib_none().0)
        }
    }

    fn get_num_s390_options(&self) -> u32 {
        unsafe { nm_sys::nm_setting_wired_get_num_s390_options(self.as_ref().to_glib_none().0) }
    }

    fn get_port(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_wired_get_port(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_s390_nettype(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_wired_get_s390_nettype(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_s390_option_by_key(&self, key: &str) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_wired_get_s390_option_by_key(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    fn get_s390_subchannels(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_setting_wired_get_s390_subchannels(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_speed(&self) -> u32 {
        unsafe { nm_sys::nm_setting_wired_get_speed(self.as_ref().to_glib_none().0) }
    }

    fn get_valid_s390_options(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_setting_wired_get_valid_s390_options(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_wake_on_lan(&self) -> SettingWiredWakeOnLan {
        unsafe {
            from_glib(nm_sys::nm_setting_wired_get_wake_on_lan(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_wake_on_lan_password(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_wired_get_wake_on_lan_password(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn remove_mac_blacklist_item(&self, idx: u32) {
        unsafe {
            nm_sys::nm_setting_wired_remove_mac_blacklist_item(self.as_ref().to_glib_none().0, idx);
        }
    }

    fn remove_mac_blacklist_item_by_value(&self, mac: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_wired_remove_mac_blacklist_item_by_value(
                self.as_ref().to_glib_none().0,
                mac.to_glib_none().0,
            ))
        }
    }

    fn remove_s390_option(&self, key: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_wired_remove_s390_option(
                self.as_ref().to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    fn set_property_auto_negotiate(&self, auto_negotiate: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"auto-negotiate\0".as_ptr() as *const _,
                Value::from(&auto_negotiate).to_glib_none().0,
            );
        }
    }

    fn set_property_cloned_mac_address(&self, cloned_mac_address: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"cloned-mac-address\0".as_ptr() as *const _,
                Value::from(cloned_mac_address).to_glib_none().0,
            );
        }
    }

    fn set_property_duplex(&self, duplex: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"duplex\0".as_ptr() as *const _,
                Value::from(duplex).to_glib_none().0,
            );
        }
    }

    fn get_property_generate_mac_address_mask(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"generate-mac-address-mask\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `generate-mac-address-mask` getter")
        }
    }

    fn set_property_generate_mac_address_mask(&self, generate_mac_address_mask: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"generate-mac-address-mask\0".as_ptr() as *const _,
                Value::from(generate_mac_address_mask).to_glib_none().0,
            );
        }
    }

    fn set_property_mac_address(&self, mac_address: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mac-address\0".as_ptr() as *const _,
                Value::from(mac_address).to_glib_none().0,
            );
        }
    }

    fn set_property_mac_address_blacklist(&self, mac_address_blacklist: &[&str]) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mac-address-blacklist\0".as_ptr() as *const _,
                Value::from(mac_address_blacklist).to_glib_none().0,
            );
        }
    }

    fn set_property_mtu(&self, mtu: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mtu\0".as_ptr() as *const _,
                Value::from(&mtu).to_glib_none().0,
            );
        }
    }

    fn set_property_port(&self, port: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"port\0".as_ptr() as *const _,
                Value::from(port).to_glib_none().0,
            );
        }
    }

    fn set_property_s390_nettype(&self, s390_nettype: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"s390-nettype\0".as_ptr() as *const _,
                Value::from(s390_nettype).to_glib_none().0,
            );
        }
    }

    //fn get_property_s390_options(&self) -> /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"s390-options\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `s390-options` getter").unwrap()
    //    }
    //}

    //fn set_property_s390_options(&self, s390_options: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }) {
    //    unsafe {
    //        gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"s390-options\0".as_ptr() as *const _, Value::from(&s390_options).to_glib_none().0);
    //    }
    //}

    fn set_property_s390_subchannels(&self, s390_subchannels: &[&str]) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"s390-subchannels\0".as_ptr() as *const _,
                Value::from(s390_subchannels).to_glib_none().0,
            );
        }
    }

    fn set_property_speed(&self, speed: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"speed\0".as_ptr() as *const _,
                Value::from(&speed).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_wake_on_lan(&self, wake_on_lan: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"wake-on-lan\0".as_ptr() as *const _,
                Value::from(&wake_on_lan).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_wake_on_lan_password(&self, wake_on_lan_password: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"wake-on-lan-password\0".as_ptr() as *const _,
                Value::from(wake_on_lan_password).to_glib_none().0,
            );
        }
    }

    fn connect_property_auto_negotiate_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_auto_negotiate_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::auto-negotiate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_auto_negotiate_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_cloned_mac_address_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_cloned_mac_address_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::cloned-mac-address\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_cloned_mac_address_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_duplex_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_duplex_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::duplex\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_duplex_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_generate_mac_address_mask_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_generate_mac_address_mask_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::generate-mac-address-mask\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_generate_mac_address_mask_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_mac_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mac_address_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mac-address\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mac_address_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_mac_address_blacklist_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_mac_address_blacklist_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mac-address-blacklist\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mac_address_blacklist_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mtu_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mtu\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mtu_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_port_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_port_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::port\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_port_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_s390_nettype_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_s390_nettype_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::s390-nettype\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_s390_nettype_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_s390_options_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_s390_options_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::s390-options\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_s390_options_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_s390_subchannels_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_s390_subchannels_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::s390-subchannels\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_s390_subchannels_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_speed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_speed_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::speed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_speed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_wake_on_lan_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wake_on_lan_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wake-on-lan\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wake_on_lan_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_wake_on_lan_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wake_on_lan_password_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingWired,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingWired>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingWired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wake-on-lan-password\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wake_on_lan_password_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingWired {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingWired")
    }
}
