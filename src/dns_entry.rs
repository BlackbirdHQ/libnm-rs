// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::translate::*;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::GString;
use gobject_sys;
use nm_sys;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct DnsEntry(Boxed<nm_sys::NMDnsEntry>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(nm_sys::nm_dns_entry_get_type(), ptr as *mut _) as *mut nm_sys::NMDnsEntry,
        free => |ptr| gobject_sys::g_boxed_free(nm_sys::nm_dns_entry_get_type(), ptr as *mut _),
        get_type => || nm_sys::nm_dns_entry_get_type(),
    }
}

impl DnsEntry {
    /// Gets the list of DNS domains.
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// the list of DNS domains
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_domains(&mut self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_dns_entry_get_domains(
                self.to_glib_none_mut().0,
            ))
        }
    }

    /// Gets the interface on which name servers are contacted.
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// the interface name
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_interface(&mut self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_dns_entry_get_interface(
                self.to_glib_none_mut().0,
            ))
        }
    }

    /// Gets the list of name servers for this entry.
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// the list of name servers
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_nameservers(&mut self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_dns_entry_get_nameservers(
                self.to_glib_none_mut().0,
            ))
        }
    }

    /// Gets the priority of the entry
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// the priority of the entry
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_priority(&mut self) -> i32 {
        unsafe { nm_sys::nm_dns_entry_get_priority(self.to_glib_none_mut().0) }
    }

    /// Gets whether the entry refers to VPN name servers.
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// `true` if the entry refers to VPN name servers
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_vpn(&mut self) -> bool {
        unsafe { from_glib(nm_sys::nm_dns_entry_get_vpn(self.to_glib_none_mut().0)) }
    }
}
