// This file was generated by gir (https://github.com/gtk-rs/gir @ 609779c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use TeamLinkWatcher;

glib_wrapper! {
    pub struct SettingTeamPort(Object<ffi::NMSettingTeamPort, ffi::NMSettingTeamPortClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_team_port_get_type(),
    }
}

impl SettingTeamPort {
    pub fn new() -> SettingTeamPort {
        unsafe { Setting::from_glib_full(ffi::nm_setting_team_port_new()).downcast_unchecked() }
    }
}

impl Default for SettingTeamPort {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingTeamPortExt {
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn add_link_watcher(&self, link_watcher: &TeamLinkWatcher) -> bool;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn clear_link_watchers(&self);

    fn get_config(&self) -> Option<String>;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_lacp_key(&self) -> i32;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_lacp_prio(&self) -> i32;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_link_watcher(&self, idx: u32) -> Option<TeamLinkWatcher>;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_num_link_watchers(&self) -> u32;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_prio(&self) -> i32;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_queue_id(&self) -> i32;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_sticky(&self) -> bool;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_link_watcher(&self, idx: u32);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_link_watcher_by_value(&self, link_watcher: &TeamLinkWatcher) -> bool;

    fn set_property_config(&self, config: Option<&str>);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_lacp_key(&self, lacp_key: i32);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_lacp_prio(&self, lacp_prio: i32);

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //fn get_property_link_watchers(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 204 };

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //fn set_property_link_watchers(&self, link_watchers: /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 204 });

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_prio(&self, prio: i32);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_queue_id(&self, queue_id: i32);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_sticky(&self, sticky: bool);

    fn connect_property_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_lacp_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_lacp_prio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_link_watchers_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_prio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_queue_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_sticky_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingTeamPort> + IsA<glib::object::Object>> SettingTeamPortExt for O {
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn add_link_watcher(&self, link_watcher: &TeamLinkWatcher) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_team_port_add_link_watcher(
                self.to_glib_none().0,
                link_watcher.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn clear_link_watchers(&self) {
        unsafe {
            ffi::nm_setting_team_port_clear_link_watchers(self.to_glib_none().0);
        }
    }

    fn get_config(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_team_port_get_config(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_lacp_key(&self) -> i32 {
        unsafe { ffi::nm_setting_team_port_get_lacp_key(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_lacp_prio(&self) -> i32 {
        unsafe { ffi::nm_setting_team_port_get_lacp_prio(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_link_watcher(&self, idx: u32) -> Option<TeamLinkWatcher> {
        unsafe {
            from_glib_none(ffi::nm_setting_team_port_get_link_watcher(
                self.to_glib_none().0,
                idx,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_num_link_watchers(&self) -> u32 {
        unsafe { ffi::nm_setting_team_port_get_num_link_watchers(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_prio(&self) -> i32 {
        unsafe { ffi::nm_setting_team_port_get_prio(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_queue_id(&self) -> i32 {
        unsafe { ffi::nm_setting_team_port_get_queue_id(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_sticky(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_team_port_get_sticky(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_link_watcher(&self, idx: u32) {
        unsafe {
            ffi::nm_setting_team_port_remove_link_watcher(self.to_glib_none().0, idx);
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_link_watcher_by_value(&self, link_watcher: &TeamLinkWatcher) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_team_port_remove_link_watcher_by_value(
                self.to_glib_none().0,
                link_watcher.to_glib_none().0,
            ))
        }
    }

    fn set_property_config(&self, config: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "config".to_glib_none().0,
                Value::from(config).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_lacp_key(&self, lacp_key: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "lacp-key".to_glib_none().0,
                Value::from(&lacp_key).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_lacp_prio(&self, lacp_prio: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "lacp-prio".to_glib_none().0,
                Value::from(&lacp_prio).to_glib_none().0,
            );
        }
    }

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //fn get_property_link_watchers(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 204 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "link-watchers".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //fn set_property_link_watchers(&self, link_watchers: /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 204 }) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "link-watchers".to_glib_none().0, Value::from(&link_watchers).to_glib_none().0);
    //    }
    //}

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_prio(&self, prio: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "prio".to_glib_none().0,
                Value::from(&prio).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_queue_id(&self, queue_id: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "queue-id".to_glib_none().0,
                Value::from(&queue_id).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_sticky(&self, sticky: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "sticky".to_glib_none().0,
                Value::from(&sticky).to_glib_none().0,
            );
        }
    }

    fn connect_property_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::config",
                transmute(notify_config_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_lacp_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::lacp-key",
                transmute(notify_lacp_key_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_lacp_prio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::lacp-prio",
                transmute(notify_lacp_prio_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_link_watchers_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::link-watchers",
                transmute(notify_link_watchers_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_prio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::prio",
                transmute(notify_prio_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_queue_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::queue-id",
                transmute(notify_queue_id_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_sticky_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::sticky",
                transmute(notify_sticky_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_config_trampoline<P>(
    this: *mut ffi::NMSettingTeamPort,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTeamPort>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTeamPort::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
unsafe extern "C" fn notify_lacp_key_trampoline<P>(
    this: *mut ffi::NMSettingTeamPort,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTeamPort>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTeamPort::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
unsafe extern "C" fn notify_lacp_prio_trampoline<P>(
    this: *mut ffi::NMSettingTeamPort,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTeamPort>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTeamPort::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
unsafe extern "C" fn notify_link_watchers_trampoline<P>(
    this: *mut ffi::NMSettingTeamPort,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTeamPort>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTeamPort::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
unsafe extern "C" fn notify_prio_trampoline<P>(
    this: *mut ffi::NMSettingTeamPort,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTeamPort>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTeamPort::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
unsafe extern "C" fn notify_queue_id_trampoline<P>(
    this: *mut ffi::NMSettingTeamPort,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTeamPort>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTeamPort::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
unsafe extern "C" fn notify_sticky_trampoline<P>(
    this: *mut ffi::NMSettingTeamPort,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTeamPort>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTeamPort::from_glib_borrow(this).downcast_unchecked())
}
