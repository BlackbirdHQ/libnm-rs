// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;

glib_wrapper! {
    pub struct SettingCdma(Object<ffi::NMSettingCdma, ffi::NMSettingCdmaClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_cdma_get_type(),
    }
}

impl SettingCdma {
    pub fn new() -> SettingCdma {
        unsafe { Setting::from_glib_full(ffi::nm_setting_cdma_new()).downcast_unchecked() }
    }
}

impl Default for SettingCdma {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingCdmaExt {
    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_mtu(&self) -> u32;

    fn get_number(&self) -> Option<String>;

    fn get_password(&self) -> Option<String>;

    //fn get_password_flags(&self) -> /*Ignored*/SettingSecretFlags;

    fn get_username(&self) -> Option<String>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_mtu(&self, mtu: u32);

    fn set_property_number(&self, number: Option<&str>);

    fn set_property_password(&self, password: Option<&str>);

    //fn set_property_password_flags(&self, password_flags: /*Ignored*/SettingSecretFlags);

    fn set_property_username(&self, username: Option<&str>);

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_number_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_password_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_username_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingCdma> + IsA<glib::object::Object>> SettingCdmaExt for O {
    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_mtu(&self) -> u32 {
        unsafe { ffi::nm_setting_cdma_get_mtu(self.to_glib_none().0) }
    }

    fn get_number(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_cdma_get_number(self.to_glib_none().0)) }
    }

    fn get_password(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_cdma_get_password(self.to_glib_none().0)) }
    }

    //fn get_password_flags(&self) -> /*Ignored*/SettingSecretFlags {
    //    unsafe { TODO: call ffi::nm_setting_cdma_get_password_flags() }
    //}

    fn get_username(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_cdma_get_username(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_mtu(&self, mtu: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "mtu".to_glib_none().0,
                Value::from(&mtu).to_glib_none().0,
            );
        }
    }

    fn set_property_number(&self, number: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "number".to_glib_none().0,
                Value::from(number).to_glib_none().0,
            );
        }
    }

    fn set_property_password(&self, password: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "password".to_glib_none().0,
                Value::from(password).to_glib_none().0,
            );
        }
    }

    //fn set_property_password_flags(&self, password_flags: /*Ignored*/SettingSecretFlags) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "password-flags".to_glib_none().0, Value::from(&password_flags).to_glib_none().0);
    //    }
    //}

    fn set_property_username(&self, username: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "username".to_glib_none().0,
                Value::from(username).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::mtu",
                transmute(notify_mtu_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_number_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::number",
                transmute(notify_number_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_password_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::password",
                transmute(notify_password_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::password-flags",
                transmute(notify_password_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_username_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::username",
                transmute(notify_username_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
unsafe extern "C" fn notify_mtu_trampoline<P>(
    this: *mut ffi::NMSettingCdma,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingCdma>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingCdma::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_number_trampoline<P>(
    this: *mut ffi::NMSettingCdma,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingCdma>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingCdma::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_password_trampoline<P>(
    this: *mut ffi::NMSettingCdma,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingCdma>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingCdma::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_password_flags_trampoline<P>(
    this: *mut ffi::NMSettingCdma,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingCdma>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingCdma::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_username_trampoline<P>(
    this: *mut ffi::NMSettingCdma,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingCdma>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingCdma::from_glib_borrow(this).downcast_unchecked())
}
