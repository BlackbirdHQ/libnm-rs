// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;

glib_wrapper! {
    pub struct SettingDcb(Object<ffi::NMSettingDcb, ffi::NMSettingDcbClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_dcb_get_type(),
    }
}

impl SettingDcb {
    pub fn new() -> SettingDcb {
        unsafe { Setting::from_glib_full(ffi::nm_setting_dcb_new()).downcast_unchecked() }
    }
}

impl Default for SettingDcb {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingDcbExt {
    //fn get_app_fcoe_flags(&self) -> /*Ignored*/SettingDcbFlags;

    fn get_app_fcoe_mode(&self) -> Option<String>;

    fn get_app_fcoe_priority(&self) -> i32;

    //fn get_app_fip_flags(&self) -> /*Ignored*/SettingDcbFlags;

    fn get_app_fip_priority(&self) -> i32;

    //fn get_app_iscsi_flags(&self) -> /*Ignored*/SettingDcbFlags;

    fn get_app_iscsi_priority(&self) -> i32;

    fn get_priority_bandwidth(&self, user_priority: u32) -> u32;

    fn get_priority_flow_control(&self, user_priority: u32) -> bool;

    //fn get_priority_flow_control_flags(&self) -> /*Ignored*/SettingDcbFlags;

    fn get_priority_group_bandwidth(&self, group_id: u32) -> u32;

    //fn get_priority_group_flags(&self) -> /*Ignored*/SettingDcbFlags;

    fn get_priority_group_id(&self, user_priority: u32) -> u32;

    fn get_priority_strict_bandwidth(&self, user_priority: u32) -> bool;

    fn get_priority_traffic_class(&self, user_priority: u32) -> u32;

    fn set_priority_bandwidth(&self, user_priority: u32, bandwidth_percent: u32);

    fn set_priority_flow_control(&self, user_priority: u32, enabled: bool);

    fn set_priority_group_bandwidth(&self, group_id: u32, bandwidth_percent: u32);

    fn set_priority_group_id(&self, user_priority: u32, group_id: u32);

    fn set_priority_strict_bandwidth(&self, user_priority: u32, strict: bool);

    fn set_priority_traffic_class(&self, user_priority: u32, traffic_class: u32);

    //fn set_property_app_fcoe_flags(&self, app_fcoe_flags: /*Ignored*/SettingDcbFlags);

    fn set_property_app_fcoe_mode(&self, app_fcoe_mode: Option<&str>);

    fn set_property_app_fcoe_priority(&self, app_fcoe_priority: i32);

    //fn set_property_app_fip_flags(&self, app_fip_flags: /*Ignored*/SettingDcbFlags);

    fn set_property_app_fip_priority(&self, app_fip_priority: i32);

    //fn set_property_app_iscsi_flags(&self, app_iscsi_flags: /*Ignored*/SettingDcbFlags);

    fn set_property_app_iscsi_priority(&self, app_iscsi_priority: i32);

    //fn set_property_priority_flow_control_flags(&self, priority_flow_control_flags: /*Ignored*/SettingDcbFlags);

    //fn set_property_priority_group_flags(&self, priority_group_flags: /*Ignored*/SettingDcbFlags);

    fn connect_property_app_fcoe_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_app_fcoe_mode_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_app_fcoe_priority_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_app_fip_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_app_fip_priority_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_app_iscsi_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_app_iscsi_priority_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_priority_bandwidth_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_priority_flow_control_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_priority_flow_control_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_priority_group_bandwidth_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_priority_group_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_priority_group_id_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_priority_strict_bandwidth_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_priority_traffic_class_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<SettingDcb> + IsA<glib::object::Object>> SettingDcbExt for O {
    //fn get_app_fcoe_flags(&self) -> /*Ignored*/SettingDcbFlags {
    //    unsafe { TODO: call ffi::nm_setting_dcb_get_app_fcoe_flags() }
    //}

    fn get_app_fcoe_mode(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_dcb_get_app_fcoe_mode(self.to_glib_none().0)) }
    }

    fn get_app_fcoe_priority(&self) -> i32 {
        unsafe { ffi::nm_setting_dcb_get_app_fcoe_priority(self.to_glib_none().0) }
    }

    //fn get_app_fip_flags(&self) -> /*Ignored*/SettingDcbFlags {
    //    unsafe { TODO: call ffi::nm_setting_dcb_get_app_fip_flags() }
    //}

    fn get_app_fip_priority(&self) -> i32 {
        unsafe { ffi::nm_setting_dcb_get_app_fip_priority(self.to_glib_none().0) }
    }

    //fn get_app_iscsi_flags(&self) -> /*Ignored*/SettingDcbFlags {
    //    unsafe { TODO: call ffi::nm_setting_dcb_get_app_iscsi_flags() }
    //}

    fn get_app_iscsi_priority(&self) -> i32 {
        unsafe { ffi::nm_setting_dcb_get_app_iscsi_priority(self.to_glib_none().0) }
    }

    fn get_priority_bandwidth(&self, user_priority: u32) -> u32 {
        unsafe { ffi::nm_setting_dcb_get_priority_bandwidth(self.to_glib_none().0, user_priority) }
    }

    fn get_priority_flow_control(&self, user_priority: u32) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_dcb_get_priority_flow_control(
                self.to_glib_none().0,
                user_priority,
            ))
        }
    }

    //fn get_priority_flow_control_flags(&self) -> /*Ignored*/SettingDcbFlags {
    //    unsafe { TODO: call ffi::nm_setting_dcb_get_priority_flow_control_flags() }
    //}

    fn get_priority_group_bandwidth(&self, group_id: u32) -> u32 {
        unsafe { ffi::nm_setting_dcb_get_priority_group_bandwidth(self.to_glib_none().0, group_id) }
    }

    //fn get_priority_group_flags(&self) -> /*Ignored*/SettingDcbFlags {
    //    unsafe { TODO: call ffi::nm_setting_dcb_get_priority_group_flags() }
    //}

    fn get_priority_group_id(&self, user_priority: u32) -> u32 {
        unsafe { ffi::nm_setting_dcb_get_priority_group_id(self.to_glib_none().0, user_priority) }
    }

    fn get_priority_strict_bandwidth(&self, user_priority: u32) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_dcb_get_priority_strict_bandwidth(
                self.to_glib_none().0,
                user_priority,
            ))
        }
    }

    fn get_priority_traffic_class(&self, user_priority: u32) -> u32 {
        unsafe {
            ffi::nm_setting_dcb_get_priority_traffic_class(self.to_glib_none().0, user_priority)
        }
    }

    fn set_priority_bandwidth(&self, user_priority: u32, bandwidth_percent: u32) {
        unsafe {
            ffi::nm_setting_dcb_set_priority_bandwidth(
                self.to_glib_none().0,
                user_priority,
                bandwidth_percent,
            );
        }
    }

    fn set_priority_flow_control(&self, user_priority: u32, enabled: bool) {
        unsafe {
            ffi::nm_setting_dcb_set_priority_flow_control(
                self.to_glib_none().0,
                user_priority,
                enabled.to_glib(),
            );
        }
    }

    fn set_priority_group_bandwidth(&self, group_id: u32, bandwidth_percent: u32) {
        unsafe {
            ffi::nm_setting_dcb_set_priority_group_bandwidth(
                self.to_glib_none().0,
                group_id,
                bandwidth_percent,
            );
        }
    }

    fn set_priority_group_id(&self, user_priority: u32, group_id: u32) {
        unsafe {
            ffi::nm_setting_dcb_set_priority_group_id(
                self.to_glib_none().0,
                user_priority,
                group_id,
            );
        }
    }

    fn set_priority_strict_bandwidth(&self, user_priority: u32, strict: bool) {
        unsafe {
            ffi::nm_setting_dcb_set_priority_strict_bandwidth(
                self.to_glib_none().0,
                user_priority,
                strict.to_glib(),
            );
        }
    }

    fn set_priority_traffic_class(&self, user_priority: u32, traffic_class: u32) {
        unsafe {
            ffi::nm_setting_dcb_set_priority_traffic_class(
                self.to_glib_none().0,
                user_priority,
                traffic_class,
            );
        }
    }

    //fn set_property_app_fcoe_flags(&self, app_fcoe_flags: /*Ignored*/SettingDcbFlags) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "app-fcoe-flags".to_glib_none().0, Value::from(&app_fcoe_flags).to_glib_none().0);
    //    }
    //}

    fn set_property_app_fcoe_mode(&self, app_fcoe_mode: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "app-fcoe-mode".to_glib_none().0,
                Value::from(app_fcoe_mode).to_glib_none().0,
            );
        }
    }

    fn set_property_app_fcoe_priority(&self, app_fcoe_priority: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "app-fcoe-priority".to_glib_none().0,
                Value::from(&app_fcoe_priority).to_glib_none().0,
            );
        }
    }

    //fn set_property_app_fip_flags(&self, app_fip_flags: /*Ignored*/SettingDcbFlags) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "app-fip-flags".to_glib_none().0, Value::from(&app_fip_flags).to_glib_none().0);
    //    }
    //}

    fn set_property_app_fip_priority(&self, app_fip_priority: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "app-fip-priority".to_glib_none().0,
                Value::from(&app_fip_priority).to_glib_none().0,
            );
        }
    }

    //fn set_property_app_iscsi_flags(&self, app_iscsi_flags: /*Ignored*/SettingDcbFlags) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "app-iscsi-flags".to_glib_none().0, Value::from(&app_iscsi_flags).to_glib_none().0);
    //    }
    //}

    fn set_property_app_iscsi_priority(&self, app_iscsi_priority: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "app-iscsi-priority".to_glib_none().0,
                Value::from(&app_iscsi_priority).to_glib_none().0,
            );
        }
    }

    //fn set_property_priority_flow_control_flags(&self, priority_flow_control_flags: /*Ignored*/SettingDcbFlags) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "priority-flow-control-flags".to_glib_none().0, Value::from(&priority_flow_control_flags).to_glib_none().0);
    //    }
    //}

    //fn set_property_priority_group_flags(&self, priority_group_flags: /*Ignored*/SettingDcbFlags) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "priority-group-flags".to_glib_none().0, Value::from(&priority_group_flags).to_glib_none().0);
    //    }
    //}

    fn connect_property_app_fcoe_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::app-fcoe-flags",
                transmute(notify_app_fcoe_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_app_fcoe_mode_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::app-fcoe-mode",
                transmute(notify_app_fcoe_mode_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_app_fcoe_priority_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::app-fcoe-priority",
                transmute(notify_app_fcoe_priority_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_app_fip_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::app-fip-flags",
                transmute(notify_app_fip_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_app_fip_priority_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::app-fip-priority",
                transmute(notify_app_fip_priority_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_app_iscsi_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::app-iscsi-flags",
                transmute(notify_app_iscsi_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_app_iscsi_priority_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::app-iscsi-priority",
                transmute(notify_app_iscsi_priority_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_priority_bandwidth_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::priority-bandwidth",
                transmute(notify_priority_bandwidth_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_priority_flow_control_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::priority-flow-control",
                transmute(notify_priority_flow_control_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_priority_flow_control_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::priority-flow-control-flags",
                transmute(notify_priority_flow_control_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_priority_group_bandwidth_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::priority-group-bandwidth",
                transmute(notify_priority_group_bandwidth_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_priority_group_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::priority-group-flags",
                transmute(notify_priority_group_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_priority_group_id_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::priority-group-id",
                transmute(notify_priority_group_id_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_priority_strict_bandwidth_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::priority-strict-bandwidth",
                transmute(notify_priority_strict_bandwidth_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_priority_traffic_class_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::priority-traffic-class",
                transmute(notify_priority_traffic_class_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_app_fcoe_flags_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_app_fcoe_mode_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_app_fcoe_priority_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_app_fip_flags_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_app_fip_priority_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_app_iscsi_flags_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_app_iscsi_priority_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_priority_bandwidth_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_priority_flow_control_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_priority_flow_control_flags_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_priority_group_bandwidth_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_priority_group_flags_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_priority_group_id_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_priority_strict_bandwidth_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_priority_traffic_class_trampoline<P>(
    this: *mut ffi::NMSettingDcb,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingDcb>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingDcb::from_glib_borrow(this).downcast_unchecked())
}
