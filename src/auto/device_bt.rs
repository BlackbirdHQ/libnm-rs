// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use BluetoothCapabilities;
use Device;

glib_wrapper! {
    pub struct DeviceBt(Object<ffi::NMDeviceBt, ffi::NMDeviceBtClass>): Device;

    match fn {
        get_type => || ffi::nm_device_bt_get_type(),
    }
}

pub trait DeviceBtExt {
    fn get_capabilities(&self) -> BluetoothCapabilities;

    fn get_name(&self) -> Option<String>;

    fn get_property_bt_capabilities(&self) -> BluetoothCapabilities;

    fn connect_property_bt_capabilities_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_hw_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DeviceBt> + IsA<glib::object::Object>> DeviceBtExt for O {
    fn get_capabilities(&self) -> BluetoothCapabilities {
        unsafe { from_glib(ffi::nm_device_bt_get_capabilities(self.to_glib_none().0)) }
    }

    fn get_name(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_device_bt_get_name(self.to_glib_none().0)) }
    }

    fn get_property_bt_capabilities(&self) -> BluetoothCapabilities {
        unsafe {
            let mut value = Value::from_type(<BluetoothCapabilities as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "bt-capabilities".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    fn connect_property_bt_capabilities_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::bt-capabilities",
                transmute(notify_bt_capabilities_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_hw_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::hw-address",
                transmute(notify_hw_address_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::name",
                transmute(notify_name_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_bt_capabilities_trampoline<P>(
    this: *mut ffi::NMDeviceBt,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceBt>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceBt::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_hw_address_trampoline<P>(
    this: *mut ffi::NMDeviceBt,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceBt>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceBt::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_name_trampoline<P>(
    this: *mut ffi::NMDeviceBt,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceBt>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceBt::from_glib_borrow(this).downcast_unchecked())
}
