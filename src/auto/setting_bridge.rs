// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;

glib_wrapper! {
    pub struct SettingBridge(Object<ffi::NMSettingBridge, ffi::NMSettingBridgeClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_bridge_get_type(),
    }
}

impl SettingBridge {
    pub fn new() -> SettingBridge {
        unsafe { Setting::from_glib_full(ffi::nm_setting_bridge_new()).downcast_unchecked() }
    }
}

impl Default for SettingBridge {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingBridgeExt {
    fn get_ageing_time(&self) -> u32;

    fn get_forward_delay(&self) -> u16;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_group_forward_mask(&self) -> u16;

    fn get_hello_time(&self) -> u16;

    fn get_mac_address(&self) -> Option<String>;

    fn get_max_age(&self) -> u16;

    fn get_multicast_snooping(&self) -> bool;

    fn get_priority(&self) -> u16;

    fn get_stp(&self) -> bool;

    fn set_property_ageing_time(&self, ageing_time: u32);

    fn set_property_forward_delay(&self, forward_delay: u32);

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn set_property_group_forward_mask(&self, group_forward_mask: u32);

    fn set_property_hello_time(&self, hello_time: u32);

    #[cfg_attr(feature = "v1_12", deprecated)]
    fn set_property_mac_address(&self, mac_address: Option<&str>);

    fn set_property_max_age(&self, max_age: u32);

    fn set_property_multicast_snooping(&self, multicast_snooping: bool);

    fn set_property_priority(&self, priority: u32);

    fn set_property_stp(&self, stp: bool);

    fn connect_property_ageing_time_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_forward_delay_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn connect_property_group_forward_mask_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_hello_time_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v1_12", deprecated)]
    fn connect_property_mac_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_max_age_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_multicast_snooping_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_stp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingBridge> + IsA<glib::object::Object>> SettingBridgeExt for O {
    fn get_ageing_time(&self) -> u32 {
        unsafe { ffi::nm_setting_bridge_get_ageing_time(self.to_glib_none().0) }
    }

    fn get_forward_delay(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_get_forward_delay(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_group_forward_mask(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_get_group_forward_mask(self.to_glib_none().0) }
    }

    fn get_hello_time(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_get_hello_time(self.to_glib_none().0) }
    }

    fn get_mac_address(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_bridge_get_mac_address(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_max_age(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_get_max_age(self.to_glib_none().0) }
    }

    fn get_multicast_snooping(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_bridge_get_multicast_snooping(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_priority(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_get_priority(self.to_glib_none().0) }
    }

    fn get_stp(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_bridge_get_stp(self.to_glib_none().0)) }
    }

    fn set_property_ageing_time(&self, ageing_time: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "ageing-time".to_glib_none().0,
                Value::from(&ageing_time).to_glib_none().0,
            );
        }
    }

    fn set_property_forward_delay(&self, forward_delay: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "forward-delay".to_glib_none().0,
                Value::from(&forward_delay).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn set_property_group_forward_mask(&self, group_forward_mask: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "group-forward-mask".to_glib_none().0,
                Value::from(&group_forward_mask).to_glib_none().0,
            );
        }
    }

    fn set_property_hello_time(&self, hello_time: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "hello-time".to_glib_none().0,
                Value::from(&hello_time).to_glib_none().0,
            );
        }
    }

    fn set_property_mac_address(&self, mac_address: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "mac-address".to_glib_none().0,
                Value::from(mac_address).to_glib_none().0,
            );
        }
    }

    fn set_property_max_age(&self, max_age: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "max-age".to_glib_none().0,
                Value::from(&max_age).to_glib_none().0,
            );
        }
    }

    fn set_property_multicast_snooping(&self, multicast_snooping: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "multicast-snooping".to_glib_none().0,
                Value::from(&multicast_snooping).to_glib_none().0,
            );
        }
    }

    fn set_property_priority(&self, priority: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "priority".to_glib_none().0,
                Value::from(&priority).to_glib_none().0,
            );
        }
    }

    fn set_property_stp(&self, stp: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "stp".to_glib_none().0,
                Value::from(&stp).to_glib_none().0,
            );
        }
    }

    fn connect_property_ageing_time_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::ageing-time",
                transmute(notify_ageing_time_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_forward_delay_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::forward-delay",
                transmute(notify_forward_delay_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn connect_property_group_forward_mask_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::group-forward-mask",
                transmute(notify_group_forward_mask_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_hello_time_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::hello-time",
                transmute(notify_hello_time_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_mac_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::mac-address",
                transmute(notify_mac_address_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_max_age_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::max-age",
                transmute(notify_max_age_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_multicast_snooping_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::multicast-snooping",
                transmute(notify_multicast_snooping_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::priority",
                transmute(notify_priority_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_stp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::stp",
                transmute(notify_stp_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_ageing_time_trampoline<P>(
    this: *mut ffi::NMSettingBridge,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingBridge>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingBridge::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_forward_delay_trampoline<P>(
    this: *mut ffi::NMSettingBridge,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingBridge>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingBridge::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
unsafe extern "C" fn notify_group_forward_mask_trampoline<P>(
    this: *mut ffi::NMSettingBridge,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingBridge>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingBridge::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_hello_time_trampoline<P>(
    this: *mut ffi::NMSettingBridge,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingBridge>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingBridge::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_mac_address_trampoline<P>(
    this: *mut ffi::NMSettingBridge,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingBridge>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingBridge::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_max_age_trampoline<P>(
    this: *mut ffi::NMSettingBridge,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingBridge>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingBridge::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_multicast_snooping_trampoline<P>(
    this: *mut ffi::NMSettingBridge,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingBridge>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingBridge::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_priority_trampoline<P>(
    this: *mut ffi::NMSettingBridge,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingBridge>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingBridge::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_stp_trampoline<P>(
    this: *mut ffi::NMSettingBridge,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingBridge>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingBridge::from_glib_borrow(this).downcast_unchecked())
}
