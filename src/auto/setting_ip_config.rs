// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use IPAddress;
use IPRoute;
use Setting;

glib_wrapper! {
    pub struct SettingIPConfig(Object<ffi::NMSettingIPConfig, ffi::NMSettingIPConfigClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_ip_config_get_type(),
    }
}

pub trait SettingIPConfigExt: 'static {
    fn add_address(&self, address: &IPAddress) -> bool;

    fn add_dns(&self, dns: &str) -> bool;

    fn add_dns_option(&self, dns_option: &str) -> bool;

    fn add_dns_search(&self, dns_search: &str) -> bool;

    fn add_route(&self, route: &IPRoute) -> bool;

    fn clear_addresses(&self);

    fn clear_dns(&self);

    fn clear_dns_options(&self, is_set: bool);

    fn clear_dns_searches(&self);

    fn clear_routes(&self);

    fn get_address(&self, idx: i32) -> Option<IPAddress>;

    fn get_dad_timeout(&self) -> i32;

    fn get_dhcp_hostname(&self) -> Option<GString>;

    fn get_dhcp_send_hostname(&self) -> bool;

    fn get_dhcp_timeout(&self) -> i32;

    fn get_dns(&self, idx: i32) -> Option<GString>;

    fn get_dns_option(&self, idx: u32) -> Option<GString>;

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn get_dns_priority(&self) -> i32;

    fn get_dns_search(&self, idx: i32) -> Option<GString>;

    fn get_gateway(&self) -> Option<GString>;

    fn get_ignore_auto_dns(&self) -> bool;

    fn get_ignore_auto_routes(&self) -> bool;

    fn get_may_fail(&self) -> bool;

    fn get_method(&self) -> Option<GString>;

    fn get_never_default(&self) -> bool;

    fn get_num_addresses(&self) -> u32;

    fn get_num_dns(&self) -> u32;

    fn get_num_dns_options(&self) -> u32;

    fn get_num_dns_searches(&self) -> u32;

    fn get_num_routes(&self) -> u32;

    fn get_route(&self, idx: i32) -> Option<IPRoute>;

    fn get_route_metric(&self) -> i64;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_route_table(&self) -> u32;

    fn has_dns_options(&self) -> bool;

    fn next_valid_dns_option(&self, idx: u32) -> i32;

    fn remove_address(&self, idx: i32);

    fn remove_address_by_value(&self, address: &IPAddress) -> bool;

    fn remove_dns(&self, idx: i32);

    fn remove_dns_by_value(&self, dns: &str) -> bool;

    fn remove_dns_option(&self, idx: i32);

    fn remove_dns_option_by_value(&self, dns_option: &str) -> bool;

    fn remove_dns_search(&self, idx: i32);

    fn remove_dns_search_by_value(&self, dns_search: &str) -> bool;

    fn remove_route(&self, idx: i32);

    fn remove_route_by_value(&self, route: &IPRoute) -> bool;

    //fn get_property_addresses(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 137 };

    //fn set_property_addresses(&self, addresses: /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 137 });

    fn set_property_dad_timeout(&self, dad_timeout: i32);

    fn set_property_dhcp_hostname<'a, P: Into<Option<&'a str>>>(&self, dhcp_hostname: P);

    fn set_property_dhcp_send_hostname(&self, dhcp_send_hostname: bool);

    fn set_property_dhcp_timeout(&self, dhcp_timeout: i32);

    fn set_property_dns(&self, dns: &[&str]);

    fn get_property_dns_options(&self) -> Vec<GString>;

    fn set_property_dns_options(&self, dns_options: &[&str]);

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn set_property_dns_priority(&self, dns_priority: i32);

    fn set_property_dns_search(&self, dns_search: &[&str]);

    fn set_property_gateway<'a, P: Into<Option<&'a str>>>(&self, gateway: P);

    fn set_property_ignore_auto_dns(&self, ignore_auto_dns: bool);

    fn set_property_ignore_auto_routes(&self, ignore_auto_routes: bool);

    fn set_property_may_fail(&self, may_fail: bool);

    fn set_property_method<'a, P: Into<Option<&'a str>>>(&self, method: P);

    fn set_property_never_default(&self, never_default: bool);

    fn set_property_route_metric(&self, route_metric: i64);

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn set_property_route_table(&self, route_table: u32);

    //fn get_property_routes(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 138 };

    //fn set_property_routes(&self, routes: /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 138 });

    fn connect_property_addresses_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_dad_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_dhcp_hostname_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_dhcp_send_hostname_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_dhcp_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_dns_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_dns_options_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn connect_property_dns_priority_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_dns_search_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_gateway_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_ignore_auto_dns_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_ignore_auto_routes_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_may_fail_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_method_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_never_default_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_route_metric_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn connect_property_route_table_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_routes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingIPConfig>> SettingIPConfigExt for O {
    fn add_address(&self, address: &IPAddress) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_add_address(
                self.to_glib_none().0,
                address.to_glib_none().0,
            ))
        }
    }

    fn add_dns(&self, dns: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_add_dns(
                self.to_glib_none().0,
                dns.to_glib_none().0,
            ))
        }
    }

    fn add_dns_option(&self, dns_option: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_add_dns_option(
                self.to_glib_none().0,
                dns_option.to_glib_none().0,
            ))
        }
    }

    fn add_dns_search(&self, dns_search: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_add_dns_search(
                self.to_glib_none().0,
                dns_search.to_glib_none().0,
            ))
        }
    }

    fn add_route(&self, route: &IPRoute) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_add_route(
                self.to_glib_none().0,
                route.to_glib_none().0,
            ))
        }
    }

    fn clear_addresses(&self) {
        unsafe {
            ffi::nm_setting_ip_config_clear_addresses(self.to_glib_none().0);
        }
    }

    fn clear_dns(&self) {
        unsafe {
            ffi::nm_setting_ip_config_clear_dns(self.to_glib_none().0);
        }
    }

    fn clear_dns_options(&self, is_set: bool) {
        unsafe {
            ffi::nm_setting_ip_config_clear_dns_options(self.to_glib_none().0, is_set.to_glib());
        }
    }

    fn clear_dns_searches(&self) {
        unsafe {
            ffi::nm_setting_ip_config_clear_dns_searches(self.to_glib_none().0);
        }
    }

    fn clear_routes(&self) {
        unsafe {
            ffi::nm_setting_ip_config_clear_routes(self.to_glib_none().0);
        }
    }

    fn get_address(&self, idx: i32) -> Option<IPAddress> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_address(
                self.to_glib_none().0,
                idx,
            ))
        }
    }

    fn get_dad_timeout(&self) -> i32 {
        unsafe { ffi::nm_setting_ip_config_get_dad_timeout(self.to_glib_none().0) }
    }

    fn get_dhcp_hostname(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_dhcp_hostname(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_dhcp_send_hostname(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_get_dhcp_send_hostname(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_dhcp_timeout(&self) -> i32 {
        unsafe { ffi::nm_setting_ip_config_get_dhcp_timeout(self.to_glib_none().0) }
    }

    fn get_dns(&self, idx: i32) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_dns(
                self.to_glib_none().0,
                idx,
            ))
        }
    }

    fn get_dns_option(&self, idx: u32) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_dns_option(
                self.to_glib_none().0,
                idx,
            ))
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn get_dns_priority(&self) -> i32 {
        unsafe { ffi::nm_setting_ip_config_get_dns_priority(self.to_glib_none().0) }
    }

    fn get_dns_search(&self, idx: i32) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_dns_search(
                self.to_glib_none().0,
                idx,
            ))
        }
    }

    fn get_gateway(&self) -> Option<GString> {
        unsafe { from_glib_none(ffi::nm_setting_ip_config_get_gateway(self.to_glib_none().0)) }
    }

    fn get_ignore_auto_dns(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_get_ignore_auto_dns(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_ignore_auto_routes(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_get_ignore_auto_routes(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_may_fail(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_get_may_fail(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_method(&self) -> Option<GString> {
        unsafe { from_glib_none(ffi::nm_setting_ip_config_get_method(self.to_glib_none().0)) }
    }

    fn get_never_default(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_get_never_default(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_num_addresses(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_num_addresses(self.to_glib_none().0) }
    }

    fn get_num_dns(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_num_dns(self.to_glib_none().0) }
    }

    fn get_num_dns_options(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_num_dns_options(self.to_glib_none().0) }
    }

    fn get_num_dns_searches(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_num_dns_searches(self.to_glib_none().0) }
    }

    fn get_num_routes(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_num_routes(self.to_glib_none().0) }
    }

    fn get_route(&self, idx: i32) -> Option<IPRoute> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_config_get_route(
                self.to_glib_none().0,
                idx,
            ))
        }
    }

    fn get_route_metric(&self) -> i64 {
        unsafe { ffi::nm_setting_ip_config_get_route_metric(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_route_table(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_config_get_route_table(self.to_glib_none().0) }
    }

    fn has_dns_options(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_has_dns_options(
                self.to_glib_none().0,
            ))
        }
    }

    fn next_valid_dns_option(&self, idx: u32) -> i32 {
        unsafe { ffi::nm_setting_ip_config_next_valid_dns_option(self.to_glib_none().0, idx) }
    }

    fn remove_address(&self, idx: i32) {
        unsafe {
            ffi::nm_setting_ip_config_remove_address(self.to_glib_none().0, idx);
        }
    }

    fn remove_address_by_value(&self, address: &IPAddress) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_remove_address_by_value(
                self.to_glib_none().0,
                address.to_glib_none().0,
            ))
        }
    }

    fn remove_dns(&self, idx: i32) {
        unsafe {
            ffi::nm_setting_ip_config_remove_dns(self.to_glib_none().0, idx);
        }
    }

    fn remove_dns_by_value(&self, dns: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_remove_dns_by_value(
                self.to_glib_none().0,
                dns.to_glib_none().0,
            ))
        }
    }

    fn remove_dns_option(&self, idx: i32) {
        unsafe {
            ffi::nm_setting_ip_config_remove_dns_option(self.to_glib_none().0, idx);
        }
    }

    fn remove_dns_option_by_value(&self, dns_option: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_remove_dns_option_by_value(
                self.to_glib_none().0,
                dns_option.to_glib_none().0,
            ))
        }
    }

    fn remove_dns_search(&self, idx: i32) {
        unsafe {
            ffi::nm_setting_ip_config_remove_dns_search(self.to_glib_none().0, idx);
        }
    }

    fn remove_dns_search_by_value(&self, dns_search: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_remove_dns_search_by_value(
                self.to_glib_none().0,
                dns_search.to_glib_none().0,
            ))
        }
    }

    fn remove_route(&self, idx: i32) {
        unsafe {
            ffi::nm_setting_ip_config_remove_route(self.to_glib_none().0, idx);
        }
    }

    fn remove_route_by_value(&self, route: &IPRoute) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_config_remove_route_by_value(
                self.to_glib_none().0,
                route.to_glib_none().0,
            ))
        }
    }

    //fn get_property_addresses(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 137 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"addresses\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    //fn set_property_addresses(&self, addresses: /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 137 }) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"addresses\0".as_ptr() as *const _, Value::from(&addresses).to_glib_none().0);
    //    }
    //}

    fn set_property_dad_timeout(&self, dad_timeout: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"dad-timeout\0".as_ptr() as *const _,
                Value::from(&dad_timeout).to_glib_none().0,
            );
        }
    }

    fn set_property_dhcp_hostname<'a, P: Into<Option<&'a str>>>(&self, dhcp_hostname: P) {
        let dhcp_hostname = dhcp_hostname.into();
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"dhcp-hostname\0".as_ptr() as *const _,
                Value::from(dhcp_hostname).to_glib_none().0,
            );
        }
    }

    fn set_property_dhcp_send_hostname(&self, dhcp_send_hostname: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"dhcp-send-hostname\0".as_ptr() as *const _,
                Value::from(&dhcp_send_hostname).to_glib_none().0,
            );
        }
    }

    fn set_property_dhcp_timeout(&self, dhcp_timeout: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"dhcp-timeout\0".as_ptr() as *const _,
                Value::from(&dhcp_timeout).to_glib_none().0,
            );
        }
    }

    fn set_property_dns(&self, dns: &[&str]) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"dns\0".as_ptr() as *const _,
                Value::from(dns).to_glib_none().0,
            );
        }
    }

    fn get_property_dns_options(&self) -> Vec<GString> {
        unsafe {
            let mut value = Value::from_type(<Vec<GString> as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"dns-options\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    fn set_property_dns_options(&self, dns_options: &[&str]) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"dns-options\0".as_ptr() as *const _,
                Value::from(dns_options).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn set_property_dns_priority(&self, dns_priority: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"dns-priority\0".as_ptr() as *const _,
                Value::from(&dns_priority).to_glib_none().0,
            );
        }
    }

    fn set_property_dns_search(&self, dns_search: &[&str]) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"dns-search\0".as_ptr() as *const _,
                Value::from(dns_search).to_glib_none().0,
            );
        }
    }

    fn set_property_gateway<'a, P: Into<Option<&'a str>>>(&self, gateway: P) {
        let gateway = gateway.into();
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"gateway\0".as_ptr() as *const _,
                Value::from(gateway).to_glib_none().0,
            );
        }
    }

    fn set_property_ignore_auto_dns(&self, ignore_auto_dns: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"ignore-auto-dns\0".as_ptr() as *const _,
                Value::from(&ignore_auto_dns).to_glib_none().0,
            );
        }
    }

    fn set_property_ignore_auto_routes(&self, ignore_auto_routes: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"ignore-auto-routes\0".as_ptr() as *const _,
                Value::from(&ignore_auto_routes).to_glib_none().0,
            );
        }
    }

    fn set_property_may_fail(&self, may_fail: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"may-fail\0".as_ptr() as *const _,
                Value::from(&may_fail).to_glib_none().0,
            );
        }
    }

    fn set_property_method<'a, P: Into<Option<&'a str>>>(&self, method: P) {
        let method = method.into();
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"method\0".as_ptr() as *const _,
                Value::from(method).to_glib_none().0,
            );
        }
    }

    fn set_property_never_default(&self, never_default: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"never-default\0".as_ptr() as *const _,
                Value::from(&never_default).to_glib_none().0,
            );
        }
    }

    fn set_property_route_metric(&self, route_metric: i64) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"route-metric\0".as_ptr() as *const _,
                Value::from(&route_metric).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn set_property_route_table(&self, route_table: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"route-table\0".as_ptr() as *const _,
                Value::from(&route_table).to_glib_none().0,
            );
        }
    }

    //fn get_property_routes(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 138 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"routes\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    //fn set_property_routes(&self, routes: /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 138 }) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"routes\0".as_ptr() as *const _, Value::from(&routes).to_glib_none().0);
    //    }
    //}

    fn connect_property_addresses_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::addresses\0".as_ptr() as *const _,
                transmute(notify_addresses_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_dad_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::dad-timeout\0".as_ptr() as *const _,
                transmute(notify_dad_timeout_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_dhcp_hostname_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::dhcp-hostname\0".as_ptr() as *const _,
                transmute(notify_dhcp_hostname_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_dhcp_send_hostname_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::dhcp-send-hostname\0".as_ptr() as *const _,
                transmute(notify_dhcp_send_hostname_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_dhcp_timeout_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::dhcp-timeout\0".as_ptr() as *const _,
                transmute(notify_dhcp_timeout_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_dns_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::dns\0".as_ptr() as *const _,
                transmute(notify_dns_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_dns_options_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::dns-options\0".as_ptr() as *const _,
                transmute(notify_dns_options_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn connect_property_dns_priority_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::dns-priority\0".as_ptr() as *const _,
                transmute(notify_dns_priority_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_dns_search_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::dns-search\0".as_ptr() as *const _,
                transmute(notify_dns_search_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_gateway_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::gateway\0".as_ptr() as *const _,
                transmute(notify_gateway_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_ignore_auto_dns_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::ignore-auto-dns\0".as_ptr() as *const _,
                transmute(notify_ignore_auto_dns_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_ignore_auto_routes_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::ignore-auto-routes\0".as_ptr() as *const _,
                transmute(notify_ignore_auto_routes_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_may_fail_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::may-fail\0".as_ptr() as *const _,
                transmute(notify_may_fail_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_method_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::method\0".as_ptr() as *const _,
                transmute(notify_method_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_never_default_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::never-default\0".as_ptr() as *const _,
                transmute(notify_never_default_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_route_metric_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::route-metric\0".as_ptr() as *const _,
                transmute(notify_route_metric_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn connect_property_route_table_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::route-table\0".as_ptr() as *const _,
                transmute(notify_route_table_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_routes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::routes\0".as_ptr() as *const _,
                transmute(notify_routes_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_addresses_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dad_timeout_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dhcp_hostname_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dhcp_send_hostname_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dhcp_timeout_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dns_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dns_options_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_4", feature = "dox"))]
unsafe extern "C" fn notify_dns_priority_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dns_search_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_gateway_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_ignore_auto_dns_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_ignore_auto_routes_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_may_fail_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_method_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_never_default_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_route_metric_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
unsafe extern "C" fn notify_route_table_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_routes_trampoline<P>(
    this: *mut ffi::NMSettingIPConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPConfig::from_glib_borrow(this).downcast_unchecked())
}

impl fmt::Display for SettingIPConfig {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingIPConfig")
    }
}
