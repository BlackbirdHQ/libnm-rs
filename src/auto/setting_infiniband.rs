// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;

glib_wrapper! {
    pub struct SettingInfiniband(Object<ffi::NMSettingInfiniband, ffi::NMSettingInfinibandClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_infiniband_get_type(),
    }
}

impl SettingInfiniband {
    pub fn new() -> SettingInfiniband {
        unsafe { Setting::from_glib_full(ffi::nm_setting_infiniband_new()).downcast_unchecked() }
    }
}

impl Default for SettingInfiniband {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingInfinibandExt {
    fn get_mac_address(&self) -> Option<String>;

    fn get_mtu(&self) -> u32;

    fn get_p_key(&self) -> i32;

    fn get_parent(&self) -> Option<String>;

    fn get_transport_mode(&self) -> Option<String>;

    fn get_virtual_interface_name(&self) -> Option<String>;

    fn set_property_mac_address(&self, mac_address: Option<&str>);

    fn set_property_mtu(&self, mtu: u32);

    fn set_property_p_key(&self, p_key: i32);

    fn set_property_parent(&self, parent: Option<&str>);

    fn set_property_transport_mode(&self, transport_mode: Option<&str>);

    fn connect_property_mac_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_p_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_transport_mode_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<SettingInfiniband> + IsA<glib::object::Object>> SettingInfinibandExt for O {
    fn get_mac_address(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_infiniband_get_mac_address(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_mtu(&self) -> u32 {
        unsafe { ffi::nm_setting_infiniband_get_mtu(self.to_glib_none().0) }
    }

    fn get_p_key(&self) -> i32 {
        unsafe { ffi::nm_setting_infiniband_get_p_key(self.to_glib_none().0) }
    }

    fn get_parent(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_infiniband_get_parent(self.to_glib_none().0)) }
    }

    fn get_transport_mode(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_infiniband_get_transport_mode(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_virtual_interface_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_infiniband_get_virtual_interface_name(
                self.to_glib_none().0,
            ))
        }
    }

    fn set_property_mac_address(&self, mac_address: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "mac-address".to_glib_none().0,
                Value::from(mac_address).to_glib_none().0,
            );
        }
    }

    fn set_property_mtu(&self, mtu: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "mtu".to_glib_none().0,
                Value::from(&mtu).to_glib_none().0,
            );
        }
    }

    fn set_property_p_key(&self, p_key: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "p-key".to_glib_none().0,
                Value::from(&p_key).to_glib_none().0,
            );
        }
    }

    fn set_property_parent(&self, parent: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "parent".to_glib_none().0,
                Value::from(parent).to_glib_none().0,
            );
        }
    }

    fn set_property_transport_mode(&self, transport_mode: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "transport-mode".to_glib_none().0,
                Value::from(transport_mode).to_glib_none().0,
            );
        }
    }

    fn connect_property_mac_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::mac-address",
                transmute(notify_mac_address_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::mtu",
                transmute(notify_mtu_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_p_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::p-key",
                transmute(notify_p_key_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::parent",
                transmute(notify_parent_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_transport_mode_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::transport-mode",
                transmute(notify_transport_mode_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_mac_address_trampoline<P>(
    this: *mut ffi::NMSettingInfiniband,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingInfiniband>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingInfiniband::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_mtu_trampoline<P>(
    this: *mut ffi::NMSettingInfiniband,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingInfiniband>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingInfiniband::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_p_key_trampoline<P>(
    this: *mut ffi::NMSettingInfiniband,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingInfiniband>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingInfiniband::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_parent_trampoline<P>(
    this: *mut ffi::NMSettingInfiniband,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingInfiniband>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingInfiniband::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_transport_mode_trampoline<P>(
    this: *mut ffi::NMSettingInfiniband,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingInfiniband>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingInfiniband::from_glib_borrow(this).downcast_unchecked())
}
