// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;
use SettingTunMode;

glib_wrapper! {
    pub struct SettingTun(Object<ffi::NMSettingTun, ffi::NMSettingTunClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_tun_get_type(),
    }
}

impl SettingTun {
    pub fn new() -> SettingTun {
        unsafe { Setting::from_glib_full(ffi::nm_setting_tun_new()).downcast_unchecked() }
    }
}

impl Default for SettingTun {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingTunExt {
    fn get_group(&self) -> Option<String>;

    fn get_mode(&self) -> SettingTunMode;

    fn get_multi_queue(&self) -> bool;

    fn get_owner(&self) -> Option<String>;

    fn get_pi(&self) -> bool;

    fn get_vnet_hdr(&self) -> bool;

    fn set_property_group(&self, group: Option<&str>);

    fn set_property_mode(&self, mode: u32);

    fn set_property_multi_queue(&self, multi_queue: bool);

    fn set_property_owner(&self, owner: Option<&str>);

    fn set_property_pi(&self, pi: bool);

    fn set_property_vnet_hdr(&self, vnet_hdr: bool);

    fn connect_property_group_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_multi_queue_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_owner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_pi_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vnet_hdr_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingTun> + IsA<glib::object::Object>> SettingTunExt for O {
    fn get_group(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_tun_get_group(self.to_glib_none().0)) }
    }

    fn get_mode(&self) -> SettingTunMode {
        unsafe { from_glib(ffi::nm_setting_tun_get_mode(self.to_glib_none().0)) }
    }

    fn get_multi_queue(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_tun_get_multi_queue(self.to_glib_none().0)) }
    }

    fn get_owner(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_tun_get_owner(self.to_glib_none().0)) }
    }

    fn get_pi(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_tun_get_pi(self.to_glib_none().0)) }
    }

    fn get_vnet_hdr(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_tun_get_vnet_hdr(self.to_glib_none().0)) }
    }

    fn set_property_group(&self, group: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "group".to_glib_none().0,
                Value::from(group).to_glib_none().0,
            );
        }
    }

    fn set_property_mode(&self, mode: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "mode".to_glib_none().0,
                Value::from(&mode).to_glib_none().0,
            );
        }
    }

    fn set_property_multi_queue(&self, multi_queue: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "multi-queue".to_glib_none().0,
                Value::from(&multi_queue).to_glib_none().0,
            );
        }
    }

    fn set_property_owner(&self, owner: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "owner".to_glib_none().0,
                Value::from(owner).to_glib_none().0,
            );
        }
    }

    fn set_property_pi(&self, pi: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "pi".to_glib_none().0,
                Value::from(&pi).to_glib_none().0,
            );
        }
    }

    fn set_property_vnet_hdr(&self, vnet_hdr: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "vnet-hdr".to_glib_none().0,
                Value::from(&vnet_hdr).to_glib_none().0,
            );
        }
    }

    fn connect_property_group_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::group",
                transmute(notify_group_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::mode",
                transmute(notify_mode_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_multi_queue_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::multi-queue",
                transmute(notify_multi_queue_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_owner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::owner",
                transmute(notify_owner_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_pi_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::pi",
                transmute(notify_pi_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_vnet_hdr_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::vnet-hdr",
                transmute(notify_vnet_hdr_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_group_trampoline<P>(
    this: *mut ffi::NMSettingTun,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTun>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTun::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_mode_trampoline<P>(
    this: *mut ffi::NMSettingTun,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTun>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTun::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_multi_queue_trampoline<P>(
    this: *mut ffi::NMSettingTun,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTun>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTun::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_owner_trampoline<P>(
    this: *mut ffi::NMSettingTun,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTun>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTun::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_pi_trampoline<P>(
    this: *mut ffi::NMSettingTun,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTun>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTun::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_vnet_hdr_trampoline<P>(
    this: *mut ffi::NMSettingTun,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTun>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTun::from_glib_borrow(this).downcast_unchecked())
}
