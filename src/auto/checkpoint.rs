// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use glib::signal::connect;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use std::boxed::Box as Box_;
use std::mem;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Checkpoint(Object<ffi::NMCheckpoint, ffi::NMCheckpointClass>);

    match fn {
        get_type => || ffi::nm_checkpoint_get_type(),
    }
}

pub trait CheckpointExt {
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_created(&self) -> i64;

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //fn get_devices(&self) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 11 };

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_rollback_timeout(&self) -> u32;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_created_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_rollback_timeout_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<Checkpoint> + IsA<glib::object::Object>> CheckpointExt for O {
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_created(&self) -> i64 {
        unsafe { ffi::nm_checkpoint_get_created(self.to_glib_none().0) }
    }

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //fn get_devices(&self) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 11 } {
    //    unsafe { TODO: call ffi::nm_checkpoint_get_devices() }
    //}

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_rollback_timeout(&self) -> u32 {
        unsafe { ffi::nm_checkpoint_get_rollback_timeout(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_created_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::created",
                transmute(notify_created_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::devices",
                transmute(notify_devices_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_rollback_timeout_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::rollback-timeout",
                transmute(notify_rollback_timeout_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
unsafe extern "C" fn notify_created_trampoline<P>(
    this: *mut ffi::NMCheckpoint,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Checkpoint>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Checkpoint::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
unsafe extern "C" fn notify_devices_trampoline<P>(
    this: *mut ffi::NMCheckpoint,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Checkpoint>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Checkpoint::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
unsafe extern "C" fn notify_rollback_timeout_trampoline<P>(
    this: *mut ffi::NMCheckpoint,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Checkpoint>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Checkpoint::from_glib_borrow(this).downcast_unchecked())
}
