// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::signal::connect;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::Value;
use glib_ffi;
use gobject_ffi;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use std::boxed::Box as Box_;
use std::mem;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use std::mem::transmute;
use std::ptr;
use Setting;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use SettingProxyMethod;

glib_wrapper! {
    pub struct SettingProxy(Object<ffi::NMSettingProxy, ffi::NMSettingProxyClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_proxy_get_type(),
    }
}

impl SettingProxy {
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn new() -> SettingProxy {
        unsafe { Setting::from_glib_full(ffi::nm_setting_proxy_new()).downcast_unchecked() }
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
impl Default for SettingProxy {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingProxyExt {
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_browser_only(&self) -> bool;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_method(&self) -> SettingProxyMethod;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_pac_script(&self) -> Option<String>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_pac_url(&self) -> Option<String>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_browser_only(&self, browser_only: bool);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_method(&self, method: i32);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_pac_script(&self, pac_script: Option<&str>);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_pac_url(&self, pac_url: Option<&str>);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_browser_only_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_method_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_pac_script_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_pac_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingProxy> + IsA<glib::object::Object>> SettingProxyExt for O {
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_browser_only(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_proxy_get_browser_only(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_method(&self) -> SettingProxyMethod {
        unsafe { from_glib(ffi::nm_setting_proxy_get_method(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_pac_script(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_proxy_get_pac_script(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_pac_url(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_proxy_get_pac_url(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_browser_only(&self, browser_only: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "browser-only".to_glib_none().0,
                Value::from(&browser_only).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_method(&self, method: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "method".to_glib_none().0,
                Value::from(&method).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_pac_script(&self, pac_script: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "pac-script".to_glib_none().0,
                Value::from(pac_script).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_pac_url(&self, pac_url: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "pac-url".to_glib_none().0,
                Value::from(pac_url).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_browser_only_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::browser-only",
                transmute(notify_browser_only_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_method_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::method",
                transmute(notify_method_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_pac_script_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::pac-script",
                transmute(notify_pac_script_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_pac_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::pac-url",
                transmute(notify_pac_url_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_browser_only_trampoline<P>(
    this: *mut ffi::NMSettingProxy,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingProxy>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingProxy::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_method_trampoline<P>(
    this: *mut ffi::NMSettingProxy,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingProxy>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingProxy::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_pac_script_trampoline<P>(
    this: *mut ffi::NMSettingProxy,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingProxy>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingProxy::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_pac_url_trampoline<P>(
    this: *mut ffi::NMSettingProxy,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingProxy>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingProxy::from_glib_borrow(this).downcast_unchecked())
}
