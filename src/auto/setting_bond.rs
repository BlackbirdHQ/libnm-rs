// This file was generated by gir (https://github.com/gtk-rs/gir @ 609779c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;

glib_wrapper! {
    pub struct SettingBond(Object<ffi::NMSettingBond, ffi::NMSettingBondClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_bond_get_type(),
    }
}

impl SettingBond {
    pub fn new() -> SettingBond {
        unsafe { Setting::from_glib_full(ffi::nm_setting_bond_new()).downcast_unchecked() }
    }

    pub fn validate_option(name: &str, value: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_bond_validate_option(
                name.to_glib_none().0,
                value.to_glib_none().0,
            ))
        }
    }
}

impl Default for SettingBond {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingBondExt {
    fn add_option(&self, name: &str, value: &str) -> bool;

    fn get_num_options(&self) -> u32;

    fn get_option(&self, idx: u32) -> Option<(String, String)>;

    fn get_option_by_name(&self, name: &str) -> Option<String>;

    fn get_option_default(&self, name: &str) -> Option<String>;

    fn get_valid_options(&self) -> Vec<String>;

    fn remove_option(&self, name: &str) -> bool;

    //fn get_property_options(&self) -> /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 };

    //fn set_property_options(&self, options: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 });

    fn connect_property_options_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingBond> + IsA<glib::object::Object>> SettingBondExt for O {
    fn add_option(&self, name: &str, value: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_bond_add_option(
                self.to_glib_none().0,
                name.to_glib_none().0,
                value.to_glib_none().0,
            ))
        }
    }

    fn get_num_options(&self) -> u32 {
        unsafe { ffi::nm_setting_bond_get_num_options(self.to_glib_none().0) }
    }

    fn get_option(&self, idx: u32) -> Option<(String, String)> {
        unsafe {
            let mut out_name = ptr::null();
            let mut out_value = ptr::null();
            let ret = from_glib(ffi::nm_setting_bond_get_option(
                self.to_glib_none().0,
                idx,
                &mut out_name,
                &mut out_value,
            ));
            if ret {
                Some((from_glib_none(out_name), from_glib_none(out_value)))
            } else {
                None
            }
        }
    }

    fn get_option_by_name(&self, name: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_bond_get_option_by_name(
                self.to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }

    fn get_option_default(&self, name: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_bond_get_option_default(
                self.to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }

    fn get_valid_options(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::nm_setting_bond_get_valid_options(
                self.to_glib_none().0,
            ))
        }
    }

    fn remove_option(&self, name: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_bond_remove_option(
                self.to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }

    //fn get_property_options(&self) -> /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "options".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    //fn set_property_options(&self, options: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "options".to_glib_none().0, Value::from(&options).to_glib_none().0);
    //    }
    //}

    fn connect_property_options_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::options",
                transmute(notify_options_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_options_trampoline<P>(
    this: *mut ffi::NMSettingBond,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingBond>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingBond::from_glib_borrow(this).downcast_unchecked())
}
