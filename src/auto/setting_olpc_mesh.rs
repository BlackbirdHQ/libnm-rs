// This file was generated by gir (https://github.com/gtk-rs/gir @ 609779c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;

glib_wrapper! {
    pub struct SettingOlpcMesh(Object<ffi::NMSettingOlpcMesh, ffi::NMSettingOlpcMeshClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_olpc_mesh_get_type(),
    }
}

impl SettingOlpcMesh {
    pub fn new() -> SettingOlpcMesh {
        unsafe { Setting::from_glib_full(ffi::nm_setting_olpc_mesh_new()).downcast_unchecked() }
    }
}

impl Default for SettingOlpcMesh {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingOlpcMeshExt {
    fn get_channel(&self) -> u32;

    fn get_dhcp_anycast_address(&self) -> Option<String>;

    fn get_ssid(&self) -> Option<glib::Bytes>;

    fn set_property_channel(&self, channel: u32);

    fn set_property_dhcp_anycast_address(&self, dhcp_anycast_address: Option<&str>);

    fn set_property_ssid(&self, ssid: Option<&glib::Bytes>);

    fn connect_property_channel_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_dhcp_anycast_address_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_ssid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingOlpcMesh> + IsA<glib::object::Object>> SettingOlpcMeshExt for O {
    fn get_channel(&self) -> u32 {
        unsafe { ffi::nm_setting_olpc_mesh_get_channel(self.to_glib_none().0) }
    }

    fn get_dhcp_anycast_address(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_olpc_mesh_get_dhcp_anycast_address(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_ssid(&self) -> Option<glib::Bytes> {
        unsafe { from_glib_none(ffi::nm_setting_olpc_mesh_get_ssid(self.to_glib_none().0)) }
    }

    fn set_property_channel(&self, channel: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "channel".to_glib_none().0,
                Value::from(&channel).to_glib_none().0,
            );
        }
    }

    fn set_property_dhcp_anycast_address(&self, dhcp_anycast_address: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "dhcp-anycast-address".to_glib_none().0,
                Value::from(dhcp_anycast_address).to_glib_none().0,
            );
        }
    }

    fn set_property_ssid(&self, ssid: Option<&glib::Bytes>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "ssid".to_glib_none().0,
                Value::from(ssid).to_glib_none().0,
            );
        }
    }

    fn connect_property_channel_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::channel",
                transmute(notify_channel_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_dhcp_anycast_address_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::dhcp-anycast-address",
                transmute(notify_dhcp_anycast_address_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_ssid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::ssid",
                transmute(notify_ssid_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_channel_trampoline<P>(
    this: *mut ffi::NMSettingOlpcMesh,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingOlpcMesh>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingOlpcMesh::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dhcp_anycast_address_trampoline<P>(
    this: *mut ffi::NMSettingOlpcMesh,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingOlpcMesh>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingOlpcMesh::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_ssid_trampoline<P>(
    this: *mut ffi::NMSettingOlpcMesh,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingOlpcMesh>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingOlpcMesh::from_glib_borrow(this).downcast_unchecked())
}
