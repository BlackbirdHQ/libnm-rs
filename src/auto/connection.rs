// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use ConnectionSerializationFlags;
use Error;
use Setting;
use Setting8021x;
use SettingAdsl;
use SettingBluetooth;
use SettingBond;
use SettingBridge;
use SettingBridgePort;
use SettingCdma;
use SettingCompareFlags;
use SettingConnection;
use SettingDcb;
#[cfg(any(feature = "v1_8", feature = "dox"))]
use SettingDummy;
use SettingGeneric;
use SettingGsm;
use SettingIP4Config;
use SettingIP6Config;
use SettingIPTunnel;
use SettingInfiniband;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use SettingMacsec;
use SettingMacvlan;
use SettingOlpcMesh;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use SettingOvsBridge;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use SettingOvsInterface;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use SettingOvsPatch;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use SettingOvsPort;
use SettingPpp;
use SettingPppoe;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use SettingProxy;
use SettingSerial;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use SettingTCConfig;
use SettingTeam;
use SettingTeamPort;
use SettingTun;
use SettingVlan;
use SettingVpn;
use SettingVxlan;
use SettingWired;
use SettingWireless;
use SettingWirelessSecurity;

glib_wrapper! {
    pub struct Connection(Object<ffi::NMConnection, ffi::NMConnectionInterface>);

    match fn {
        get_type => || ffi::nm_connection_get_type(),
    }
}

pub trait ConnectionExt {
    fn add_setting<P: IsA<Setting>>(&self, setting: &P);

    fn clear_secrets(&self);

    //fn clear_secrets_with_flags<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/SettingClearSecretsWithFlagsFn, user_data: P);

    fn clear_settings(&self);

    fn compare<P: IsA<Connection>>(&self, b: &P, flags: SettingCompareFlags) -> bool;

    //fn diff<P: IsA<Connection>>(&self, b: &P, flags: SettingCompareFlags, out_settings: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 40 }) -> bool;

    fn dump(&self);

    //fn for_each_setting_value<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/SettingValueIterFn, user_data: P);

    fn get_connection_type(&self) -> Option<String>;

    fn get_id(&self) -> Option<String>;

    fn get_interface_name(&self) -> Option<String>;

    fn get_path(&self) -> Option<String>;

    fn get_setting(&self, setting_type: glib::types::Type) -> Option<Setting>;

    fn get_setting_802_1x(&self) -> Option<Setting8021x>;

    fn get_setting_adsl(&self) -> Option<SettingAdsl>;

    fn get_setting_bluetooth(&self) -> Option<SettingBluetooth>;

    fn get_setting_bond(&self) -> Option<SettingBond>;

    fn get_setting_bridge(&self) -> Option<SettingBridge>;

    fn get_setting_bridge_port(&self) -> Option<SettingBridgePort>;

    fn get_setting_by_name(&self, name: &str) -> Option<Setting>;

    fn get_setting_cdma(&self) -> Option<SettingCdma>;

    fn get_setting_connection(&self) -> Option<SettingConnection>;

    fn get_setting_dcb(&self) -> Option<SettingDcb>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_setting_dummy(&self) -> Option<SettingDummy>;

    fn get_setting_generic(&self) -> Option<SettingGeneric>;

    fn get_setting_gsm(&self) -> Option<SettingGsm>;

    fn get_setting_infiniband(&self) -> Option<SettingInfiniband>;

    fn get_setting_ip4_config(&self) -> Option<SettingIP4Config>;

    fn get_setting_ip6_config(&self) -> Option<SettingIP6Config>;

    fn get_setting_ip_tunnel(&self) -> Option<SettingIPTunnel>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_setting_macsec(&self) -> Option<SettingMacsec>;

    fn get_setting_macvlan(&self) -> Option<SettingMacvlan>;

    fn get_setting_olpc_mesh(&self) -> Option<SettingOlpcMesh>;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_bridge(&self) -> Option<SettingOvsBridge>;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_interface(&self) -> Option<SettingOvsInterface>;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_patch(&self) -> Option<SettingOvsPatch>;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_port(&self) -> Option<SettingOvsPort>;

    fn get_setting_ppp(&self) -> Option<SettingPpp>;

    fn get_setting_pppoe(&self) -> Option<SettingPppoe>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_setting_proxy(&self) -> Option<SettingProxy>;

    fn get_setting_serial(&self) -> Option<SettingSerial>;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_setting_tc_config(&self) -> Option<SettingTCConfig>;

    fn get_setting_team(&self) -> Option<SettingTeam>;

    fn get_setting_team_port(&self) -> Option<SettingTeamPort>;

    fn get_setting_tun(&self) -> Option<SettingTun>;

    fn get_setting_vlan(&self) -> Option<SettingVlan>;

    fn get_setting_vpn(&self) -> Option<SettingVpn>;

    fn get_setting_vxlan(&self) -> Option<SettingVxlan>;

    fn get_setting_wired(&self) -> Option<SettingWired>;

    fn get_setting_wireless(&self) -> Option<SettingWireless>;

    fn get_setting_wireless_security(&self) -> Option<SettingWirelessSecurity>;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_settings(&self) -> Vec<Setting>;

    fn get_uuid(&self) -> Option<String>;

    fn get_virtual_device_description(&self) -> Option<String>;

    fn is_type(&self, type_: &str) -> bool;

    fn is_virtual(&self) -> bool;

    //fn need_secrets(&self, hints: /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 0, id: 28 }) -> Option<String>;

    //fn normalize<'a, P: Into<Option<&'a /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 25 }>>>(&self, parameters: P) -> Result<bool, Error>;

    fn remove_setting(&self, setting_type: glib::types::Type);

    fn replace_settings(&self, new_settings: &glib::Variant) -> Result<(), Error>;

    fn replace_settings_from_connection<P: IsA<Connection>>(&self, new_connection: &P);

    fn set_path(&self, path: &str);

    fn to_dbus(&self, flags: ConnectionSerializationFlags) -> Option<glib::Variant>;

    fn update_secrets(&self, setting_name: &str, secrets: &glib::Variant) -> Result<(), Error>;

    fn verify(&self) -> Result<(), Error>;

    fn verify_secrets(&self) -> Result<(), Error>;

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_secrets_cleared<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_secrets_updated<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Connection> + IsA<glib::object::Object>> ConnectionExt for O {
    fn add_setting<P: IsA<Setting>>(&self, setting: &P) {
        unsafe {
            ffi::nm_connection_add_setting(self.to_glib_none().0, setting.to_glib_full());
        }
    }

    fn clear_secrets(&self) {
        unsafe {
            ffi::nm_connection_clear_secrets(self.to_glib_none().0);
        }
    }

    //fn clear_secrets_with_flags<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/SettingClearSecretsWithFlagsFn, user_data: P) {
    //    unsafe { TODO: call ffi::nm_connection_clear_secrets_with_flags() }
    //}

    fn clear_settings(&self) {
        unsafe {
            ffi::nm_connection_clear_settings(self.to_glib_none().0);
        }
    }

    fn compare<P: IsA<Connection>>(&self, b: &P, flags: SettingCompareFlags) -> bool {
        unsafe {
            from_glib(ffi::nm_connection_compare(
                self.to_glib_none().0,
                b.to_glib_none().0,
                flags.to_glib(),
            ))
        }
    }

    //fn diff<P: IsA<Connection>>(&self, b: &P, flags: SettingCompareFlags, out_settings: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 40 }) -> bool {
    //    unsafe { TODO: call ffi::nm_connection_diff() }
    //}

    fn dump(&self) {
        unsafe {
            ffi::nm_connection_dump(self.to_glib_none().0);
        }
    }

    //fn for_each_setting_value<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/SettingValueIterFn, user_data: P) {
    //    unsafe { TODO: call ffi::nm_connection_for_each_setting_value() }
    //}

    fn get_connection_type(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_connection_type(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_id(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_connection_get_id(self.to_glib_none().0)) }
    }

    fn get_interface_name(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_connection_get_interface_name(self.to_glib_none().0)) }
    }

    fn get_path(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_connection_get_path(self.to_glib_none().0)) }
    }

    fn get_setting(&self, setting_type: glib::types::Type) -> Option<Setting> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting(
                self.to_glib_none().0,
                setting_type.to_glib(),
            ))
        }
    }

    fn get_setting_802_1x(&self) -> Option<Setting8021x> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_802_1x(self.to_glib_none().0)) }
    }

    fn get_setting_adsl(&self) -> Option<SettingAdsl> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_adsl(self.to_glib_none().0)) }
    }

    fn get_setting_bluetooth(&self) -> Option<SettingBluetooth> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_bluetooth(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_setting_bond(&self) -> Option<SettingBond> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_bond(self.to_glib_none().0)) }
    }

    fn get_setting_bridge(&self) -> Option<SettingBridge> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_bridge(self.to_glib_none().0)) }
    }

    fn get_setting_bridge_port(&self) -> Option<SettingBridgePort> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_bridge_port(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_setting_by_name(&self, name: &str) -> Option<Setting> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_by_name(
                self.to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }

    fn get_setting_cdma(&self) -> Option<SettingCdma> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_cdma(self.to_glib_none().0)) }
    }

    fn get_setting_connection(&self) -> Option<SettingConnection> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_connection(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_setting_dcb(&self) -> Option<SettingDcb> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_dcb(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_setting_dummy(&self) -> Option<SettingDummy> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_dummy(self.to_glib_none().0)) }
    }

    fn get_setting_generic(&self) -> Option<SettingGeneric> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_generic(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_setting_gsm(&self) -> Option<SettingGsm> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_gsm(self.to_glib_none().0)) }
    }

    fn get_setting_infiniband(&self) -> Option<SettingInfiniband> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_infiniband(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_setting_ip4_config(&self) -> Option<SettingIP4Config> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ip4_config(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_setting_ip6_config(&self) -> Option<SettingIP6Config> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ip6_config(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_setting_ip_tunnel(&self) -> Option<SettingIPTunnel> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ip_tunnel(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_setting_macsec(&self) -> Option<SettingMacsec> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_macsec(self.to_glib_none().0)) }
    }

    fn get_setting_macvlan(&self) -> Option<SettingMacvlan> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_macvlan(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_setting_olpc_mesh(&self) -> Option<SettingOlpcMesh> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_olpc_mesh(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_bridge(&self) -> Option<SettingOvsBridge> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ovs_bridge(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_interface(&self) -> Option<SettingOvsInterface> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ovs_interface(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_patch(&self) -> Option<SettingOvsPatch> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ovs_patch(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_port(&self) -> Option<SettingOvsPort> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ovs_port(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_setting_ppp(&self) -> Option<SettingPpp> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_ppp(self.to_glib_none().0)) }
    }

    fn get_setting_pppoe(&self) -> Option<SettingPppoe> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_pppoe(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_setting_proxy(&self) -> Option<SettingProxy> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_proxy(self.to_glib_none().0)) }
    }

    fn get_setting_serial(&self) -> Option<SettingSerial> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_serial(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_setting_tc_config(&self) -> Option<SettingTCConfig> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_tc_config(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_setting_team(&self) -> Option<SettingTeam> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_team(self.to_glib_none().0)) }
    }

    fn get_setting_team_port(&self) -> Option<SettingTeamPort> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_team_port(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_setting_tun(&self) -> Option<SettingTun> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_tun(self.to_glib_none().0)) }
    }

    fn get_setting_vlan(&self) -> Option<SettingVlan> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_vlan(self.to_glib_none().0)) }
    }

    fn get_setting_vpn(&self) -> Option<SettingVpn> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_vpn(self.to_glib_none().0)) }
    }

    fn get_setting_vxlan(&self) -> Option<SettingVxlan> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_vxlan(self.to_glib_none().0)) }
    }

    fn get_setting_wired(&self) -> Option<SettingWired> {
        unsafe { from_glib_none(ffi::nm_connection_get_setting_wired(self.to_glib_none().0)) }
    }

    fn get_setting_wireless(&self) -> Option<SettingWireless> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_wireless(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_setting_wireless_security(&self) -> Option<SettingWirelessSecurity> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_wireless_security(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_settings(&self) -> Vec<Setting> {
        unsafe {
            let mut out_length = mem::uninitialized();
            let ret = FromGlibContainer::from_glib_container_num(
                ffi::nm_connection_get_settings(self.to_glib_none().0, &mut out_length),
                out_length as usize,
            );
            ret
        }
    }

    fn get_uuid(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_connection_get_uuid(self.to_glib_none().0)) }
    }

    fn get_virtual_device_description(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::nm_connection_get_virtual_device_description(
                self.to_glib_none().0,
            ))
        }
    }

    fn is_type(&self, type_: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_connection_is_type(
                self.to_glib_none().0,
                type_.to_glib_none().0,
            ))
        }
    }

    fn is_virtual(&self) -> bool {
        unsafe { from_glib(ffi::nm_connection_is_virtual(self.to_glib_none().0)) }
    }

    //fn need_secrets(&self, hints: /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 0, id: 28 }) -> Option<String> {
    //    unsafe { TODO: call ffi::nm_connection_need_secrets() }
    //}

    //fn normalize<'a, P: Into<Option<&'a /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 25 }>>>(&self, parameters: P) -> Result<bool, Error> {
    //    unsafe { TODO: call ffi::nm_connection_normalize() }
    //}

    fn remove_setting(&self, setting_type: glib::types::Type) {
        unsafe {
            ffi::nm_connection_remove_setting(self.to_glib_none().0, setting_type.to_glib());
        }
    }

    fn replace_settings(&self, new_settings: &glib::Variant) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_connection_replace_settings(
                self.to_glib_none().0,
                new_settings.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn replace_settings_from_connection<P: IsA<Connection>>(&self, new_connection: &P) {
        unsafe {
            ffi::nm_connection_replace_settings_from_connection(
                self.to_glib_none().0,
                new_connection.to_glib_none().0,
            );
        }
    }

    fn set_path(&self, path: &str) {
        unsafe {
            ffi::nm_connection_set_path(self.to_glib_none().0, path.to_glib_none().0);
        }
    }

    fn to_dbus(&self, flags: ConnectionSerializationFlags) -> Option<glib::Variant> {
        unsafe {
            from_glib_none(ffi::nm_connection_to_dbus(
                self.to_glib_none().0,
                flags.to_glib(),
            ))
        }
    }

    fn update_secrets(&self, setting_name: &str, secrets: &glib::Variant) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_connection_update_secrets(
                self.to_glib_none().0,
                setting_name.to_glib_none().0,
                secrets.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn verify(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_connection_verify(self.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn verify_secrets(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_connection_verify_secrets(self.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "changed",
                transmute(changed_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_secrets_cleared<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "secrets-cleared",
                transmute(secrets_cleared_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_secrets_updated<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &str) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "secrets-updated",
                transmute(secrets_updated_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn changed_trampoline<P>(this: *mut ffi::NMConnection, f: glib_ffi::gpointer)
where
    P: IsA<Connection>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Connection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn secrets_cleared_trampoline<P>(
    this: *mut ffi::NMConnection,
    f: glib_ffi::gpointer,
) where
    P: IsA<Connection>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Connection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn secrets_updated_trampoline<P>(
    this: *mut ffi::NMConnection,
    setting_name: *mut libc::c_char,
    f: glib_ffi::gpointer,
) where
    P: IsA<Connection>,
{
    let f: &&(Fn(&P, &str) + 'static) = transmute(f);
    f(
        &Connection::from_glib_borrow(this).downcast_unchecked(),
        &String::from_glib_none(setting_name),
    )
}
