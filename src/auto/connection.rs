// This file was generated by gir (https://github.com/gtk-rs/gir @ 6855214)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use Error;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Connection(Object<ffi::NMConnection, ffi::NMConnectionInterface>);

    match fn {
        get_type => || ffi::nm_connection_get_type(),
    }
}

pub trait ConnectionExt {
    //fn add_setting<P: IsA</*Ignored*/Setting>>(&self, setting: &P);

    fn clear_secrets(&self);

    //fn clear_secrets_with_flags<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/SettingClearSecretsWithFlagsFn, user_data: P);

    fn clear_settings(&self);

    //fn compare<P: IsA<Connection>>(&self, b: &P, flags: /*Ignored*/SettingCompareFlags) -> bool;

    //fn diff<P: IsA<Connection>>(&self, b: &P, flags: /*Ignored*/SettingCompareFlags, out_settings: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 37 }) -> bool;

    fn dump(&self);

    //fn for_each_setting_value<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/SettingValueIterFn, user_data: P);

    fn get_connection_type(&self) -> Option<String>;

    fn get_id(&self) -> Option<String>;

    fn get_interface_name(&self) -> Option<String>;

    fn get_path(&self) -> Option<String>;

    //fn get_setting(&self, setting_type: glib::types::Type) -> /*Ignored*/Option<Setting>;

    //fn get_setting_802_1x(&self) -> /*Ignored*/Option<Setting8021x>;

    //fn get_setting_adsl(&self) -> /*Ignored*/Option<SettingAdsl>;

    //fn get_setting_bluetooth(&self) -> /*Ignored*/Option<SettingBluetooth>;

    //fn get_setting_bond(&self) -> /*Ignored*/Option<SettingBond>;

    //fn get_setting_bridge(&self) -> /*Ignored*/Option<SettingBridge>;

    //fn get_setting_bridge_port(&self) -> /*Ignored*/Option<SettingBridgePort>;

    //fn get_setting_by_name(&self, name: &str) -> /*Ignored*/Option<Setting>;

    //fn get_setting_cdma(&self) -> /*Ignored*/Option<SettingCdma>;

    //fn get_setting_connection(&self) -> /*Ignored*/Option<SettingConnection>;

    //fn get_setting_dcb(&self) -> /*Ignored*/Option<SettingDcb>;

    //#[cfg(any(feature = "v1_8", feature = "dox"))]
    //fn get_setting_dummy(&self) -> /*Ignored*/Option<SettingDummy>;

    //fn get_setting_generic(&self) -> /*Ignored*/Option<SettingGeneric>;

    //fn get_setting_gsm(&self) -> /*Ignored*/Option<SettingGsm>;

    //fn get_setting_infiniband(&self) -> /*Ignored*/Option<SettingInfiniband>;

    //fn get_setting_ip4_config(&self) -> /*Ignored*/Option<SettingIP4Config>;

    //fn get_setting_ip6_config(&self) -> /*Ignored*/Option<SettingIP6Config>;

    //fn get_setting_ip_tunnel(&self) -> /*Ignored*/Option<SettingIPTunnel>;

    //#[cfg(any(feature = "v1_6", feature = "dox"))]
    //fn get_setting_macsec(&self) -> /*Ignored*/Option<SettingMacsec>;

    //fn get_setting_macvlan(&self) -> /*Ignored*/Option<SettingMacvlan>;

    //fn get_setting_olpc_mesh(&self) -> /*Ignored*/Option<SettingOlpcMesh>;

    //#[cfg(any(feature = "v1_10", feature = "dox"))]
    //fn get_setting_ovs_bridge(&self) -> /*Ignored*/Option<SettingOvsBridge>;

    //#[cfg(any(feature = "v1_10", feature = "dox"))]
    //fn get_setting_ovs_interface(&self) -> /*Ignored*/Option<SettingOvsInterface>;

    //#[cfg(any(feature = "v1_10", feature = "dox"))]
    //fn get_setting_ovs_patch(&self) -> /*Ignored*/Option<SettingOvsPatch>;

    //#[cfg(any(feature = "v1_10", feature = "dox"))]
    //fn get_setting_ovs_port(&self) -> /*Ignored*/Option<SettingOvsPort>;

    //fn get_setting_ppp(&self) -> /*Ignored*/Option<SettingPpp>;

    //fn get_setting_pppoe(&self) -> /*Ignored*/Option<SettingPppoe>;

    //#[cfg(any(feature = "v1_6", feature = "dox"))]
    //fn get_setting_proxy(&self) -> /*Ignored*/Option<SettingProxy>;

    //fn get_setting_serial(&self) -> /*Ignored*/Option<SettingSerial>;

    //#[cfg(any(feature = "v1_10_2", feature = "dox"))]
    //fn get_setting_tc_config(&self) -> /*Ignored*/Option<SettingTCConfig>;

    //fn get_setting_team(&self) -> /*Ignored*/Option<SettingTeam>;

    //fn get_setting_team_port(&self) -> /*Ignored*/Option<SettingTeamPort>;

    //fn get_setting_tun(&self) -> /*Ignored*/Option<SettingTun>;

    //fn get_setting_vlan(&self) -> /*Ignored*/Option<SettingVlan>;

    //fn get_setting_vpn(&self) -> /*Ignored*/Option<SettingVpn>;

    //fn get_setting_vxlan(&self) -> /*Ignored*/Option<SettingVxlan>;

    //fn get_setting_wimax(&self) -> /*Ignored*/Option<SettingWimax>;

    //fn get_setting_wired(&self) -> /*Ignored*/Option<SettingWired>;

    //fn get_setting_wireless(&self) -> /*Ignored*/Option<SettingWireless>;

    //fn get_setting_wireless_security(&self) -> /*Ignored*/Option<SettingWirelessSecurity>;

    //#[cfg(any(feature = "v1_10", feature = "dox"))]
    //fn get_settings(&self) -> /*Ignored*/Vec<Setting>;

    fn get_uuid(&self) -> Option<String>;

    fn get_virtual_device_description(&self) -> Option<String>;

    fn is_type(&self, type_: &str) -> bool;

    fn is_virtual(&self) -> bool;

    //fn need_secrets(&self, hints: /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 0, id: 28 }) -> Option<String>;

    //fn normalize<'a, P: Into<Option<&'a /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 25 }>>>(&self, parameters: P) -> Result<bool, Error>;

    fn remove_setting(&self, setting_type: glib::types::Type);

    //fn replace_settings(&self, new_settings: /*Ignored*/&glib::Variant) -> Result<(), Error>;

    fn replace_settings_from_connection<P: IsA<Connection>>(&self, new_connection: &P);

    fn set_path(&self, path: &str);

    //fn to_dbus(&self, flags: /*Ignored*/ConnectionSerializationFlags) -> /*Ignored*/Option<glib::Variant>;

    //fn update_secrets(&self, setting_name: &str, secrets: /*Ignored*/&glib::Variant) -> Result<(), Error>;

    fn verify(&self) -> Result<(), Error>;

    fn verify_secrets(&self) -> Result<(), Error>;

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_secrets_cleared<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_secrets_updated<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Connection> + IsA<glib::object::Object>> ConnectionExt for O {
    //fn add_setting<P: IsA</*Ignored*/Setting>>(&self, setting: &P) {
    //    unsafe { TODO: call ffi::nm_connection_add_setting() }
    //}

    fn clear_secrets(&self) {
        unsafe {
            ffi::nm_connection_clear_secrets(self.to_glib_none().0);
        }
    }

    //fn clear_secrets_with_flags<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/SettingClearSecretsWithFlagsFn, user_data: P) {
    //    unsafe { TODO: call ffi::nm_connection_clear_secrets_with_flags() }
    //}

    fn clear_settings(&self) {
        unsafe {
            ffi::nm_connection_clear_settings(self.to_glib_none().0);
        }
    }

    //fn compare<P: IsA<Connection>>(&self, b: &P, flags: /*Ignored*/SettingCompareFlags) -> bool {
    //    unsafe { TODO: call ffi::nm_connection_compare() }
    //}

    //fn diff<P: IsA<Connection>>(&self, b: &P, flags: /*Ignored*/SettingCompareFlags, out_settings: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 37 }) -> bool {
    //    unsafe { TODO: call ffi::nm_connection_diff() }
    //}

    fn dump(&self) {
        unsafe {
            ffi::nm_connection_dump(self.to_glib_none().0);
        }
    }

    //fn for_each_setting_value<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/SettingValueIterFn, user_data: P) {
    //    unsafe { TODO: call ffi::nm_connection_for_each_setting_value() }
    //}

    fn get_connection_type(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_connection_type(self.to_glib_none().0))
        }
    }

    fn get_id(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_id(self.to_glib_none().0))
        }
    }

    fn get_interface_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_interface_name(self.to_glib_none().0))
        }
    }

    fn get_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_path(self.to_glib_none().0))
        }
    }

    //fn get_setting(&self, setting_type: glib::types::Type) -> /*Ignored*/Option<Setting> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting() }
    //}

    //fn get_setting_802_1x(&self) -> /*Ignored*/Option<Setting8021x> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_802_1x() }
    //}

    //fn get_setting_adsl(&self) -> /*Ignored*/Option<SettingAdsl> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_adsl() }
    //}

    //fn get_setting_bluetooth(&self) -> /*Ignored*/Option<SettingBluetooth> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_bluetooth() }
    //}

    //fn get_setting_bond(&self) -> /*Ignored*/Option<SettingBond> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_bond() }
    //}

    //fn get_setting_bridge(&self) -> /*Ignored*/Option<SettingBridge> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_bridge() }
    //}

    //fn get_setting_bridge_port(&self) -> /*Ignored*/Option<SettingBridgePort> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_bridge_port() }
    //}

    //fn get_setting_by_name(&self, name: &str) -> /*Ignored*/Option<Setting> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_by_name() }
    //}

    //fn get_setting_cdma(&self) -> /*Ignored*/Option<SettingCdma> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_cdma() }
    //}

    //fn get_setting_connection(&self) -> /*Ignored*/Option<SettingConnection> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_connection() }
    //}

    //fn get_setting_dcb(&self) -> /*Ignored*/Option<SettingDcb> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_dcb() }
    //}

    //#[cfg(any(feature = "v1_8", feature = "dox"))]
    //fn get_setting_dummy(&self) -> /*Ignored*/Option<SettingDummy> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_dummy() }
    //}

    //fn get_setting_generic(&self) -> /*Ignored*/Option<SettingGeneric> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_generic() }
    //}

    //fn get_setting_gsm(&self) -> /*Ignored*/Option<SettingGsm> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_gsm() }
    //}

    //fn get_setting_infiniband(&self) -> /*Ignored*/Option<SettingInfiniband> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_infiniband() }
    //}

    //fn get_setting_ip4_config(&self) -> /*Ignored*/Option<SettingIP4Config> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_ip4_config() }
    //}

    //fn get_setting_ip6_config(&self) -> /*Ignored*/Option<SettingIP6Config> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_ip6_config() }
    //}

    //fn get_setting_ip_tunnel(&self) -> /*Ignored*/Option<SettingIPTunnel> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_ip_tunnel() }
    //}

    //#[cfg(any(feature = "v1_6", feature = "dox"))]
    //fn get_setting_macsec(&self) -> /*Ignored*/Option<SettingMacsec> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_macsec() }
    //}

    //fn get_setting_macvlan(&self) -> /*Ignored*/Option<SettingMacvlan> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_macvlan() }
    //}

    //fn get_setting_olpc_mesh(&self) -> /*Ignored*/Option<SettingOlpcMesh> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_olpc_mesh() }
    //}

    //#[cfg(any(feature = "v1_10", feature = "dox"))]
    //fn get_setting_ovs_bridge(&self) -> /*Ignored*/Option<SettingOvsBridge> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_ovs_bridge() }
    //}

    //#[cfg(any(feature = "v1_10", feature = "dox"))]
    //fn get_setting_ovs_interface(&self) -> /*Ignored*/Option<SettingOvsInterface> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_ovs_interface() }
    //}

    //#[cfg(any(feature = "v1_10", feature = "dox"))]
    //fn get_setting_ovs_patch(&self) -> /*Ignored*/Option<SettingOvsPatch> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_ovs_patch() }
    //}

    //#[cfg(any(feature = "v1_10", feature = "dox"))]
    //fn get_setting_ovs_port(&self) -> /*Ignored*/Option<SettingOvsPort> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_ovs_port() }
    //}

    //fn get_setting_ppp(&self) -> /*Ignored*/Option<SettingPpp> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_ppp() }
    //}

    //fn get_setting_pppoe(&self) -> /*Ignored*/Option<SettingPppoe> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_pppoe() }
    //}

    //#[cfg(any(feature = "v1_6", feature = "dox"))]
    //fn get_setting_proxy(&self) -> /*Ignored*/Option<SettingProxy> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_proxy() }
    //}

    //fn get_setting_serial(&self) -> /*Ignored*/Option<SettingSerial> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_serial() }
    //}

    //#[cfg(any(feature = "v1_10_2", feature = "dox"))]
    //fn get_setting_tc_config(&self) -> /*Ignored*/Option<SettingTCConfig> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_tc_config() }
    //}

    //fn get_setting_team(&self) -> /*Ignored*/Option<SettingTeam> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_team() }
    //}

    //fn get_setting_team_port(&self) -> /*Ignored*/Option<SettingTeamPort> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_team_port() }
    //}

    //fn get_setting_tun(&self) -> /*Ignored*/Option<SettingTun> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_tun() }
    //}

    //fn get_setting_vlan(&self) -> /*Ignored*/Option<SettingVlan> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_vlan() }
    //}

    //fn get_setting_vpn(&self) -> /*Ignored*/Option<SettingVpn> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_vpn() }
    //}

    //fn get_setting_vxlan(&self) -> /*Ignored*/Option<SettingVxlan> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_vxlan() }
    //}

    //fn get_setting_wimax(&self) -> /*Ignored*/Option<SettingWimax> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_wimax() }
    //}

    //fn get_setting_wired(&self) -> /*Ignored*/Option<SettingWired> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_wired() }
    //}

    //fn get_setting_wireless(&self) -> /*Ignored*/Option<SettingWireless> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_wireless() }
    //}

    //fn get_setting_wireless_security(&self) -> /*Ignored*/Option<SettingWirelessSecurity> {
    //    unsafe { TODO: call ffi::nm_connection_get_setting_wireless_security() }
    //}

    //#[cfg(any(feature = "v1_10", feature = "dox"))]
    //fn get_settings(&self) -> /*Ignored*/Vec<Setting> {
    //    unsafe { TODO: call ffi::nm_connection_get_settings() }
    //}

    fn get_uuid(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_uuid(self.to_glib_none().0))
        }
    }

    fn get_virtual_device_description(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::nm_connection_get_virtual_device_description(self.to_glib_none().0))
        }
    }

    fn is_type(&self, type_: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_connection_is_type(self.to_glib_none().0, type_.to_glib_none().0))
        }
    }

    fn is_virtual(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_connection_is_virtual(self.to_glib_none().0))
        }
    }

    //fn need_secrets(&self, hints: /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 0, id: 28 }) -> Option<String> {
    //    unsafe { TODO: call ffi::nm_connection_need_secrets() }
    //}

    //fn normalize<'a, P: Into<Option<&'a /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 25 }>>>(&self, parameters: P) -> Result<bool, Error> {
    //    unsafe { TODO: call ffi::nm_connection_normalize() }
    //}

    fn remove_setting(&self, setting_type: glib::types::Type) {
        unsafe {
            ffi::nm_connection_remove_setting(self.to_glib_none().0, setting_type.to_glib());
        }
    }

    //fn replace_settings(&self, new_settings: /*Ignored*/&glib::Variant) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::nm_connection_replace_settings() }
    //}

    fn replace_settings_from_connection<P: IsA<Connection>>(&self, new_connection: &P) {
        unsafe {
            ffi::nm_connection_replace_settings_from_connection(self.to_glib_none().0, new_connection.to_glib_none().0);
        }
    }

    fn set_path(&self, path: &str) {
        unsafe {
            ffi::nm_connection_set_path(self.to_glib_none().0, path.to_glib_none().0);
        }
    }

    //fn to_dbus(&self, flags: /*Ignored*/ConnectionSerializationFlags) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi::nm_connection_to_dbus() }
    //}

    //fn update_secrets(&self, setting_name: &str, secrets: /*Ignored*/&glib::Variant) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::nm_connection_update_secrets() }
    //}

    fn verify(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_connection_verify(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn verify_secrets(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_connection_verify_secrets(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "changed",
                transmute(changed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_secrets_cleared<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "secrets-cleared",
                transmute(secrets_cleared_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_secrets_updated<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &str) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "secrets-updated",
                transmute(secrets_updated_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn changed_trampoline<P>(this: *mut ffi::NMConnection, f: glib_ffi::gpointer)
where P: IsA<Connection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Connection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn secrets_cleared_trampoline<P>(this: *mut ffi::NMConnection, f: glib_ffi::gpointer)
where P: IsA<Connection> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Connection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn secrets_updated_trampoline<P>(this: *mut ffi::NMConnection, setting_name: *mut libc::c_char, f: glib_ffi::gpointer)
where P: IsA<Connection> {
    callback_guard!();
    let f: &&(Fn(&P, &str) + 'static) = transmute(f);
    f(&Connection::from_glib_borrow(this).downcast_unchecked(), &String::from_glib_none(setting_name))
}
