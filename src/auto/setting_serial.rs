// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;

glib_wrapper! {
    pub struct SettingSerial(Object<ffi::NMSettingSerial, ffi::NMSettingSerialClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_serial_get_type(),
    }
}

impl SettingSerial {
    pub fn new() -> SettingSerial {
        unsafe { Setting::from_glib_full(ffi::nm_setting_serial_new()).downcast_unchecked() }
    }
}

impl Default for SettingSerial {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingSerialExt {
    fn get_baud(&self) -> u32;

    fn get_bits(&self) -> u32;

    //fn get_parity(&self) -> /*Ignored*/SettingSerialParity;

    fn get_send_delay(&self) -> u64;

    fn get_stopbits(&self) -> u32;

    fn set_property_baud(&self, baud: u32);

    fn set_property_bits(&self, bits: u32);

    //fn set_property_parity(&self, parity: /*Ignored*/SettingSerialParity);

    fn set_property_send_delay(&self, send_delay: u64);

    fn set_property_stopbits(&self, stopbits: u32);

    fn connect_property_baud_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_bits_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_parity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_send_delay_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_stopbits_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingSerial> + IsA<glib::object::Object>> SettingSerialExt for O {
    fn get_baud(&self) -> u32 {
        unsafe { ffi::nm_setting_serial_get_baud(self.to_glib_none().0) }
    }

    fn get_bits(&self) -> u32 {
        unsafe { ffi::nm_setting_serial_get_bits(self.to_glib_none().0) }
    }

    //fn get_parity(&self) -> /*Ignored*/SettingSerialParity {
    //    unsafe { TODO: call ffi::nm_setting_serial_get_parity() }
    //}

    fn get_send_delay(&self) -> u64 {
        unsafe { ffi::nm_setting_serial_get_send_delay(self.to_glib_none().0) }
    }

    fn get_stopbits(&self) -> u32 {
        unsafe { ffi::nm_setting_serial_get_stopbits(self.to_glib_none().0) }
    }

    fn set_property_baud(&self, baud: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "baud".to_glib_none().0,
                Value::from(&baud).to_glib_none().0,
            );
        }
    }

    fn set_property_bits(&self, bits: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "bits".to_glib_none().0,
                Value::from(&bits).to_glib_none().0,
            );
        }
    }

    //fn set_property_parity(&self, parity: /*Ignored*/SettingSerialParity) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "parity".to_glib_none().0, Value::from(&parity).to_glib_none().0);
    //    }
    //}

    fn set_property_send_delay(&self, send_delay: u64) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "send-delay".to_glib_none().0,
                Value::from(&send_delay).to_glib_none().0,
            );
        }
    }

    fn set_property_stopbits(&self, stopbits: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "stopbits".to_glib_none().0,
                Value::from(&stopbits).to_glib_none().0,
            );
        }
    }

    fn connect_property_baud_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::baud",
                transmute(notify_baud_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_bits_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::bits",
                transmute(notify_bits_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_parity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::parity",
                transmute(notify_parity_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_send_delay_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::send-delay",
                transmute(notify_send_delay_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_stopbits_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::stopbits",
                transmute(notify_stopbits_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_baud_trampoline<P>(
    this: *mut ffi::NMSettingSerial,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingSerial>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingSerial::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_bits_trampoline<P>(
    this: *mut ffi::NMSettingSerial,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingSerial>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingSerial::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_parity_trampoline<P>(
    this: *mut ffi::NMSettingSerial,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingSerial>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingSerial::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_send_delay_trampoline<P>(
    this: *mut ffi::NMSettingSerial,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingSerial>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingSerial::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_stopbits_trampoline<P>(
    this: *mut ffi::NMSettingSerial,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingSerial>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingSerial::from_glib_borrow(this).downcast_unchecked())
}
