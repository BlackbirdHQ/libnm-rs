// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Device;

glib_wrapper! {
    pub struct DeviceEthernet(Object<ffi::NMDeviceEthernet, ffi::NMDeviceEthernetClass>): Device;

    match fn {
        get_type => || ffi::nm_device_ethernet_get_type(),
    }
}

pub trait DeviceEthernetExt: 'static {
    fn get_carrier(&self) -> bool;

    fn get_permanent_hw_address(&self) -> Option<GString>;

    fn get_s390_subchannels(&self) -> Vec<GString>;

    fn get_speed(&self) -> u32;

    fn get_property_perm_hw_address(&self) -> Option<GString>;

    fn connect_property_carrier_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_hw_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_perm_hw_address_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_s390_subchannels_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_speed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DeviceEthernet>> DeviceEthernetExt for O {
    fn get_carrier(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_ethernet_get_carrier(self.to_glib_none().0)) }
    }

    fn get_permanent_hw_address(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::nm_device_ethernet_get_permanent_hw_address(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_s390_subchannels(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::nm_device_ethernet_get_s390_subchannels(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_speed(&self) -> u32 {
        unsafe { ffi::nm_device_ethernet_get_speed(self.to_glib_none().0) }
    }

    fn get_property_perm_hw_address(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"perm-hw-address\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value.get()
        }
    }

    fn connect_property_carrier_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::carrier\0".as_ptr() as *const _,
                transmute(notify_carrier_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_hw_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::hw-address\0".as_ptr() as *const _,
                transmute(notify_hw_address_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_perm_hw_address_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::perm-hw-address\0".as_ptr() as *const _,
                transmute(notify_perm_hw_address_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_s390_subchannels_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::s390-subchannels\0".as_ptr() as *const _,
                transmute(notify_s390_subchannels_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_speed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::speed\0".as_ptr() as *const _,
                transmute(notify_speed_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_carrier_trampoline<P>(
    this: *mut ffi::NMDeviceEthernet,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceEthernet>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceEthernet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_hw_address_trampoline<P>(
    this: *mut ffi::NMDeviceEthernet,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceEthernet>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceEthernet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_perm_hw_address_trampoline<P>(
    this: *mut ffi::NMDeviceEthernet,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceEthernet>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceEthernet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_s390_subchannels_trampoline<P>(
    this: *mut ffi::NMDeviceEthernet,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceEthernet>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceEthernet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_speed_trampoline<P>(
    this: *mut ffi::NMDeviceEthernet,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceEthernet>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceEthernet::from_glib_borrow(this).downcast_unchecked())
}

impl fmt::Display for DeviceEthernet {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DeviceEthernet")
    }
}
