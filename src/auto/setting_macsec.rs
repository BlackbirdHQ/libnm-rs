// This file was generated by gir (https://github.com/gtk-rs/gir @ 609779c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::signal::connect;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::Value;
use glib_ffi;
use gobject_ffi;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use std::boxed::Box as Box_;
use std::mem;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use std::mem::transmute;
use std::ptr;
use Setting;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use SettingMacsecMode;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use SettingMacsecValidation;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use SettingSecretFlags;

glib_wrapper! {
    pub struct SettingMacsec(Object<ffi::NMSettingMacsec, ffi::NMSettingMacsecClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_macsec_get_type(),
    }
}

impl SettingMacsec {
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn new() -> SettingMacsec {
        unsafe { Setting::from_glib_full(ffi::nm_setting_macsec_new()).downcast_unchecked() }
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
impl Default for SettingMacsec {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingMacsecExt {
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_encrypt(&self) -> bool;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mka_cak(&self) -> Option<String>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mka_cak_flags(&self) -> SettingSecretFlags;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mka_ckn(&self) -> Option<String>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mode(&self) -> SettingMacsecMode;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_parent(&self) -> Option<String>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_port(&self) -> i32;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_send_sci(&self) -> bool;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_validation(&self) -> SettingMacsecValidation;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_encrypt(&self, encrypt: bool);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mka_cak(&self, mka_cak: Option<&str>);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mka_cak_flags(&self, mka_cak_flags: SettingSecretFlags);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mka_ckn(&self, mka_ckn: Option<&str>);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mode(&self, mode: i32);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_parent(&self, parent: Option<&str>);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_port(&self, port: i32);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_send_sci(&self, send_sci: bool);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_validation(&self, validation: i32);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_encrypt_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mka_cak_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mka_cak_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mka_ckn_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_port_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_send_sci_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_validation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingMacsec> + IsA<glib::object::Object>> SettingMacsecExt for O {
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_encrypt(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_macsec_get_encrypt(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mka_cak(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_macsec_get_mka_cak(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mka_cak_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(ffi::nm_setting_macsec_get_mka_cak_flags(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mka_ckn(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_macsec_get_mka_ckn(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mode(&self) -> SettingMacsecMode {
        unsafe { from_glib(ffi::nm_setting_macsec_get_mode(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_parent(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_macsec_get_parent(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_port(&self) -> i32 {
        unsafe { ffi::nm_setting_macsec_get_port(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_send_sci(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_macsec_get_send_sci(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_validation(&self) -> SettingMacsecValidation {
        unsafe { from_glib(ffi::nm_setting_macsec_get_validation(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_encrypt(&self, encrypt: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "encrypt".to_glib_none().0,
                Value::from(&encrypt).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mka_cak(&self, mka_cak: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "mka-cak".to_glib_none().0,
                Value::from(mka_cak).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mka_cak_flags(&self, mka_cak_flags: SettingSecretFlags) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "mka-cak-flags".to_glib_none().0,
                Value::from(&mka_cak_flags).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mka_ckn(&self, mka_ckn: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "mka-ckn".to_glib_none().0,
                Value::from(mka_ckn).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mode(&self, mode: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "mode".to_glib_none().0,
                Value::from(&mode).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_parent(&self, parent: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "parent".to_glib_none().0,
                Value::from(parent).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_port(&self, port: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "port".to_glib_none().0,
                Value::from(&port).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_send_sci(&self, send_sci: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "send-sci".to_glib_none().0,
                Value::from(&send_sci).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_validation(&self, validation: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "validation".to_glib_none().0,
                Value::from(&validation).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_encrypt_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::encrypt",
                transmute(notify_encrypt_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mka_cak_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::mka-cak",
                transmute(notify_mka_cak_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mka_cak_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::mka-cak-flags",
                transmute(notify_mka_cak_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mka_ckn_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::mka-ckn",
                transmute(notify_mka_ckn_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::mode",
                transmute(notify_mode_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::parent",
                transmute(notify_parent_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_port_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::port",
                transmute(notify_port_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_send_sci_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::send-sci",
                transmute(notify_send_sci_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_validation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::validation",
                transmute(notify_validation_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_encrypt_trampoline<P>(
    this: *mut ffi::NMSettingMacsec,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingMacsec>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingMacsec::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_mka_cak_trampoline<P>(
    this: *mut ffi::NMSettingMacsec,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingMacsec>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingMacsec::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_mka_cak_flags_trampoline<P>(
    this: *mut ffi::NMSettingMacsec,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingMacsec>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingMacsec::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_mka_ckn_trampoline<P>(
    this: *mut ffi::NMSettingMacsec,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingMacsec>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingMacsec::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_mode_trampoline<P>(
    this: *mut ffi::NMSettingMacsec,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingMacsec>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingMacsec::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_parent_trampoline<P>(
    this: *mut ffi::NMSettingMacsec,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingMacsec>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingMacsec::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_port_trampoline<P>(
    this: *mut ffi::NMSettingMacsec,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingMacsec>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingMacsec::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
unsafe extern "C" fn notify_send_sci_trampoline<P>(
    this: *mut ffi::NMSettingMacsec,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingMacsec>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingMacsec::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_validation_trampoline<P>(
    this: *mut ffi::NMSettingMacsec,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingMacsec>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingMacsec::from_glib_borrow(this).downcast_unchecked())
}
