// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::StaticType;
use glib::Type;
use gobject_ffi;

#[cfg(any(feature = "v1_4", feature = "dox"))]
bitflags! {
    pub struct CheckpointCreateFlags: u32 {
        const NONE = 0;
        const DESTROY_ALL = 1;
        const DELETE_NEW_CONNECTIONS = 2;
        const DISCONNECT_NEW_DEVICES = 4;
        const ALLOW_OVERLAPPING = 8;
    }
}

#[cfg(any(feature = "v1_4", feature = "dox"))]
#[doc(hidden)]
impl ToGlib for CheckpointCreateFlags {
    type GlibType = ffi::NMCheckpointCreateFlags;

    fn to_glib(&self) -> ffi::NMCheckpointCreateFlags {
        self.bits()
    }
}

#[cfg(any(feature = "v1_4", feature = "dox"))]
#[doc(hidden)]
impl FromGlib<ffi::NMCheckpointCreateFlags> for CheckpointCreateFlags {
    fn from_glib(value: ffi::NMCheckpointCreateFlags) -> CheckpointCreateFlags {
        CheckpointCreateFlags::from_bits_truncate(value)
    }
}

#[cfg(any(feature = "v1_4", feature = "dox"))]
impl StaticType for CheckpointCreateFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::nm_checkpoint_create_flags_get_type()) }
    }
}

#[cfg(any(feature = "v1_4", feature = "dox"))]
impl<'a> FromValueOptional<'a> for CheckpointCreateFlags {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v1_4", feature = "dox"))]
impl<'a> FromValue<'a> for CheckpointCreateFlags {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v1_4", feature = "dox"))]
impl SetValue for CheckpointCreateFlags {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct DeviceWifiCapabilities: u32 {
        const NONE = 0;
        const CIPHER_WEP40 = 1;
        const CIPHER_WEP104 = 2;
        const CIPHER_TKIP = 4;
        const CIPHER_CCMP = 8;
        const WPA = 16;
        const RSN = 32;
        const AP = 64;
        const ADHOC = 128;
        const FREQ_VALID = 256;
        const FREQ_2GHZ = 512;
        const FREQ_5GHZ = 1024;
    }
}

#[doc(hidden)]
impl ToGlib for DeviceWifiCapabilities {
    type GlibType = ffi::NMDeviceWifiCapabilities;

    fn to_glib(&self) -> ffi::NMDeviceWifiCapabilities {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NMDeviceWifiCapabilities> for DeviceWifiCapabilities {
    fn from_glib(value: ffi::NMDeviceWifiCapabilities) -> DeviceWifiCapabilities {
        DeviceWifiCapabilities::from_bits_truncate(value)
    }
}

impl StaticType for DeviceWifiCapabilities {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::nm_device_wifi_capabilities_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for DeviceWifiCapabilities {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for DeviceWifiCapabilities {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for DeviceWifiCapabilities {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}
