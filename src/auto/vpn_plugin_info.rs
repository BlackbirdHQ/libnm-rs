// This file was generated by gir (https://github.com/gtk-rs/gir @ 609779c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Error;
use VpnEditorPlugin;

glib_wrapper! {
    pub struct VpnPluginInfo(Object<ffi::NMVpnPluginInfo, ffi::NMVpnPluginInfoClass>);

    match fn {
        get_type => || ffi::nm_vpn_plugin_info_get_type(),
    }
}

impl VpnPluginInfo {
    pub fn new_from_file(filename: &str) -> Result<VpnPluginInfo, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_vpn_plugin_info_new_from_file(filename.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    pub fn new_search_file<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>>(
        name: P,
        service: Q,
    ) -> VpnPluginInfo {
        let name = name.into();
        let name = name.to_glib_none();
        let service = service.into();
        let service = service.to_glib_none();
        unsafe { from_glib_full(ffi::nm_vpn_plugin_info_new_search_file(name.0, service.0)) }
    }

    pub fn new_with_data(filename: &str, keyfile: &glib::KeyFile) -> Result<VpnPluginInfo, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_vpn_plugin_info_new_with_data(
                filename.to_glib_none().0,
                keyfile.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn list_load() -> Vec<VpnPluginInfo> {
        unsafe { FromGlibPtrContainer::from_glib_full(ffi::nm_vpn_plugin_info_list_load()) }
    }

    pub fn validate_filename(filename: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_vpn_plugin_info_validate_filename(
                filename.to_glib_none().0,
            ))
        }
    }
}

pub trait VpnPluginInfoExt {
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn get_aliases(&self) -> Vec<String>;

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn get_auth_dialog(&self) -> Option<String>;

    fn get_editor_plugin(&self) -> Option<VpnEditorPlugin>;

    fn get_filename(&self) -> Option<String>;

    fn get_name(&self) -> Option<String>;

    fn get_plugin(&self) -> Option<String>;

    fn get_program(&self) -> Option<String>;

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn get_service(&self) -> Option<String>;

    fn load_editor_plugin(&self) -> Result<VpnEditorPlugin, Error>;

    fn lookup_property(&self, group: &str, key: &str) -> Option<String>;

    fn set_editor_plugin<'a, P: IsA<VpnEditorPlugin> + 'a, Q: Into<Option<&'a P>>>(
        &self,
        plugin: Q,
    );

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn supports_hints(&self) -> bool;

    fn supports_multiple(&self) -> bool;

    fn connect_property_filename_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_keyfile_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<VpnPluginInfo> + IsA<glib::object::Object>> VpnPluginInfoExt for O {
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn get_aliases(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::nm_vpn_plugin_info_get_aliases(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn get_auth_dialog(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_vpn_plugin_info_get_auth_dialog(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_editor_plugin(&self) -> Option<VpnEditorPlugin> {
        unsafe {
            from_glib_none(ffi::nm_vpn_plugin_info_get_editor_plugin(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_filename(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_vpn_plugin_info_get_filename(self.to_glib_none().0)) }
    }

    fn get_name(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_vpn_plugin_info_get_name(self.to_glib_none().0)) }
    }

    fn get_plugin(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_vpn_plugin_info_get_plugin(self.to_glib_none().0)) }
    }

    fn get_program(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_vpn_plugin_info_get_program(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn get_service(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_vpn_plugin_info_get_service(self.to_glib_none().0)) }
    }

    fn load_editor_plugin(&self) -> Result<VpnEditorPlugin, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_vpn_plugin_info_load_editor_plugin(self.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_none(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn lookup_property(&self, group: &str, key: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_vpn_plugin_info_lookup_property(
                self.to_glib_none().0,
                group.to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    fn set_editor_plugin<'a, P: IsA<VpnEditorPlugin> + 'a, Q: Into<Option<&'a P>>>(
        &self,
        plugin: Q,
    ) {
        let plugin = plugin.into();
        let plugin = plugin.to_glib_none();
        unsafe {
            ffi::nm_vpn_plugin_info_set_editor_plugin(self.to_glib_none().0, plugin.0);
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn supports_hints(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_vpn_plugin_info_supports_hints(
                self.to_glib_none().0,
            ))
        }
    }

    fn supports_multiple(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_vpn_plugin_info_supports_multiple(
                self.to_glib_none().0,
            ))
        }
    }

    fn connect_property_filename_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::filename",
                transmute(notify_filename_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_keyfile_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::keyfile",
                transmute(notify_keyfile_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::name",
                transmute(notify_name_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_filename_trampoline<P>(
    this: *mut ffi::NMVpnPluginInfo,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<VpnPluginInfo>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&VpnPluginInfo::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_keyfile_trampoline<P>(
    this: *mut ffi::NMVpnPluginInfo,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<VpnPluginInfo>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&VpnPluginInfo::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_name_trampoline<P>(
    this: *mut ffi::NMVpnPluginInfo,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<VpnPluginInfo>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&VpnPluginInfo::from_glib_borrow(this).downcast_unchecked())
}
