// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Connection;
use Error;

glib_wrapper! {
    pub struct Setting(Object<ffi::NMSetting, ffi::NMSettingClass>);

    match fn {
        get_type => || ffi::nm_setting_get_type(),
    }
}

impl Setting {
    pub fn lookup_type(name: &str) -> glib::types::Type {
        unsafe { from_glib(ffi::nm_setting_lookup_type(name.to_glib_none().0)) }
    }
}

pub trait SettingExt {
    //fn compare<P: IsA<Setting>>(&self, b: &P, flags: /*Ignored*/SettingCompareFlags) -> bool;

    //fn diff<P: IsA<Setting>>(&self, b: &P, flags: /*Ignored*/SettingCompareFlags, invert_results: bool, results: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 7 }) -> bool;

    fn duplicate(&self) -> Option<Setting>;

    //fn enumerate_values<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/SettingValueIterFn, user_data: P);

    //fn get_dbus_property_type(&self, property_name: &str) -> /*Ignored*/Option<glib::VariantType>;

    fn get_name(&self) -> Option<String>;

    //fn get_secret_flags(&self, secret_name: &str, out_flags: /*Ignored*/SettingSecretFlags) -> Result<(), Error>;

    //fn set_secret_flags(&self, secret_name: &str, flags: /*Ignored*/SettingSecretFlags) -> Result<(), Error>;

    fn to_string(&self) -> String;

    fn verify<'a, P: IsA<Connection> + 'a, Q: Into<Option<&'a P>>>(
        &self,
        connection: Q,
    ) -> Result<(), Error>;

    fn verify_secrets<'a, P: IsA<Connection> + 'a, Q: Into<Option<&'a P>>>(
        &self,
        connection: Q,
    ) -> Result<(), Error>;

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Setting> + IsA<glib::object::Object>> SettingExt for O {
    //fn compare<P: IsA<Setting>>(&self, b: &P, flags: /*Ignored*/SettingCompareFlags) -> bool {
    //    unsafe { TODO: call ffi::nm_setting_compare() }
    //}

    //fn diff<P: IsA<Setting>>(&self, b: &P, flags: /*Ignored*/SettingCompareFlags, invert_results: bool, results: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 7 }) -> bool {
    //    unsafe { TODO: call ffi::nm_setting_diff() }
    //}

    fn duplicate(&self) -> Option<Setting> {
        unsafe { from_glib_full(ffi::nm_setting_duplicate(self.to_glib_none().0)) }
    }

    //fn enumerate_values<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/SettingValueIterFn, user_data: P) {
    //    unsafe { TODO: call ffi::nm_setting_enumerate_values() }
    //}

    //fn get_dbus_property_type(&self, property_name: &str) -> /*Ignored*/Option<glib::VariantType> {
    //    unsafe { TODO: call ffi::nm_setting_get_dbus_property_type() }
    //}

    fn get_name(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_get_name(self.to_glib_none().0)) }
    }

    //fn get_secret_flags(&self, secret_name: &str, out_flags: /*Ignored*/SettingSecretFlags) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::nm_setting_get_secret_flags() }
    //}

    //fn set_secret_flags(&self, secret_name: &str, flags: /*Ignored*/SettingSecretFlags) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::nm_setting_set_secret_flags() }
    //}

    fn to_string(&self) -> String {
        unsafe { from_glib_full(ffi::nm_setting_to_string(self.to_glib_none().0)) }
    }

    fn verify<'a, P: IsA<Connection> + 'a, Q: Into<Option<&'a P>>>(
        &self,
        connection: Q,
    ) -> Result<(), Error> {
        let connection = connection.into();
        let connection = connection.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_setting_verify(self.to_glib_none().0, connection.0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn verify_secrets<'a, P: IsA<Connection> + 'a, Q: Into<Option<&'a P>>>(
        &self,
        connection: Q,
    ) -> Result<(), Error> {
        let connection = connection.into();
        let connection = connection.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_setting_verify_secrets(self.to_glib_none().0, connection.0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::name",
                transmute(notify_name_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_name_trampoline<P>(
    this: *mut ffi::NMSetting,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting::from_glib_borrow(this).downcast_unchecked())
}
