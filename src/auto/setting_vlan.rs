// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;

glib_wrapper! {
    pub struct SettingVlan(Object<ffi::NMSettingVlan, ffi::NMSettingVlanClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_vlan_get_type(),
    }
}

impl SettingVlan {
    pub fn new() -> SettingVlan {
        unsafe { Setting::from_glib_full(ffi::nm_setting_vlan_new()).downcast_unchecked() }
    }
}

impl Default for SettingVlan {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingVlanExt {
    //fn add_priority(&self, map: /*Ignored*/VlanPriorityMap, from: u32, to: u32) -> bool;

    //fn add_priority_str(&self, map: /*Ignored*/VlanPriorityMap, str: &str) -> bool;

    //fn clear_priorities(&self, map: /*Ignored*/VlanPriorityMap);

    fn get_flags(&self) -> u32;

    fn get_id(&self) -> u32;

    //fn get_num_priorities(&self, map: /*Ignored*/VlanPriorityMap) -> i32;

    fn get_parent(&self) -> Option<String>;

    //fn get_priority(&self, map: /*Ignored*/VlanPriorityMap, idx: u32) -> Option<(u32, u32)>;

    //fn remove_priority(&self, map: /*Ignored*/VlanPriorityMap, idx: u32);

    //fn remove_priority_by_value(&self, map: /*Ignored*/VlanPriorityMap, from: u32, to: u32) -> bool;

    //fn remove_priority_str_by_value(&self, map: /*Ignored*/VlanPriorityMap, str: &str) -> bool;

    fn get_property_egress_priority_map(&self) -> Vec<String>;

    fn set_property_egress_priority_map(&self, egress_priority_map: &[&str]);

    //fn set_property_flags(&self, flags: /*Ignored*/VlanFlags);

    fn set_property_id(&self, id: u32);

    fn get_property_ingress_priority_map(&self) -> Vec<String>;

    fn set_property_ingress_priority_map(&self, ingress_priority_map: &[&str]);

    fn set_property_parent(&self, parent: Option<&str>);

    fn connect_property_egress_priority_map_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_ingress_priority_map_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingVlan> + IsA<glib::object::Object>> SettingVlanExt for O {
    //fn add_priority(&self, map: /*Ignored*/VlanPriorityMap, from: u32, to: u32) -> bool {
    //    unsafe { TODO: call ffi::nm_setting_vlan_add_priority() }
    //}

    //fn add_priority_str(&self, map: /*Ignored*/VlanPriorityMap, str: &str) -> bool {
    //    unsafe { TODO: call ffi::nm_setting_vlan_add_priority_str() }
    //}

    //fn clear_priorities(&self, map: /*Ignored*/VlanPriorityMap) {
    //    unsafe { TODO: call ffi::nm_setting_vlan_clear_priorities() }
    //}

    fn get_flags(&self) -> u32 {
        unsafe { ffi::nm_setting_vlan_get_flags(self.to_glib_none().0) }
    }

    fn get_id(&self) -> u32 {
        unsafe { ffi::nm_setting_vlan_get_id(self.to_glib_none().0) }
    }

    //fn get_num_priorities(&self, map: /*Ignored*/VlanPriorityMap) -> i32 {
    //    unsafe { TODO: call ffi::nm_setting_vlan_get_num_priorities() }
    //}

    fn get_parent(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_vlan_get_parent(self.to_glib_none().0)) }
    }

    //fn get_priority(&self, map: /*Ignored*/VlanPriorityMap, idx: u32) -> Option<(u32, u32)> {
    //    unsafe { TODO: call ffi::nm_setting_vlan_get_priority() }
    //}

    //fn remove_priority(&self, map: /*Ignored*/VlanPriorityMap, idx: u32) {
    //    unsafe { TODO: call ffi::nm_setting_vlan_remove_priority() }
    //}

    //fn remove_priority_by_value(&self, map: /*Ignored*/VlanPriorityMap, from: u32, to: u32) -> bool {
    //    unsafe { TODO: call ffi::nm_setting_vlan_remove_priority_by_value() }
    //}

    //fn remove_priority_str_by_value(&self, map: /*Ignored*/VlanPriorityMap, str: &str) -> bool {
    //    unsafe { TODO: call ffi::nm_setting_vlan_remove_priority_str_by_value() }
    //}

    fn get_property_egress_priority_map(&self) -> Vec<String> {
        unsafe {
            let mut value = Value::from_type(<Vec<String> as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "egress-priority-map".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    fn set_property_egress_priority_map(&self, egress_priority_map: &[&str]) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "egress-priority-map".to_glib_none().0,
                Value::from(egress_priority_map).to_glib_none().0,
            );
        }
    }

    //fn set_property_flags(&self, flags: /*Ignored*/VlanFlags) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "flags".to_glib_none().0, Value::from(&flags).to_glib_none().0);
    //    }
    //}

    fn set_property_id(&self, id: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "id".to_glib_none().0,
                Value::from(&id).to_glib_none().0,
            );
        }
    }

    fn get_property_ingress_priority_map(&self) -> Vec<String> {
        unsafe {
            let mut value = Value::from_type(<Vec<String> as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "ingress-priority-map".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    fn set_property_ingress_priority_map(&self, ingress_priority_map: &[&str]) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "ingress-priority-map".to_glib_none().0,
                Value::from(ingress_priority_map).to_glib_none().0,
            );
        }
    }

    fn set_property_parent(&self, parent: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "parent".to_glib_none().0,
                Value::from(parent).to_glib_none().0,
            );
        }
    }

    fn connect_property_egress_priority_map_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::egress-priority-map",
                transmute(notify_egress_priority_map_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::flags",
                transmute(notify_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::id",
                transmute(notify_id_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_ingress_priority_map_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::ingress-priority-map",
                transmute(notify_ingress_priority_map_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::parent",
                transmute(notify_parent_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_egress_priority_map_trampoline<P>(
    this: *mut ffi::NMSettingVlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_flags_trampoline<P>(
    this: *mut ffi::NMSettingVlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_id_trampoline<P>(
    this: *mut ffi::NMSettingVlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_ingress_priority_map_trampoline<P>(
    this: *mut ffi::NMSettingVlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_parent_trampoline<P>(
    this: *mut ffi::NMSettingVlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVlan::from_glib_borrow(this).downcast_unchecked())
}
