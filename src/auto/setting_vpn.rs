// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;

glib_wrapper! {
    pub struct SettingVpn(Object<ffi::NMSettingVpn, ffi::NMSettingVpnClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_vpn_get_type(),
    }
}

impl SettingVpn {
    pub fn new() -> SettingVpn {
        unsafe { Setting::from_glib_full(ffi::nm_setting_vpn_new()).downcast_unchecked() }
    }
}

impl Default for SettingVpn {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingVpnExt {
    fn add_data_item(&self, key: &str, item: &str);

    fn add_secret(&self, key: &str, secret: &str);

    //fn foreach_data_item<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/VpnIterFunc, user_data: P);

    //fn foreach_secret<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/VpnIterFunc, user_data: P);

    fn get_data_item(&self, key: &str) -> Option<String>;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_data_keys(&self) -> Vec<String>;

    fn get_num_data_items(&self) -> u32;

    fn get_num_secrets(&self) -> u32;

    fn get_persistent(&self) -> bool;

    fn get_secret(&self, key: &str) -> Option<String>;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_secret_keys(&self) -> Vec<String>;

    fn get_service_type(&self) -> Option<String>;

    fn get_timeout(&self) -> u32;

    fn get_user_name(&self) -> Option<String>;

    fn remove_data_item(&self, key: &str) -> bool;

    fn remove_secret(&self, key: &str) -> bool;

    //fn get_property_data(&self) -> /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 };

    //fn set_property_data(&self, data: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 });

    fn set_property_persistent(&self, persistent: bool);

    //fn get_property_secrets(&self) -> /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 };

    //fn set_property_secrets(&self, secrets: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 });

    fn set_property_service_type(&self, service_type: Option<&str>);

    fn set_property_timeout(&self, timeout: u32);

    fn set_property_user_name(&self, user_name: Option<&str>);

    fn connect_property_data_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_persistent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_secrets_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_service_type_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_user_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingVpn> + IsA<glib::object::Object>> SettingVpnExt for O {
    fn add_data_item(&self, key: &str, item: &str) {
        unsafe {
            ffi::nm_setting_vpn_add_data_item(
                self.to_glib_none().0,
                key.to_glib_none().0,
                item.to_glib_none().0,
            );
        }
    }

    fn add_secret(&self, key: &str, secret: &str) {
        unsafe {
            ffi::nm_setting_vpn_add_secret(
                self.to_glib_none().0,
                key.to_glib_none().0,
                secret.to_glib_none().0,
            );
        }
    }

    //fn foreach_data_item<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/VpnIterFunc, user_data: P) {
    //    unsafe { TODO: call ffi::nm_setting_vpn_foreach_data_item() }
    //}

    //fn foreach_secret<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, func: /*Unknown conversion*//*Unimplemented*/VpnIterFunc, user_data: P) {
    //    unsafe { TODO: call ffi::nm_setting_vpn_foreach_secret() }
    //}

    fn get_data_item(&self, key: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_vpn_get_data_item(
                self.to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_data_keys(&self) -> Vec<String> {
        unsafe {
            let mut out_length = mem::uninitialized();
            let ret = FromGlibContainer::from_glib_container_num(
                ffi::nm_setting_vpn_get_data_keys(self.to_glib_none().0, &mut out_length),
                out_length as usize,
            );
            ret
        }
    }

    fn get_num_data_items(&self) -> u32 {
        unsafe { ffi::nm_setting_vpn_get_num_data_items(self.to_glib_none().0) }
    }

    fn get_num_secrets(&self) -> u32 {
        unsafe { ffi::nm_setting_vpn_get_num_secrets(self.to_glib_none().0) }
    }

    fn get_persistent(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_vpn_get_persistent(self.to_glib_none().0)) }
    }

    fn get_secret(&self, key: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_vpn_get_secret(
                self.to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_secret_keys(&self) -> Vec<String> {
        unsafe {
            let mut out_length = mem::uninitialized();
            let ret = FromGlibContainer::from_glib_container_num(
                ffi::nm_setting_vpn_get_secret_keys(self.to_glib_none().0, &mut out_length),
                out_length as usize,
            );
            ret
        }
    }

    fn get_service_type(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_vpn_get_service_type(self.to_glib_none().0)) }
    }

    fn get_timeout(&self) -> u32 {
        unsafe { ffi::nm_setting_vpn_get_timeout(self.to_glib_none().0) }
    }

    fn get_user_name(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_vpn_get_user_name(self.to_glib_none().0)) }
    }

    fn remove_data_item(&self, key: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_vpn_remove_data_item(
                self.to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    fn remove_secret(&self, key: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_vpn_remove_secret(
                self.to_glib_none().0,
                key.to_glib_none().0,
            ))
        }
    }

    //fn get_property_data(&self) -> /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "data".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    //fn set_property_data(&self, data: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "data".to_glib_none().0, Value::from(&data).to_glib_none().0);
    //    }
    //}

    fn set_property_persistent(&self, persistent: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "persistent".to_glib_none().0,
                Value::from(&persistent).to_glib_none().0,
            );
        }
    }

    //fn get_property_secrets(&self) -> /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "secrets".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    //fn set_property_secrets(&self, secrets: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "secrets".to_glib_none().0, Value::from(&secrets).to_glib_none().0);
    //    }
    //}

    fn set_property_service_type(&self, service_type: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "service-type".to_glib_none().0,
                Value::from(service_type).to_glib_none().0,
            );
        }
    }

    fn set_property_timeout(&self, timeout: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "timeout".to_glib_none().0,
                Value::from(&timeout).to_glib_none().0,
            );
        }
    }

    fn set_property_user_name(&self, user_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "user-name".to_glib_none().0,
                Value::from(user_name).to_glib_none().0,
            );
        }
    }

    fn connect_property_data_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::data",
                transmute(notify_data_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_persistent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::persistent",
                transmute(notify_persistent_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_secrets_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::secrets",
                transmute(notify_secrets_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_service_type_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::service-type",
                transmute(notify_service_type_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::timeout",
                transmute(notify_timeout_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_user_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::user-name",
                transmute(notify_user_name_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_data_trampoline<P>(
    this: *mut ffi::NMSettingVpn,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVpn>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVpn::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_persistent_trampoline<P>(
    this: *mut ffi::NMSettingVpn,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVpn>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVpn::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_secrets_trampoline<P>(
    this: *mut ffi::NMSettingVpn,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVpn>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVpn::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_service_type_trampoline<P>(
    this: *mut ffi::NMSettingVpn,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVpn>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVpn::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_timeout_trampoline<P>(
    this: *mut ffi::NMSettingVpn,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVpn>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVpn::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_user_name_trampoline<P>(
    this: *mut ffi::NMSettingVpn,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVpn>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVpn::from_glib_borrow(this).downcast_unchecked())
}
