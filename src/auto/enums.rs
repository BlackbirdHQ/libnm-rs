// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::StaticType;
use glib::Type;
use gobject_ffi;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
pub enum _80211Mode {
    Unknown,
    Adhoc,
    Infra,
    Ap,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for _80211Mode {
    type GlibType = ffi::NM80211Mode;

    fn to_glib(&self) -> ffi::NM80211Mode {
        match *self {
            _80211Mode::Unknown => ffi::NM_802_11_MODE_UNKNOWN,
            _80211Mode::Adhoc => ffi::NM_802_11_MODE_ADHOC,
            _80211Mode::Infra => ffi::NM_802_11_MODE_INFRA,
            _80211Mode::Ap => ffi::NM_802_11_MODE_AP,
            _80211Mode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NM80211Mode> for _80211Mode {
    fn from_glib(value: ffi::NM80211Mode) -> Self {
        match value {
            0 => _80211Mode::Unknown,
            1 => _80211Mode::Adhoc,
            2 => _80211Mode::Infra,
            3 => _80211Mode::Ap,
            value => _80211Mode::__Unknown(value),
        }
    }
}

impl StaticType for _80211Mode {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::nm_802_11_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for _80211Mode {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for _80211Mode {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for _80211Mode {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
pub enum ClientPermission {
    None,
    EnableDisableNetwork,
    EnableDisableWifi,
    EnableDisableWwan,
    EnableDisableWimax,
    SleepWake,
    NetworkControl,
    WifiShareProtected,
    WifiShareOpen,
    SettingsModifySystem,
    SettingsModifyOwn,
    SettingsModifyHostname,
    SettingsModifyGlobalDns,
    Reload,
    CheckpointRollback,
    EnableDisableStatistics,
    EnableDisableConnectivityCheck,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for ClientPermission {
    type GlibType = ffi::NMClientPermission;

    fn to_glib(&self) -> ffi::NMClientPermission {
        match *self {
            ClientPermission::None => ffi::NM_CLIENT_PERMISSION_NONE,
            ClientPermission::EnableDisableNetwork => {
                ffi::NM_CLIENT_PERMISSION_ENABLE_DISABLE_NETWORK
            }
            ClientPermission::EnableDisableWifi => ffi::NM_CLIENT_PERMISSION_ENABLE_DISABLE_WIFI,
            ClientPermission::EnableDisableWwan => ffi::NM_CLIENT_PERMISSION_ENABLE_DISABLE_WWAN,
            ClientPermission::EnableDisableWimax => ffi::NM_CLIENT_PERMISSION_ENABLE_DISABLE_WIMAX,
            ClientPermission::SleepWake => ffi::NM_CLIENT_PERMISSION_SLEEP_WAKE,
            ClientPermission::NetworkControl => ffi::NM_CLIENT_PERMISSION_NETWORK_CONTROL,
            ClientPermission::WifiShareProtected => ffi::NM_CLIENT_PERMISSION_WIFI_SHARE_PROTECTED,
            ClientPermission::WifiShareOpen => ffi::NM_CLIENT_PERMISSION_WIFI_SHARE_OPEN,
            ClientPermission::SettingsModifySystem => {
                ffi::NM_CLIENT_PERMISSION_SETTINGS_MODIFY_SYSTEM
            }
            ClientPermission::SettingsModifyOwn => ffi::NM_CLIENT_PERMISSION_SETTINGS_MODIFY_OWN,
            ClientPermission::SettingsModifyHostname => {
                ffi::NM_CLIENT_PERMISSION_SETTINGS_MODIFY_HOSTNAME
            }
            ClientPermission::SettingsModifyGlobalDns => {
                ffi::NM_CLIENT_PERMISSION_SETTINGS_MODIFY_GLOBAL_DNS
            }
            ClientPermission::Reload => ffi::NM_CLIENT_PERMISSION_RELOAD,
            ClientPermission::CheckpointRollback => ffi::NM_CLIENT_PERMISSION_CHECKPOINT_ROLLBACK,
            ClientPermission::EnableDisableStatistics => {
                ffi::NM_CLIENT_PERMISSION_ENABLE_DISABLE_STATISTICS
            }
            ClientPermission::EnableDisableConnectivityCheck => {
                ffi::NM_CLIENT_PERMISSION_ENABLE_DISABLE_CONNECTIVITY_CHECK
            }
            ClientPermission::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NMClientPermission> for ClientPermission {
    fn from_glib(value: ffi::NMClientPermission) -> Self {
        match value {
            0 => ClientPermission::None,
            1 => ClientPermission::EnableDisableNetwork,
            2 => ClientPermission::EnableDisableWifi,
            3 => ClientPermission::EnableDisableWwan,
            4 => ClientPermission::EnableDisableWimax,
            5 => ClientPermission::SleepWake,
            6 => ClientPermission::NetworkControl,
            7 => ClientPermission::WifiShareProtected,
            8 => ClientPermission::WifiShareOpen,
            9 => ClientPermission::SettingsModifySystem,
            10 => ClientPermission::SettingsModifyOwn,
            11 => ClientPermission::SettingsModifyHostname,
            12 => ClientPermission::SettingsModifyGlobalDns,
            13 => ClientPermission::Reload,
            14 => ClientPermission::CheckpointRollback,
            15 => ClientPermission::EnableDisableStatistics,
            16 => ClientPermission::EnableDisableConnectivityCheck,
            value => ClientPermission::__Unknown(value),
        }
    }
}

impl StaticType for ClientPermission {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::nm_client_permission_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ClientPermission {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ClientPermission {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for ClientPermission {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
pub enum ClientPermissionResult {
    Unknown,
    Yes,
    Auth,
    No,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for ClientPermissionResult {
    type GlibType = ffi::NMClientPermissionResult;

    fn to_glib(&self) -> ffi::NMClientPermissionResult {
        match *self {
            ClientPermissionResult::Unknown => ffi::NM_CLIENT_PERMISSION_RESULT_UNKNOWN,
            ClientPermissionResult::Yes => ffi::NM_CLIENT_PERMISSION_RESULT_YES,
            ClientPermissionResult::Auth => ffi::NM_CLIENT_PERMISSION_RESULT_AUTH,
            ClientPermissionResult::No => ffi::NM_CLIENT_PERMISSION_RESULT_NO,
            ClientPermissionResult::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NMClientPermissionResult> for ClientPermissionResult {
    fn from_glib(value: ffi::NMClientPermissionResult) -> Self {
        match value {
            0 => ClientPermissionResult::Unknown,
            1 => ClientPermissionResult::Yes,
            2 => ClientPermissionResult::Auth,
            3 => ClientPermissionResult::No,
            value => ClientPermissionResult::__Unknown(value),
        }
    }
}

impl StaticType for ClientPermissionResult {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::nm_client_permission_result_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ClientPermissionResult {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ClientPermissionResult {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for ClientPermissionResult {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
pub enum ConnectivityState {
    Unknown,
    None,
    Portal,
    Limited,
    Full,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for ConnectivityState {
    type GlibType = ffi::NMConnectivityState;

    fn to_glib(&self) -> ffi::NMConnectivityState {
        match *self {
            ConnectivityState::Unknown => ffi::NM_CONNECTIVITY_UNKNOWN,
            ConnectivityState::None => ffi::NM_CONNECTIVITY_NONE,
            ConnectivityState::Portal => ffi::NM_CONNECTIVITY_PORTAL,
            ConnectivityState::Limited => ffi::NM_CONNECTIVITY_LIMITED,
            ConnectivityState::Full => ffi::NM_CONNECTIVITY_FULL,
            ConnectivityState::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NMConnectivityState> for ConnectivityState {
    fn from_glib(value: ffi::NMConnectivityState) -> Self {
        match value {
            0 => ConnectivityState::Unknown,
            1 => ConnectivityState::None,
            2 => ConnectivityState::Portal,
            3 => ConnectivityState::Limited,
            4 => ConnectivityState::Full,
            value => ConnectivityState::__Unknown(value),
        }
    }
}

impl StaticType for ConnectivityState {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::nm_connectivity_state_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ConnectivityState {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ConnectivityState {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for ConnectivityState {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
pub enum State {
    Unknown,
    Asleep,
    Disconnected,
    Disconnecting,
    Connecting,
    ConnectedLocal,
    ConnectedSite,
    ConnectedGlobal,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl ToGlib for State {
    type GlibType = ffi::NMState;

    fn to_glib(&self) -> ffi::NMState {
        match *self {
            State::Unknown => ffi::NM_STATE_UNKNOWN,
            State::Asleep => ffi::NM_STATE_ASLEEP,
            State::Disconnected => ffi::NM_STATE_DISCONNECTED,
            State::Disconnecting => ffi::NM_STATE_DISCONNECTING,
            State::Connecting => ffi::NM_STATE_CONNECTING,
            State::ConnectedLocal => ffi::NM_STATE_CONNECTED_LOCAL,
            State::ConnectedSite => ffi::NM_STATE_CONNECTED_SITE,
            State::ConnectedGlobal => ffi::NM_STATE_CONNECTED_GLOBAL,
            State::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::NMState> for State {
    fn from_glib(value: ffi::NMState) -> Self {
        match value {
            0 => State::Unknown,
            10 => State::Asleep,
            20 => State::Disconnected,
            30 => State::Disconnecting,
            40 => State::Connecting,
            50 => State::ConnectedLocal,
            60 => State::ConnectedSite,
            70 => State::ConnectedGlobal,
            value => State::__Unknown(value),
        }
    }
}

impl StaticType for State {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::nm_state_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for State {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for State {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for State {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}
