// This file was generated by gir (https://github.com/gtk-rs/gir @ 609779c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;
#[cfg(any(feature = "v1_8", feature = "dox"))]
use Setting8021xAuthFlags;
use Setting8021xCKFormat;
use Setting8021xCKScheme;
use SettingSecretFlags;

glib_wrapper! {
    pub struct Setting8021x(Object<ffi::NMSetting8021x, ffi::NMSetting8021xClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_802_1x_get_type(),
    }
}

impl Setting8021x {
    pub fn new() -> Setting8021x {
        unsafe { Setting::from_glib_full(ffi::nm_setting_802_1x_new()).downcast_unchecked() }
    }

    //pub fn check_cert_scheme<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(pdata: P, length: usize) -> Result<Setting8021xCKScheme, Error> {
    //    unsafe { TODO: call ffi::nm_setting_802_1x_check_cert_scheme() }
    //}
}

impl Default for Setting8021x {
    fn default() -> Self {
        Self::new()
    }
}

pub trait Setting8021xExt {
    fn add_altsubject_match(&self, altsubject_match: &str) -> bool;

    fn add_eap_method(&self, eap: &str) -> bool;

    fn add_phase2_altsubject_match(&self, phase2_altsubject_match: &str) -> bool;

    fn clear_altsubject_matches(&self);

    fn clear_eap_methods(&self);

    fn clear_phase2_altsubject_matches(&self);

    fn get_altsubject_match(&self, i: u32) -> Option<String>;

    fn get_anonymous_identity(&self) -> Option<String>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_auth_timeout(&self) -> i32;

    fn get_ca_cert_blob(&self) -> Option<glib::Bytes>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_ca_cert_password(&self) -> Option<String>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_ca_cert_password_flags(&self) -> SettingSecretFlags;

    fn get_ca_cert_path(&self) -> Option<String>;

    fn get_ca_cert_scheme(&self) -> Setting8021xCKScheme;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_ca_cert_uri(&self) -> Option<String>;

    fn get_ca_path(&self) -> Option<String>;

    fn get_client_cert_blob(&self) -> Option<glib::Bytes>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_client_cert_password(&self) -> Option<String>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_client_cert_password_flags(&self) -> SettingSecretFlags;

    fn get_client_cert_path(&self) -> Option<String>;

    fn get_client_cert_scheme(&self) -> Setting8021xCKScheme;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_client_cert_uri(&self) -> Option<String>;

    fn get_domain_suffix_match(&self) -> Option<String>;

    fn get_eap_method(&self, i: u32) -> Option<String>;

    fn get_identity(&self) -> Option<String>;

    fn get_num_altsubject_matches(&self) -> u32;

    fn get_num_eap_methods(&self) -> u32;

    fn get_num_phase2_altsubject_matches(&self) -> u32;

    fn get_pac_file(&self) -> Option<String>;

    fn get_password(&self) -> Option<String>;

    fn get_password_flags(&self) -> SettingSecretFlags;

    fn get_password_raw(&self) -> Option<glib::Bytes>;

    fn get_password_raw_flags(&self) -> SettingSecretFlags;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_phase1_auth_flags(&self) -> Setting8021xAuthFlags;

    fn get_phase1_fast_provisioning(&self) -> Option<String>;

    fn get_phase1_peaplabel(&self) -> Option<String>;

    fn get_phase1_peapver(&self) -> Option<String>;

    fn get_phase2_altsubject_match(&self, i: u32) -> Option<String>;

    fn get_phase2_auth(&self) -> Option<String>;

    fn get_phase2_autheap(&self) -> Option<String>;

    fn get_phase2_ca_cert_blob(&self) -> Option<glib::Bytes>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_phase2_ca_cert_password(&self) -> Option<String>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_phase2_ca_cert_password_flags(&self) -> SettingSecretFlags;

    fn get_phase2_ca_cert_path(&self) -> Option<String>;

    fn get_phase2_ca_cert_scheme(&self) -> Setting8021xCKScheme;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_phase2_ca_cert_uri(&self) -> Option<String>;

    fn get_phase2_ca_path(&self) -> Option<String>;

    fn get_phase2_client_cert_blob(&self) -> Option<glib::Bytes>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_phase2_client_cert_password(&self) -> Option<String>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_phase2_client_cert_password_flags(&self) -> SettingSecretFlags;

    fn get_phase2_client_cert_path(&self) -> Option<String>;

    fn get_phase2_client_cert_scheme(&self) -> Setting8021xCKScheme;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_phase2_client_cert_uri(&self) -> Option<String>;

    fn get_phase2_domain_suffix_match(&self) -> Option<String>;

    fn get_phase2_private_key_blob(&self) -> Option<glib::Bytes>;

    fn get_phase2_private_key_format(&self) -> Setting8021xCKFormat;

    fn get_phase2_private_key_password(&self) -> Option<String>;

    fn get_phase2_private_key_password_flags(&self) -> SettingSecretFlags;

    fn get_phase2_private_key_path(&self) -> Option<String>;

    fn get_phase2_private_key_scheme(&self) -> Setting8021xCKScheme;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_phase2_private_key_uri(&self) -> Option<String>;

    fn get_phase2_subject_match(&self) -> Option<String>;

    fn get_pin(&self) -> Option<String>;

    fn get_pin_flags(&self) -> SettingSecretFlags;

    fn get_private_key_blob(&self) -> Option<glib::Bytes>;

    fn get_private_key_format(&self) -> Setting8021xCKFormat;

    fn get_private_key_password(&self) -> Option<String>;

    fn get_private_key_password_flags(&self) -> SettingSecretFlags;

    fn get_private_key_path(&self) -> Option<String>;

    fn get_private_key_scheme(&self) -> Setting8021xCKScheme;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_private_key_uri(&self) -> Option<String>;

    fn get_subject_match(&self) -> Option<String>;

    fn get_system_ca_certs(&self) -> bool;

    fn remove_altsubject_match(&self, i: u32);

    fn remove_altsubject_match_by_value(&self, altsubject_match: &str) -> bool;

    fn remove_eap_method(&self, i: u32);

    fn remove_eap_method_by_value(&self, eap: &str) -> bool;

    fn remove_phase2_altsubject_match(&self, i: u32);

    fn remove_phase2_altsubject_match_by_value(&self, phase2_altsubject_match: &str) -> bool;

    fn get_property_altsubject_matches(&self) -> Vec<String>;

    fn set_property_altsubject_matches(&self, altsubject_matches: &[&str]);

    fn set_property_anonymous_identity(&self, anonymous_identity: Option<&str>);

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_auth_timeout(&self, auth_timeout: i32);

    fn get_property_ca_cert(&self) -> Option<glib::Bytes>;

    fn set_property_ca_cert(&self, ca_cert: Option<&glib::Bytes>);

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_ca_cert_password(&self, ca_cert_password: Option<&str>);

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_ca_cert_password_flags(&self, ca_cert_password_flags: SettingSecretFlags);

    fn set_property_ca_path(&self, ca_path: Option<&str>);

    fn get_property_client_cert(&self) -> Option<glib::Bytes>;

    fn set_property_client_cert(&self, client_cert: Option<&glib::Bytes>);

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_client_cert_password(&self, client_cert_password: Option<&str>);

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_client_cert_password_flags(
        &self,
        client_cert_password_flags: SettingSecretFlags,
    );

    fn set_property_domain_suffix_match(&self, domain_suffix_match: Option<&str>);

    fn get_property_eap(&self) -> Vec<String>;

    fn set_property_eap(&self, eap: &[&str]);

    fn set_property_identity(&self, identity: Option<&str>);

    fn set_property_pac_file(&self, pac_file: Option<&str>);

    fn set_property_password(&self, password: Option<&str>);

    fn set_property_password_flags(&self, password_flags: SettingSecretFlags);

    fn set_property_password_raw(&self, password_raw: Option<&glib::Bytes>);

    fn set_property_password_raw_flags(&self, password_raw_flags: SettingSecretFlags);

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_phase1_auth_flags(&self, phase1_auth_flags: u32);

    fn set_property_phase1_fast_provisioning(&self, phase1_fast_provisioning: Option<&str>);

    fn set_property_phase1_peaplabel(&self, phase1_peaplabel: Option<&str>);

    fn set_property_phase1_peapver(&self, phase1_peapver: Option<&str>);

    fn get_property_phase2_altsubject_matches(&self) -> Vec<String>;

    fn set_property_phase2_altsubject_matches(&self, phase2_altsubject_matches: &[&str]);

    fn set_property_phase2_auth(&self, phase2_auth: Option<&str>);

    fn set_property_phase2_autheap(&self, phase2_autheap: Option<&str>);

    fn get_property_phase2_ca_cert(&self) -> Option<glib::Bytes>;

    fn set_property_phase2_ca_cert(&self, phase2_ca_cert: Option<&glib::Bytes>);

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_phase2_ca_cert_password(&self, phase2_ca_cert_password: Option<&str>);

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_phase2_ca_cert_password_flags(
        &self,
        phase2_ca_cert_password_flags: SettingSecretFlags,
    );

    fn set_property_phase2_ca_path(&self, phase2_ca_path: Option<&str>);

    fn get_property_phase2_client_cert(&self) -> Option<glib::Bytes>;

    fn set_property_phase2_client_cert(&self, phase2_client_cert: Option<&glib::Bytes>);

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_phase2_client_cert_password(&self, phase2_client_cert_password: Option<&str>);

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_phase2_client_cert_password_flags(
        &self,
        phase2_client_cert_password_flags: SettingSecretFlags,
    );

    fn set_property_phase2_domain_suffix_match(&self, phase2_domain_suffix_match: Option<&str>);

    fn get_property_phase2_private_key(&self) -> Option<glib::Bytes>;

    fn set_property_phase2_private_key(&self, phase2_private_key: Option<&glib::Bytes>);

    fn set_property_phase2_private_key_password(&self, phase2_private_key_password: Option<&str>);

    fn set_property_phase2_private_key_password_flags(
        &self,
        phase2_private_key_password_flags: SettingSecretFlags,
    );

    fn set_property_phase2_subject_match(&self, phase2_subject_match: Option<&str>);

    fn set_property_pin(&self, pin: Option<&str>);

    fn set_property_pin_flags(&self, pin_flags: SettingSecretFlags);

    fn get_property_private_key(&self) -> Option<glib::Bytes>;

    fn set_property_private_key(&self, private_key: Option<&glib::Bytes>);

    fn set_property_private_key_password(&self, private_key_password: Option<&str>);

    fn set_property_private_key_password_flags(
        &self,
        private_key_password_flags: SettingSecretFlags,
    );

    fn set_property_subject_match(&self, subject_match: Option<&str>);

    fn set_property_system_ca_certs(&self, system_ca_certs: bool);

    fn connect_property_altsubject_matches_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_anonymous_identity_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_auth_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_ca_cert_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_ca_cert_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_ca_cert_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_ca_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_client_cert_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_client_cert_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_client_cert_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_domain_suffix_match_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_eap_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_identity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_pac_file_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_password_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_password_raw_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_password_raw_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_phase1_auth_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase1_fast_provisioning_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase1_peaplabel_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase1_peapver_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase2_altsubject_matches_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase2_auth_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_phase2_autheap_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase2_ca_cert_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_phase2_ca_cert_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_phase2_ca_cert_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase2_ca_path_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase2_client_cert_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_phase2_client_cert_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_phase2_client_cert_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase2_domain_suffix_match_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase2_private_key_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase2_private_key_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase2_private_key_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_phase2_subject_match_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_pin_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_pin_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_private_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_private_key_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_private_key_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_subject_match_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_system_ca_certs_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<Setting8021x> + IsA<glib::object::Object>> Setting8021xExt for O {
    fn add_altsubject_match(&self, altsubject_match: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_add_altsubject_match(
                self.to_glib_none().0,
                altsubject_match.to_glib_none().0,
            ))
        }
    }

    fn add_eap_method(&self, eap: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_add_eap_method(
                self.to_glib_none().0,
                eap.to_glib_none().0,
            ))
        }
    }

    fn add_phase2_altsubject_match(&self, phase2_altsubject_match: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_add_phase2_altsubject_match(
                self.to_glib_none().0,
                phase2_altsubject_match.to_glib_none().0,
            ))
        }
    }

    fn clear_altsubject_matches(&self) {
        unsafe {
            ffi::nm_setting_802_1x_clear_altsubject_matches(self.to_glib_none().0);
        }
    }

    fn clear_eap_methods(&self) {
        unsafe {
            ffi::nm_setting_802_1x_clear_eap_methods(self.to_glib_none().0);
        }
    }

    fn clear_phase2_altsubject_matches(&self) {
        unsafe {
            ffi::nm_setting_802_1x_clear_phase2_altsubject_matches(self.to_glib_none().0);
        }
    }

    fn get_altsubject_match(&self, i: u32) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_altsubject_match(
                self.to_glib_none().0,
                i,
            ))
        }
    }

    fn get_anonymous_identity(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_anonymous_identity(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_auth_timeout(&self) -> i32 {
        unsafe { ffi::nm_setting_802_1x_get_auth_timeout(self.to_glib_none().0) }
    }

    fn get_ca_cert_blob(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_ca_cert_blob(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_ca_cert_password(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_ca_cert_password(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_ca_cert_password_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_ca_cert_password_flags(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_ca_cert_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_ca_cert_path(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_ca_cert_scheme(&self) -> Setting8021xCKScheme {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_ca_cert_scheme(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_ca_cert_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_ca_cert_uri(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_ca_path(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_802_1x_get_ca_path(self.to_glib_none().0)) }
    }

    fn get_client_cert_blob(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_client_cert_blob(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_client_cert_password(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_client_cert_password(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_client_cert_password_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_client_cert_password_flags(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_client_cert_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_client_cert_path(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_client_cert_scheme(&self) -> Setting8021xCKScheme {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_client_cert_scheme(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_client_cert_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_client_cert_uri(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_domain_suffix_match(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_domain_suffix_match(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_eap_method(&self, i: u32) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_eap_method(
                self.to_glib_none().0,
                i,
            ))
        }
    }

    fn get_identity(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_802_1x_get_identity(self.to_glib_none().0)) }
    }

    fn get_num_altsubject_matches(&self) -> u32 {
        unsafe { ffi::nm_setting_802_1x_get_num_altsubject_matches(self.to_glib_none().0) }
    }

    fn get_num_eap_methods(&self) -> u32 {
        unsafe { ffi::nm_setting_802_1x_get_num_eap_methods(self.to_glib_none().0) }
    }

    fn get_num_phase2_altsubject_matches(&self) -> u32 {
        unsafe { ffi::nm_setting_802_1x_get_num_phase2_altsubject_matches(self.to_glib_none().0) }
    }

    fn get_pac_file(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_802_1x_get_pac_file(self.to_glib_none().0)) }
    }

    fn get_password(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_802_1x_get_password(self.to_glib_none().0)) }
    }

    fn get_password_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_password_flags(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_password_raw(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_password_raw(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_password_raw_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_password_raw_flags(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_phase1_auth_flags(&self) -> Setting8021xAuthFlags {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_phase1_auth_flags(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase1_fast_provisioning(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase1_fast_provisioning(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase1_peaplabel(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase1_peaplabel(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase1_peapver(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase1_peapver(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_altsubject_match(&self, i: u32) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_altsubject_match(
                self.to_glib_none().0,
                i,
            ))
        }
    }

    fn get_phase2_auth(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_auth(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_autheap(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_autheap(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_ca_cert_blob(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_ca_cert_blob(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_phase2_ca_cert_password(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_ca_cert_password(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_phase2_ca_cert_password_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_phase2_ca_cert_password_flags(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_ca_cert_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_ca_cert_path(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_ca_cert_scheme(&self) -> Setting8021xCKScheme {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_phase2_ca_cert_scheme(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_phase2_ca_cert_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_ca_cert_uri(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_ca_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_ca_path(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_client_cert_blob(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_client_cert_blob(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_phase2_client_cert_password(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_client_cert_password(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_phase2_client_cert_password_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(
                ffi::nm_setting_802_1x_get_phase2_client_cert_password_flags(self.to_glib_none().0),
            )
        }
    }

    fn get_phase2_client_cert_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_client_cert_path(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_client_cert_scheme(&self) -> Setting8021xCKScheme {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_phase2_client_cert_scheme(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_phase2_client_cert_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_client_cert_uri(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_domain_suffix_match(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_domain_suffix_match(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_private_key_blob(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_private_key_blob(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_private_key_format(&self) -> Setting8021xCKFormat {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_phase2_private_key_format(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_private_key_password(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_private_key_password(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_private_key_password_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(
                ffi::nm_setting_802_1x_get_phase2_private_key_password_flags(self.to_glib_none().0),
            )
        }
    }

    fn get_phase2_private_key_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_private_key_path(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_private_key_scheme(&self) -> Setting8021xCKScheme {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_phase2_private_key_scheme(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_phase2_private_key_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_private_key_uri(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_phase2_subject_match(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_phase2_subject_match(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_pin(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_802_1x_get_pin(self.to_glib_none().0)) }
    }

    fn get_pin_flags(&self) -> SettingSecretFlags {
        unsafe { from_glib(ffi::nm_setting_802_1x_get_pin_flags(self.to_glib_none().0)) }
    }

    fn get_private_key_blob(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_private_key_blob(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_private_key_format(&self) -> Setting8021xCKFormat {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_private_key_format(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_private_key_password(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_private_key_password(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_private_key_password_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_private_key_password_flags(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_private_key_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_private_key_path(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_private_key_scheme(&self) -> Setting8021xCKScheme {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_private_key_scheme(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_private_key_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_private_key_uri(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_subject_match(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_802_1x_get_subject_match(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_system_ca_certs(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_get_system_ca_certs(
                self.to_glib_none().0,
            ))
        }
    }

    fn remove_altsubject_match(&self, i: u32) {
        unsafe {
            ffi::nm_setting_802_1x_remove_altsubject_match(self.to_glib_none().0, i);
        }
    }

    fn remove_altsubject_match_by_value(&self, altsubject_match: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_remove_altsubject_match_by_value(
                self.to_glib_none().0,
                altsubject_match.to_glib_none().0,
            ))
        }
    }

    fn remove_eap_method(&self, i: u32) {
        unsafe {
            ffi::nm_setting_802_1x_remove_eap_method(self.to_glib_none().0, i);
        }
    }

    fn remove_eap_method_by_value(&self, eap: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_802_1x_remove_eap_method_by_value(
                self.to_glib_none().0,
                eap.to_glib_none().0,
            ))
        }
    }

    fn remove_phase2_altsubject_match(&self, i: u32) {
        unsafe {
            ffi::nm_setting_802_1x_remove_phase2_altsubject_match(self.to_glib_none().0, i);
        }
    }

    fn remove_phase2_altsubject_match_by_value(&self, phase2_altsubject_match: &str) -> bool {
        unsafe {
            from_glib(
                ffi::nm_setting_802_1x_remove_phase2_altsubject_match_by_value(
                    self.to_glib_none().0,
                    phase2_altsubject_match.to_glib_none().0,
                ),
            )
        }
    }

    fn get_property_altsubject_matches(&self) -> Vec<String> {
        unsafe {
            let mut value = Value::from_type(<Vec<String> as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "altsubject-matches".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    fn set_property_altsubject_matches(&self, altsubject_matches: &[&str]) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "altsubject-matches".to_glib_none().0,
                Value::from(altsubject_matches).to_glib_none().0,
            );
        }
    }

    fn set_property_anonymous_identity(&self, anonymous_identity: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "anonymous-identity".to_glib_none().0,
                Value::from(anonymous_identity).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_auth_timeout(&self, auth_timeout: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "auth-timeout".to_glib_none().0,
                Value::from(&auth_timeout).to_glib_none().0,
            );
        }
    }

    fn get_property_ca_cert(&self) -> Option<glib::Bytes> {
        unsafe {
            let mut value = Value::from_type(<glib::Bytes as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "ca-cert".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get()
        }
    }

    fn set_property_ca_cert(&self, ca_cert: Option<&glib::Bytes>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "ca-cert".to_glib_none().0,
                Value::from(ca_cert).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_ca_cert_password(&self, ca_cert_password: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "ca-cert-password".to_glib_none().0,
                Value::from(ca_cert_password).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_ca_cert_password_flags(&self, ca_cert_password_flags: SettingSecretFlags) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "ca-cert-password-flags".to_glib_none().0,
                Value::from(&ca_cert_password_flags).to_glib_none().0,
            );
        }
    }

    fn set_property_ca_path(&self, ca_path: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "ca-path".to_glib_none().0,
                Value::from(ca_path).to_glib_none().0,
            );
        }
    }

    fn get_property_client_cert(&self) -> Option<glib::Bytes> {
        unsafe {
            let mut value = Value::from_type(<glib::Bytes as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "client-cert".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get()
        }
    }

    fn set_property_client_cert(&self, client_cert: Option<&glib::Bytes>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "client-cert".to_glib_none().0,
                Value::from(client_cert).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_client_cert_password(&self, client_cert_password: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "client-cert-password".to_glib_none().0,
                Value::from(client_cert_password).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_client_cert_password_flags(
        &self,
        client_cert_password_flags: SettingSecretFlags,
    ) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "client-cert-password-flags".to_glib_none().0,
                Value::from(&client_cert_password_flags).to_glib_none().0,
            );
        }
    }

    fn set_property_domain_suffix_match(&self, domain_suffix_match: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "domain-suffix-match".to_glib_none().0,
                Value::from(domain_suffix_match).to_glib_none().0,
            );
        }
    }

    fn get_property_eap(&self) -> Vec<String> {
        unsafe {
            let mut value = Value::from_type(<Vec<String> as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "eap".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    fn set_property_eap(&self, eap: &[&str]) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "eap".to_glib_none().0,
                Value::from(eap).to_glib_none().0,
            );
        }
    }

    fn set_property_identity(&self, identity: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "identity".to_glib_none().0,
                Value::from(identity).to_glib_none().0,
            );
        }
    }

    fn set_property_pac_file(&self, pac_file: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "pac-file".to_glib_none().0,
                Value::from(pac_file).to_glib_none().0,
            );
        }
    }

    fn set_property_password(&self, password: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "password".to_glib_none().0,
                Value::from(password).to_glib_none().0,
            );
        }
    }

    fn set_property_password_flags(&self, password_flags: SettingSecretFlags) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "password-flags".to_glib_none().0,
                Value::from(&password_flags).to_glib_none().0,
            );
        }
    }

    fn set_property_password_raw(&self, password_raw: Option<&glib::Bytes>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "password-raw".to_glib_none().0,
                Value::from(password_raw).to_glib_none().0,
            );
        }
    }

    fn set_property_password_raw_flags(&self, password_raw_flags: SettingSecretFlags) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "password-raw-flags".to_glib_none().0,
                Value::from(&password_raw_flags).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_phase1_auth_flags(&self, phase1_auth_flags: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase1-auth-flags".to_glib_none().0,
                Value::from(&phase1_auth_flags).to_glib_none().0,
            );
        }
    }

    fn set_property_phase1_fast_provisioning(&self, phase1_fast_provisioning: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase1-fast-provisioning".to_glib_none().0,
                Value::from(phase1_fast_provisioning).to_glib_none().0,
            );
        }
    }

    fn set_property_phase1_peaplabel(&self, phase1_peaplabel: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase1-peaplabel".to_glib_none().0,
                Value::from(phase1_peaplabel).to_glib_none().0,
            );
        }
    }

    fn set_property_phase1_peapver(&self, phase1_peapver: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase1-peapver".to_glib_none().0,
                Value::from(phase1_peapver).to_glib_none().0,
            );
        }
    }

    fn get_property_phase2_altsubject_matches(&self) -> Vec<String> {
        unsafe {
            let mut value = Value::from_type(<Vec<String> as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "phase2-altsubject-matches".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    fn set_property_phase2_altsubject_matches(&self, phase2_altsubject_matches: &[&str]) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-altsubject-matches".to_glib_none().0,
                Value::from(phase2_altsubject_matches).to_glib_none().0,
            );
        }
    }

    fn set_property_phase2_auth(&self, phase2_auth: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-auth".to_glib_none().0,
                Value::from(phase2_auth).to_glib_none().0,
            );
        }
    }

    fn set_property_phase2_autheap(&self, phase2_autheap: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-autheap".to_glib_none().0,
                Value::from(phase2_autheap).to_glib_none().0,
            );
        }
    }

    fn get_property_phase2_ca_cert(&self) -> Option<glib::Bytes> {
        unsafe {
            let mut value = Value::from_type(<glib::Bytes as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "phase2-ca-cert".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get()
        }
    }

    fn set_property_phase2_ca_cert(&self, phase2_ca_cert: Option<&glib::Bytes>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-ca-cert".to_glib_none().0,
                Value::from(phase2_ca_cert).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_phase2_ca_cert_password(&self, phase2_ca_cert_password: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-ca-cert-password".to_glib_none().0,
                Value::from(phase2_ca_cert_password).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_phase2_ca_cert_password_flags(
        &self,
        phase2_ca_cert_password_flags: SettingSecretFlags,
    ) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-ca-cert-password-flags".to_glib_none().0,
                Value::from(&phase2_ca_cert_password_flags).to_glib_none().0,
            );
        }
    }

    fn set_property_phase2_ca_path(&self, phase2_ca_path: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-ca-path".to_glib_none().0,
                Value::from(phase2_ca_path).to_glib_none().0,
            );
        }
    }

    fn get_property_phase2_client_cert(&self) -> Option<glib::Bytes> {
        unsafe {
            let mut value = Value::from_type(<glib::Bytes as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "phase2-client-cert".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get()
        }
    }

    fn set_property_phase2_client_cert(&self, phase2_client_cert: Option<&glib::Bytes>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-client-cert".to_glib_none().0,
                Value::from(phase2_client_cert).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_phase2_client_cert_password(&self, phase2_client_cert_password: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-client-cert-password".to_glib_none().0,
                Value::from(phase2_client_cert_password).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn set_property_phase2_client_cert_password_flags(
        &self,
        phase2_client_cert_password_flags: SettingSecretFlags,
    ) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-client-cert-password-flags".to_glib_none().0,
                Value::from(&phase2_client_cert_password_flags)
                    .to_glib_none()
                    .0,
            );
        }
    }

    fn set_property_phase2_domain_suffix_match(&self, phase2_domain_suffix_match: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-domain-suffix-match".to_glib_none().0,
                Value::from(phase2_domain_suffix_match).to_glib_none().0,
            );
        }
    }

    fn get_property_phase2_private_key(&self) -> Option<glib::Bytes> {
        unsafe {
            let mut value = Value::from_type(<glib::Bytes as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "phase2-private-key".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get()
        }
    }

    fn set_property_phase2_private_key(&self, phase2_private_key: Option<&glib::Bytes>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-private-key".to_glib_none().0,
                Value::from(phase2_private_key).to_glib_none().0,
            );
        }
    }

    fn set_property_phase2_private_key_password(&self, phase2_private_key_password: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-private-key-password".to_glib_none().0,
                Value::from(phase2_private_key_password).to_glib_none().0,
            );
        }
    }

    fn set_property_phase2_private_key_password_flags(
        &self,
        phase2_private_key_password_flags: SettingSecretFlags,
    ) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-private-key-password-flags".to_glib_none().0,
                Value::from(&phase2_private_key_password_flags)
                    .to_glib_none()
                    .0,
            );
        }
    }

    fn set_property_phase2_subject_match(&self, phase2_subject_match: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "phase2-subject-match".to_glib_none().0,
                Value::from(phase2_subject_match).to_glib_none().0,
            );
        }
    }

    fn set_property_pin(&self, pin: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "pin".to_glib_none().0,
                Value::from(pin).to_glib_none().0,
            );
        }
    }

    fn set_property_pin_flags(&self, pin_flags: SettingSecretFlags) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "pin-flags".to_glib_none().0,
                Value::from(&pin_flags).to_glib_none().0,
            );
        }
    }

    fn get_property_private_key(&self) -> Option<glib::Bytes> {
        unsafe {
            let mut value = Value::from_type(<glib::Bytes as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "private-key".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get()
        }
    }

    fn set_property_private_key(&self, private_key: Option<&glib::Bytes>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "private-key".to_glib_none().0,
                Value::from(private_key).to_glib_none().0,
            );
        }
    }

    fn set_property_private_key_password(&self, private_key_password: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "private-key-password".to_glib_none().0,
                Value::from(private_key_password).to_glib_none().0,
            );
        }
    }

    fn set_property_private_key_password_flags(
        &self,
        private_key_password_flags: SettingSecretFlags,
    ) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "private-key-password-flags".to_glib_none().0,
                Value::from(&private_key_password_flags).to_glib_none().0,
            );
        }
    }

    fn set_property_subject_match(&self, subject_match: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "subject-match".to_glib_none().0,
                Value::from(subject_match).to_glib_none().0,
            );
        }
    }

    fn set_property_system_ca_certs(&self, system_ca_certs: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "system-ca-certs".to_glib_none().0,
                Value::from(&system_ca_certs).to_glib_none().0,
            );
        }
    }

    fn connect_property_altsubject_matches_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::altsubject-matches",
                transmute(notify_altsubject_matches_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_anonymous_identity_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::anonymous-identity",
                transmute(notify_anonymous_identity_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_auth_timeout_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::auth-timeout",
                transmute(notify_auth_timeout_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_ca_cert_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::ca-cert",
                transmute(notify_ca_cert_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_ca_cert_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::ca-cert-password",
                transmute(notify_ca_cert_password_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_ca_cert_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::ca-cert-password-flags",
                transmute(notify_ca_cert_password_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_ca_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::ca-path",
                transmute(notify_ca_path_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_client_cert_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::client-cert",
                transmute(notify_client_cert_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_client_cert_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::client-cert-password",
                transmute(notify_client_cert_password_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_client_cert_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::client-cert-password-flags",
                transmute(notify_client_cert_password_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_domain_suffix_match_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::domain-suffix-match",
                transmute(notify_domain_suffix_match_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_eap_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::eap",
                transmute(notify_eap_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_identity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::identity",
                transmute(notify_identity_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_pac_file_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::pac-file",
                transmute(notify_pac_file_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_password_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::password",
                transmute(notify_password_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::password-flags",
                transmute(notify_password_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_password_raw_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::password-raw",
                transmute(notify_password_raw_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_password_raw_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::password-raw-flags",
                transmute(notify_password_raw_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_phase1_auth_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase1-auth-flags",
                transmute(notify_phase1_auth_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase1_fast_provisioning_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase1-fast-provisioning",
                transmute(notify_phase1_fast_provisioning_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase1_peaplabel_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase1-peaplabel",
                transmute(notify_phase1_peaplabel_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase1_peapver_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase1-peapver",
                transmute(notify_phase1_peapver_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase2_altsubject_matches_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-altsubject-matches",
                transmute(notify_phase2_altsubject_matches_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase2_auth_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-auth",
                transmute(notify_phase2_auth_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase2_autheap_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-autheap",
                transmute(notify_phase2_autheap_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase2_ca_cert_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-ca-cert",
                transmute(notify_phase2_ca_cert_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_phase2_ca_cert_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-ca-cert-password",
                transmute(notify_phase2_ca_cert_password_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_phase2_ca_cert_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-ca-cert-password-flags",
                transmute(notify_phase2_ca_cert_password_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase2_ca_path_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-ca-path",
                transmute(notify_phase2_ca_path_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase2_client_cert_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-client-cert",
                transmute(notify_phase2_client_cert_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_phase2_client_cert_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-client-cert-password",
                transmute(notify_phase2_client_cert_password_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn connect_property_phase2_client_cert_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-client-cert-password-flags",
                transmute(notify_phase2_client_cert_password_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase2_domain_suffix_match_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-domain-suffix-match",
                transmute(notify_phase2_domain_suffix_match_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase2_private_key_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-private-key",
                transmute(notify_phase2_private_key_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase2_private_key_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-private-key-password",
                transmute(notify_phase2_private_key_password_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase2_private_key_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-private-key-password-flags",
                transmute(notify_phase2_private_key_password_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_phase2_subject_match_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::phase2-subject-match",
                transmute(notify_phase2_subject_match_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_pin_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::pin",
                transmute(notify_pin_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_pin_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::pin-flags",
                transmute(notify_pin_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_private_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::private-key",
                transmute(notify_private_key_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_private_key_password_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::private-key-password",
                transmute(notify_private_key_password_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_private_key_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::private-key-password-flags",
                transmute(notify_private_key_password_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_subject_match_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::subject-match",
                transmute(notify_subject_match_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_system_ca_certs_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::system-ca-certs",
                transmute(notify_system_ca_certs_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_altsubject_matches_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_anonymous_identity_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
unsafe extern "C" fn notify_auth_timeout_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_ca_cert_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
unsafe extern "C" fn notify_ca_cert_password_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
unsafe extern "C" fn notify_ca_cert_password_flags_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_ca_path_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_client_cert_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
unsafe extern "C" fn notify_client_cert_password_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
unsafe extern "C" fn notify_client_cert_password_flags_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_domain_suffix_match_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_eap_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_identity_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_pac_file_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_password_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_password_flags_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_password_raw_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_password_raw_flags_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
unsafe extern "C" fn notify_phase1_auth_flags_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase1_fast_provisioning_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase1_peaplabel_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase1_peapver_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase2_altsubject_matches_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase2_auth_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase2_autheap_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase2_ca_cert_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
unsafe extern "C" fn notify_phase2_ca_cert_password_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
unsafe extern "C" fn notify_phase2_ca_cert_password_flags_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase2_ca_path_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase2_client_cert_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
unsafe extern "C" fn notify_phase2_client_cert_password_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_8", feature = "dox"))]
unsafe extern "C" fn notify_phase2_client_cert_password_flags_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase2_domain_suffix_match_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase2_private_key_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase2_private_key_password_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase2_private_key_password_flags_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_phase2_subject_match_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_pin_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_pin_flags_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_private_key_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_private_key_password_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_private_key_password_flags_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_subject_match_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_system_ca_certs_trampoline<P>(
    this: *mut ffi::NMSetting8021x,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<Setting8021x>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Setting8021x::from_glib_borrow(this).downcast_unchecked())
}
