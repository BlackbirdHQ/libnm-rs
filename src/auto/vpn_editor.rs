// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Connection;
use Error;

glib_wrapper! {
    pub struct VpnEditor(Object<ffi::NMVpnEditor, ffi::NMVpnEditorInterface>);

    match fn {
        get_type => || ffi::nm_vpn_editor_get_type(),
    }
}

pub trait VpnEditorExt {
    fn get_widget(&self) -> Option<glib::Object>;

    fn update_connection<P: IsA<Connection>>(&self, connection: &P) -> Result<(), Error>;

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<VpnEditor> + IsA<glib::object::Object>> VpnEditorExt for O {
    fn get_widget(&self) -> Option<glib::Object> {
        unsafe { from_glib_none(ffi::nm_vpn_editor_get_widget(self.to_glib_none().0)) }
    }

    fn update_connection<P: IsA<Connection>>(&self, connection: &P) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_vpn_editor_update_connection(
                self.to_glib_none().0,
                connection.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "changed",
                transmute(changed_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn changed_trampoline<P>(this: *mut ffi::NMVpnEditor, f: glib_ffi::gpointer)
where
    P: IsA<VpnEditor>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&VpnEditor::from_glib_borrow(this).downcast_unchecked())
}
