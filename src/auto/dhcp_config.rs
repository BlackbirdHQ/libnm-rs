// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DhcpConfig(Object<ffi::NMDhcpConfig, ffi::NMDhcpConfigClass>);

    match fn {
        get_type => || ffi::nm_dhcp_config_get_type(),
    }
}

pub trait DhcpConfigExt {
    fn get_family(&self) -> i32;

    fn get_one_option(&self, option: &str) -> Option<String>;

    //fn get_options(&self) -> /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 };

    fn connect_property_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_options_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DhcpConfig> + IsA<glib::object::Object>> DhcpConfigExt for O {
    fn get_family(&self) -> i32 {
        unsafe { ffi::nm_dhcp_config_get_family(self.to_glib_none().0) }
    }

    fn get_one_option(&self, option: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_dhcp_config_get_one_option(
                self.to_glib_none().0,
                option.to_glib_none().0,
            ))
        }
    }

    //fn get_options(&self) -> /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 } {
    //    unsafe { TODO: call ffi::nm_dhcp_config_get_options() }
    //}

    fn connect_property_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::family",
                transmute(notify_family_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_options_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::options",
                transmute(notify_options_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_family_trampoline<P>(
    this: *mut ffi::NMDhcpConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DhcpConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DhcpConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_options_trampoline<P>(
    this: *mut ffi::NMDhcpConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DhcpConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DhcpConfig::from_glib_borrow(this).downcast_unchecked())
}
