// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
#[cfg(feature = "futures")]
use futures_core;
use gio;
use gio_ffi;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use ActiveConnection;
use ClientPermission;
use ClientPermissionResult;
use Connection;
use ConnectivityState;
use Device;
use Error;
use RemoteConnection;
use State;

glib_wrapper! {
    pub struct Client(Object<ffi::NMClient, ffi::NMClientClass>);

    match fn {
        get_type => || ffi::nm_client_get_type(),
    }
}

impl Client {
    pub fn new<'a, P: Into<Option<&'a gio::Cancellable>>>(cancellable: P) -> Result<Client, Error> {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_client_new(cancellable.0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn activate_connection_async<
        'a,
        'b,
        'c,
        'd,
        P: IsA<Connection> + 'a,
        Q: Into<Option<&'a P>>,
        R: IsA<Device> + 'b,
        S: Into<Option<&'b R>>,
        T: Into<Option<&'c str>>,
        U: Into<Option<&'d gio::Cancellable>>,
        V: FnOnce(Result<ActiveConnection, Error>) + Send + 'static,
    >(
        &self,
        connection: Q,
        device: S,
        specific_object: T,
        cancellable: U,
        callback: V,
    ) {
        let connection = connection.into();
        let connection = connection.to_glib_none();
        let device = device.into();
        let device = device.to_glib_none();
        let specific_object = specific_object.into();
        let specific_object = specific_object.to_glib_none();
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        let user_data: Box<Box<V>> = Box::new(Box::new(callback));
        unsafe extern "C" fn activate_connection_async_trampoline<
            V: FnOnce(Result<ActiveConnection, Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_ffi::GObject,
            res: *mut gio_ffi::GAsyncResult,
            user_data: glib_ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_client_activate_connection_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Box<V>> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = activate_connection_async_trampoline::<V>;
        unsafe {
            ffi::nm_client_activate_connection_async(
                self.to_glib_none().0,
                connection.0,
                device.0,
                specific_object.0,
                cancellable.0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn activate_connection_async_future<
        'a,
        'b,
        'c,
        P: IsA<Connection> + Clone + 'static,
        Q: Into<Option<&'a P>>,
        R: IsA<Device> + Clone + 'static,
        S: Into<Option<&'b R>>,
        T: Into<Option<&'c str>>,
    >(
        &self,
        connection: Q,
        device: S,
        specific_object: T,
    ) -> Box_<futures_core::Future<Item = (Self, ActiveConnection), Error = (Self, Error)>> {
        use gio::GioFuture;
        use send_cell::SendCell;

        let connection = connection.into();
        let connection = connection.map(ToOwned::to_owned);
        let device = device.into();
        let device = device.map(ToOwned::to_owned);
        let specific_object = specific_object.into();
        let specific_object = specific_object.map(ToOwned::to_owned);
        GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = SendCell::new(send);
            let obj_clone = SendCell::new(obj.clone());
            obj.activate_connection_async(
                connection.as_ref().map(::std::borrow::Borrow::borrow),
                device.as_ref().map(::std::borrow::Borrow::borrow),
                specific_object.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    let obj = obj_clone.into_inner();
                    let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
                    let _ = send.into_inner().send(res);
                },
            );

            cancellable
        })
    }

    pub fn add_and_activate_connection_async<
        'a,
        'b,
        'c,
        P: IsA<Connection> + 'a,
        Q: Into<Option<&'a P>>,
        R: IsA<Device>,
        S: Into<Option<&'b str>>,
        T: Into<Option<&'c gio::Cancellable>>,
        U: FnOnce(Result<ActiveConnection, Error>) + Send + 'static,
    >(
        &self,
        partial: Q,
        device: &R,
        specific_object: S,
        cancellable: T,
        callback: U,
    ) {
        let partial = partial.into();
        let partial = partial.to_glib_none();
        let specific_object = specific_object.into();
        let specific_object = specific_object.to_glib_none();
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        let user_data: Box<Box<U>> = Box::new(Box::new(callback));
        unsafe extern "C" fn add_and_activate_connection_async_trampoline<
            U: FnOnce(Result<ActiveConnection, Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_ffi::GObject,
            res: *mut gio_ffi::GAsyncResult,
            user_data: glib_ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_client_add_and_activate_connection_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Box<U>> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = add_and_activate_connection_async_trampoline::<U>;
        unsafe {
            ffi::nm_client_add_and_activate_connection_async(
                self.to_glib_none().0,
                partial.0,
                device.to_glib_none().0,
                specific_object.0,
                cancellable.0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn add_and_activate_connection_async_future<
        'a,
        'b,
        P: IsA<Connection> + Clone + 'static,
        Q: Into<Option<&'a P>>,
        R: IsA<Device> + Clone + 'static,
        S: Into<Option<&'b str>>,
    >(
        &self,
        partial: Q,
        device: &R,
        specific_object: S,
    ) -> Box_<futures_core::Future<Item = (Self, ActiveConnection), Error = (Self, Error)>> {
        use gio::GioFuture;
        use send_cell::SendCell;

        let partial = partial.into();
        let partial = partial.map(ToOwned::to_owned);
        let device = device.clone();
        let specific_object = specific_object.into();
        let specific_object = specific_object.map(ToOwned::to_owned);
        GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = SendCell::new(send);
            let obj_clone = SendCell::new(obj.clone());
            obj.add_and_activate_connection_async(
                partial.as_ref().map(::std::borrow::Borrow::borrow),
                &device,
                specific_object.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    let obj = obj_clone.into_inner();
                    let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
                    let _ = send.into_inner().send(res);
                },
            );

            cancellable
        })
    }

    pub fn add_connection_async<
        'a,
        P: IsA<Connection>,
        Q: Into<Option<&'a gio::Cancellable>>,
        R: FnOnce(Result<RemoteConnection, Error>) + Send + 'static,
    >(
        &self,
        connection: &P,
        save_to_disk: bool,
        cancellable: Q,
        callback: R,
    ) {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        let user_data: Box<Box<R>> = Box::new(Box::new(callback));
        unsafe extern "C" fn add_connection_async_trampoline<
            R: FnOnce(Result<RemoteConnection, Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_ffi::GObject,
            res: *mut gio_ffi::GAsyncResult,
            user_data: glib_ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret =
                ffi::nm_client_add_connection_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Box<R>> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = add_connection_async_trampoline::<R>;
        unsafe {
            ffi::nm_client_add_connection_async(
                self.to_glib_none().0,
                connection.to_glib_none().0,
                save_to_disk.to_glib(),
                cancellable.0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn add_connection_async_future<P: IsA<Connection> + Clone + 'static>(
        &self,
        connection: &P,
        save_to_disk: bool,
    ) -> Box_<futures_core::Future<Item = (Self, RemoteConnection), Error = (Self, Error)>> {
        use gio::GioFuture;
        use send_cell::SendCell;

        let connection = connection.clone();
        GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = SendCell::new(send);
            let obj_clone = SendCell::new(obj.clone());
            obj.add_connection_async(&connection, save_to_disk, Some(&cancellable), move |res| {
                let obj = obj_clone.into_inner();
                let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
                let _ = send.into_inner().send(res);
            });

            cancellable
        })
    }

    pub fn check_connectivity<'a, P: Into<Option<&'a gio::Cancellable>>>(
        &self,
        cancellable: P,
    ) -> Result<ConnectivityState, Error> {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let ret =
                ffi::nm_client_check_connectivity(self.to_glib_none().0, cancellable.0, &mut error);
            if error.is_null() {
                Ok(from_glib(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn check_connectivity_async<
        'a,
        P: Into<Option<&'a gio::Cancellable>>,
        Q: FnOnce(Result<ConnectivityState, Error>) + Send + 'static,
    >(
        &self,
        cancellable: P,
        callback: Q,
    ) {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        let user_data: Box<Box<Q>> = Box::new(Box::new(callback));
        unsafe extern "C" fn check_connectivity_async_trampoline<
            Q: FnOnce(Result<ConnectivityState, Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_ffi::GObject,
            res: *mut gio_ffi::GAsyncResult,
            user_data: glib_ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret =
                ffi::nm_client_check_connectivity_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Box<Q>> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = check_connectivity_async_trampoline::<Q>;
        unsafe {
            ffi::nm_client_check_connectivity_async(
                self.to_glib_none().0,
                cancellable.0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn check_connectivity_async_future(
        &self,
    ) -> Box_<futures_core::Future<Item = (Self, ConnectivityState), Error = (Self, Error)>> {
        use gio::GioFuture;
        use send_cell::SendCell;

        GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = SendCell::new(send);
            let obj_clone = SendCell::new(obj.clone());
            obj.check_connectivity_async(Some(&cancellable), move |res| {
                let obj = obj_clone.into_inner();
                let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
                let _ = send.into_inner().send(res);
            });

            cancellable
        })
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn checkpoint_adjust_rollback_timeout<
        'a,
        P: Into<Option<&'a gio::Cancellable>>,
        Q: FnOnce(Result<(), Error>) + Send + 'static,
    >(
        &self,
        checkpoint_path: &str,
        add_timeout: u32,
        cancellable: P,
        callback: Q,
    ) {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        let user_data: Box<Box<Q>> = Box::new(Box::new(callback));
        unsafe extern "C" fn checkpoint_adjust_rollback_timeout_trampoline<
            Q: FnOnce(Result<(), Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_ffi::GObject,
            res: *mut gio_ffi::GAsyncResult,
            user_data: glib_ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_client_checkpoint_adjust_rollback_timeout_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Box<Q>> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = checkpoint_adjust_rollback_timeout_trampoline::<Q>;
        unsafe {
            ffi::nm_client_checkpoint_adjust_rollback_timeout(
                self.to_glib_none().0,
                checkpoint_path.to_glib_none().0,
                add_timeout,
                cancellable.0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn checkpoint_adjust_rollback_timeout_future(
        &self,
        checkpoint_path: &str,
        add_timeout: u32,
    ) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>> {
        use gio::GioFuture;
        use send_cell::SendCell;

        let checkpoint_path = String::from(checkpoint_path);
        GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = SendCell::new(send);
            let obj_clone = SendCell::new(obj.clone());
            obj.checkpoint_adjust_rollback_timeout(
                &checkpoint_path,
                add_timeout,
                Some(&cancellable),
                move |res| {
                    let obj = obj_clone.into_inner();
                    let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
                    let _ = send.into_inner().send(res);
                },
            );

            cancellable
        })
    }

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //pub fn checkpoint_create<'a, P: Into<Option<&'a gio::Cancellable>>, Q: FnOnce(Result<Checkpoint, Error>) + Send + 'static>(&self, devices: /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 11 }, rollback_timeout: u32, flags: CheckpointCreateFlags, cancellable: P, callback: Q) {
    //    unsafe { TODO: call ffi::nm_client_checkpoint_create() }
    //}

    //#[cfg(feature = "futures")]
    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //pub fn checkpoint_create_future(&self, devices: /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 11 }, rollback_timeout: u32, flags: CheckpointCreateFlags) -> Box_<futures_core::Future<Item = (Self, Checkpoint), Error = (Self, Error)>> {
    //use gio::GioFuture;
    //use send_cell::SendCell;

    //GioFuture::new(self, move |obj, send| {
    //    let cancellable = gio::Cancellable::new();
    //    let send = SendCell::new(send);
    //    let obj_clone = SendCell::new(obj.clone());
    //    obj.checkpoint_create(
    //         devices,
    //         rollback_timeout,
    //         flags,
    //         Some(&cancellable),
    //         move |res| {
    //             let obj = obj_clone.into_inner();
    //             let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
    //             let _ = send.into_inner().send(res);
    //         },
    //    );

    //    cancellable
    //})
    //}

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn checkpoint_destroy<
        'a,
        P: Into<Option<&'a gio::Cancellable>>,
        Q: FnOnce(Result<(), Error>) + Send + 'static,
    >(
        &self,
        checkpoint_path: &str,
        cancellable: P,
        callback: Q,
    ) {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        let user_data: Box<Box<Q>> = Box::new(Box::new(callback));
        unsafe extern "C" fn checkpoint_destroy_trampoline<
            Q: FnOnce(Result<(), Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_ffi::GObject,
            res: *mut gio_ffi::GAsyncResult,
            user_data: glib_ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ =
                ffi::nm_client_checkpoint_destroy_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Box<Q>> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = checkpoint_destroy_trampoline::<Q>;
        unsafe {
            ffi::nm_client_checkpoint_destroy(
                self.to_glib_none().0,
                checkpoint_path.to_glib_none().0,
                cancellable.0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn checkpoint_destroy_future(
        &self,
        checkpoint_path: &str,
    ) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>> {
        use gio::GioFuture;
        use send_cell::SendCell;

        let checkpoint_path = String::from(checkpoint_path);
        GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = SendCell::new(send);
            let obj_clone = SendCell::new(obj.clone());
            obj.checkpoint_destroy(&checkpoint_path, Some(&cancellable), move |res| {
                let obj = obj_clone.into_inner();
                let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
                let _ = send.into_inner().send(res);
            });

            cancellable
        })
    }

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //pub fn checkpoint_rollback<'a, P: Into<Option<&'a gio::Cancellable>>, Q: FnOnce(Result</*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 7 }, Error>) + Send + 'static>(&self, checkpoint_path: &str, cancellable: P, callback: Q) {
    //    unsafe { TODO: call ffi::nm_client_checkpoint_rollback() }
    //}

    //#[cfg(feature = "futures")]
    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //pub fn checkpoint_rollback_future(&self, checkpoint_path: &str) -> Box_<futures_core::Future<Item = (Self, /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 7 }), Error = (Self, Error)>> {
    //use gio::GioFuture;
    //use send_cell::SendCell;

    //let checkpoint_path = String::from(checkpoint_path);
    //GioFuture::new(self, move |obj, send| {
    //    let cancellable = gio::Cancellable::new();
    //    let send = SendCell::new(send);
    //    let obj_clone = SendCell::new(obj.clone());
    //    obj.checkpoint_rollback(
    //         &checkpoint_path,
    //         Some(&cancellable),
    //         move |res| {
    //             let obj = obj_clone.into_inner();
    //             let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
    //             let _ = send.into_inner().send(res);
    //         },
    //    );

    //    cancellable
    //})
    //}

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connectivity_check_get_available(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_connectivity_check_get_available(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connectivity_check_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_connectivity_check_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connectivity_check_set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::nm_client_connectivity_check_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    pub fn deactivate_connection<
        'a,
        P: IsA<ActiveConnection>,
        Q: Into<Option<&'a gio::Cancellable>>,
    >(
        &self,
        active: &P,
        cancellable: Q,
    ) -> Result<(), Error> {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_client_deactivate_connection(
                self.to_glib_none().0,
                active.to_glib_none().0,
                cancellable.0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn deactivate_connection_async<
        'a,
        P: IsA<ActiveConnection>,
        Q: Into<Option<&'a gio::Cancellable>>,
        R: FnOnce(Result<(), Error>) + Send + 'static,
    >(
        &self,
        active: &P,
        cancellable: Q,
        callback: R,
    ) {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        let user_data: Box<Box<R>> = Box::new(Box::new(callback));
        unsafe extern "C" fn deactivate_connection_async_trampoline<
            R: FnOnce(Result<(), Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_ffi::GObject,
            res: *mut gio_ffi::GAsyncResult,
            user_data: glib_ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_client_deactivate_connection_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Box<R>> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = deactivate_connection_async_trampoline::<R>;
        unsafe {
            ffi::nm_client_deactivate_connection_async(
                self.to_glib_none().0,
                active.to_glib_none().0,
                cancellable.0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn deactivate_connection_async_future<P: IsA<ActiveConnection> + Clone + 'static>(
        &self,
        active: &P,
    ) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>> {
        use gio::GioFuture;
        use send_cell::SendCell;

        let active = active.clone();
        GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = SendCell::new(send);
            let obj_clone = SendCell::new(obj.clone());
            obj.deactivate_connection_async(&active, Some(&cancellable), move |res| {
                let obj = obj_clone.into_inner();
                let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
                let _ = send.into_inner().send(res);
            });

            cancellable
        })
    }

    pub fn get_activating_connection(&self) -> Option<ActiveConnection> {
        unsafe {
            from_glib_none(ffi::nm_client_get_activating_connection(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_connection_by_id(&self, id: &str) -> Option<RemoteConnection> {
        unsafe {
            from_glib_none(ffi::nm_client_get_connection_by_id(
                self.to_glib_none().0,
                id.to_glib_none().0,
            ))
        }
    }

    pub fn get_connection_by_path(&self, path: &str) -> Option<RemoteConnection> {
        unsafe {
            from_glib_none(ffi::nm_client_get_connection_by_path(
                self.to_glib_none().0,
                path.to_glib_none().0,
            ))
        }
    }

    pub fn get_connection_by_uuid(&self, uuid: &str) -> Option<RemoteConnection> {
        unsafe {
            from_glib_none(ffi::nm_client_get_connection_by_uuid(
                self.to_glib_none().0,
                uuid.to_glib_none().0,
            ))
        }
    }

    pub fn get_connectivity(&self) -> ConnectivityState {
        unsafe { from_glib(ffi::nm_client_get_connectivity(self.to_glib_none().0)) }
    }

    pub fn get_device_by_iface(&self, iface: &str) -> Option<Device> {
        unsafe {
            from_glib_none(ffi::nm_client_get_device_by_iface(
                self.to_glib_none().0,
                iface.to_glib_none().0,
            ))
        }
    }

    pub fn get_device_by_path(&self, object_path: &str) -> Option<Device> {
        unsafe {
            from_glib_none(ffi::nm_client_get_device_by_path(
                self.to_glib_none().0,
                object_path.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_dns_mode(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_client_get_dns_mode(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_dns_rc_manager(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_client_get_dns_rc_manager(self.to_glib_none().0)) }
    }

    pub fn get_nm_running(&self) -> bool {
        unsafe { from_glib(ffi::nm_client_get_nm_running(self.to_glib_none().0)) }
    }

    pub fn get_permission_result(&self, permission: ClientPermission) -> ClientPermissionResult {
        unsafe {
            from_glib(ffi::nm_client_get_permission_result(
                self.to_glib_none().0,
                permission.to_glib(),
            ))
        }
    }

    pub fn get_primary_connection(&self) -> Option<ActiveConnection> {
        unsafe { from_glib_none(ffi::nm_client_get_primary_connection(self.to_glib_none().0)) }
    }

    pub fn get_startup(&self) -> bool {
        unsafe { from_glib(ffi::nm_client_get_startup(self.to_glib_none().0)) }
    }

    pub fn get_state(&self) -> State {
        unsafe { from_glib(ffi::nm_client_get_state(self.to_glib_none().0)) }
    }

    pub fn get_version(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_client_get_version(self.to_glib_none().0)) }
    }

    pub fn networking_get_enabled(&self) -> bool {
        unsafe { from_glib(ffi::nm_client_networking_get_enabled(self.to_glib_none().0)) }
    }

    pub fn networking_set_enabled(&self, enabled: bool) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_client_networking_set_enabled(
                self.to_glib_none().0,
                enabled.to_glib(),
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn reload_connections<'a, P: Into<Option<&'a gio::Cancellable>>>(
        &self,
        cancellable: P,
    ) -> Result<(), Error> {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let _ =
                ffi::nm_client_reload_connections(self.to_glib_none().0, cancellable.0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn reload_connections_async<
        'a,
        P: Into<Option<&'a gio::Cancellable>>,
        Q: FnOnce(Result<(), Error>) + Send + 'static,
    >(
        &self,
        cancellable: P,
        callback: Q,
    ) {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        let user_data: Box<Box<Q>> = Box::new(Box::new(callback));
        unsafe extern "C" fn reload_connections_async_trampoline<
            Q: FnOnce(Result<(), Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_ffi::GObject,
            res: *mut gio_ffi::GAsyncResult,
            user_data: glib_ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ =
                ffi::nm_client_reload_connections_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Box<Q>> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = reload_connections_async_trampoline::<Q>;
        unsafe {
            ffi::nm_client_reload_connections_async(
                self.to_glib_none().0,
                cancellable.0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn reload_connections_async_future(
        &self,
    ) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>> {
        use gio::GioFuture;
        use send_cell::SendCell;

        GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = SendCell::new(send);
            let obj_clone = SendCell::new(obj.clone());
            obj.reload_connections_async(Some(&cancellable), move |res| {
                let obj = obj_clone.into_inner();
                let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
                let _ = send.into_inner().send(res);
            });

            cancellable
        })
    }

    pub fn save_hostname<
        'a,
        'b,
        P: Into<Option<&'a str>>,
        Q: Into<Option<&'b gio::Cancellable>>,
    >(
        &self,
        hostname: P,
        cancellable: Q,
    ) -> Result<(), Error> {
        let hostname = hostname.into();
        let hostname = hostname.to_glib_none();
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_client_save_hostname(
                self.to_glib_none().0,
                hostname.0,
                cancellable.0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn save_hostname_async<
        'a,
        'b,
        P: Into<Option<&'a str>>,
        Q: Into<Option<&'b gio::Cancellable>>,
        R: FnOnce(Result<(), Error>) + Send + 'static,
    >(
        &self,
        hostname: P,
        cancellable: Q,
        callback: R,
    ) {
        let hostname = hostname.into();
        let hostname = hostname.to_glib_none();
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        let user_data: Box<Box<R>> = Box::new(Box::new(callback));
        unsafe extern "C" fn save_hostname_async_trampoline<
            R: FnOnce(Result<(), Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_ffi::GObject,
            res: *mut gio_ffi::GAsyncResult,
            user_data: glib_ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_client_save_hostname_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Box<R>> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = save_hostname_async_trampoline::<R>;
        unsafe {
            ffi::nm_client_save_hostname_async(
                self.to_glib_none().0,
                hostname.0,
                cancellable.0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn save_hostname_async_future<'a, P: Into<Option<&'a str>>>(
        &self,
        hostname: P,
    ) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>> {
        use gio::GioFuture;
        use send_cell::SendCell;

        let hostname = hostname.into();
        let hostname = hostname.map(ToOwned::to_owned);
        GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = SendCell::new(send);
            let obj_clone = SendCell::new(obj.clone());
            obj.save_hostname_async(
                hostname.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    let obj = obj_clone.into_inner();
                    let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
                    let _ = send.into_inner().send(res);
                },
            );

            cancellable
        })
    }

    pub fn set_logging<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>>(
        &self,
        level: P,
        domains: Q,
    ) -> Result<(), Error> {
        let level = level.into();
        let level = level.to_glib_none();
        let domains = domains.into();
        let domains = domains.to_glib_none();
        unsafe {
            let mut error = ptr::null_mut();
            let _ =
                ffi::nm_client_set_logging(self.to_glib_none().0, level.0, domains.0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn wimax_get_enabled(&self) -> bool {
        unsafe { from_glib(ffi::nm_client_wimax_get_enabled(self.to_glib_none().0)) }
    }

    pub fn wimax_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wimax_hardware_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn wimax_set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::nm_client_wimax_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    pub fn wireless_get_enabled(&self) -> bool {
        unsafe { from_glib(ffi::nm_client_wireless_get_enabled(self.to_glib_none().0)) }
    }

    pub fn wireless_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wireless_hardware_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn wireless_set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::nm_client_wireless_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    pub fn wwan_get_enabled(&self) -> bool {
        unsafe { from_glib(ffi::nm_client_wwan_get_enabled(self.to_glib_none().0)) }
    }

    pub fn wwan_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wwan_hardware_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn wwan_set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::nm_client_wwan_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    //pub fn get_property_active_connections(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 10 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "active-connections".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    //pub fn get_property_all_devices(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 11 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "all-devices".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    pub fn get_property_can_modify(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "can-modify".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //pub fn get_property_checkpoints(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 20 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "checkpoints".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    //pub fn get_property_connections(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 9 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "connections".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    pub fn get_property_connectivity_check_available(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "connectivity-check-available".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    pub fn get_property_connectivity_check_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "connectivity-check-enabled".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    pub fn set_property_connectivity_check_enabled(&self, connectivity_check_enabled: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "connectivity-check-enabled".to_glib_none().0,
                Value::from(&connectivity_check_enabled).to_glib_none().0,
            );
        }
    }

    //pub fn get_property_devices(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 11 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "devices".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    //#[cfg(any(feature = "v1_6", feature = "dox"))]
    //pub fn get_property_dns_configuration(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 2, id: 179 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "dns-configuration".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    pub fn get_property_hostname(&self) -> Option<String> {
        unsafe {
            let mut value = Value::from_type(<String as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "hostname".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get()
        }
    }

    pub fn get_property_metered(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "metered".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    pub fn get_property_networking_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "networking-enabled".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    pub fn set_property_networking_enabled(&self, networking_enabled: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "networking-enabled".to_glib_none().0,
                Value::from(&networking_enabled).to_glib_none().0,
            );
        }
    }

    pub fn get_property_wireless_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "wireless-enabled".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    pub fn set_property_wireless_enabled(&self, wireless_enabled: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "wireless-enabled".to_glib_none().0,
                Value::from(&wireless_enabled).to_glib_none().0,
            );
        }
    }

    pub fn get_property_wireless_hardware_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "wireless-hardware-enabled".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    pub fn get_property_wwan_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "wwan-enabled".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    pub fn set_property_wwan_enabled(&self, wwan_enabled: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "wwan-enabled".to_glib_none().0,
                Value::from(&wwan_enabled).to_glib_none().0,
            );
        }
    }

    pub fn get_property_wwan_hardware_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(
                self.to_glib_none().0,
                "wwan-hardware-enabled".to_glib_none().0,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    pub fn new_async<
        'a,
        P: Into<Option<&'a gio::Cancellable>>,
        Q: FnOnce(Result<Client, Error>) + Send + 'static,
    >(
        cancellable: P,
        callback: Q,
    ) {
        let cancellable = cancellable.into();
        let cancellable = cancellable.to_glib_none();
        let user_data: Box<Box<Q>> = Box::new(Box::new(callback));
        unsafe extern "C" fn new_async_trampoline<
            Q: FnOnce(Result<Client, Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_ffi::GObject,
            res: *mut gio_ffi::GAsyncResult,
            user_data: glib_ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_client_new_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Box<Q>> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = new_async_trampoline::<Q>;
        unsafe {
            ffi::nm_client_new_async(
                cancellable.0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn new_async_future() -> Box_<futures_core::Future<Item = Client, Error = Error>> {
        use gio::GioFuture;
        use send_cell::SendCell;

        GioFuture::new(&(), move |_obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = SendCell::new(send);
            Self::new_async(Some(&cancellable), move |res| {
                let _ = send.into_inner().send(res);
            });

            cancellable
        })
    }

    pub fn connect_active_connection_added<F: Fn(&Client, &ActiveConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client, &ActiveConnection) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "active-connection-added",
                transmute(active_connection_added_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_active_connection_removed<F: Fn(&Client, &ActiveConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client, &ActiveConnection) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "active-connection-removed",
                transmute(active_connection_removed_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_any_device_added<F: Fn(&Client, &Device) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client, &Device) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "any-device-added",
                transmute(any_device_added_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_any_device_removed<F: Fn(&Client, &Device) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client, &Device) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "any-device-removed",
                transmute(any_device_removed_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_connection_added<F: Fn(&Client, &RemoteConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client, &RemoteConnection) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "connection-added",
                transmute(connection_added_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_connection_removed<F: Fn(&Client, &RemoteConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client, &RemoteConnection) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "connection-removed",
                transmute(connection_removed_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_device_added<F: Fn(&Client, &Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client, &Device) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "device-added",
                transmute(device_added_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_device_removed<F: Fn(&Client, &Device) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client, &Device) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "device-removed",
                transmute(device_removed_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_permission_changed<F: Fn(&Client, u32, u32) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client, u32, u32) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "permission-changed",
                transmute(permission_changed_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_activating_connection_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::activating-connection",
                transmute(notify_activating_connection_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_active_connections_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::active-connections",
                transmute(notify_active_connections_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_all_devices_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::all-devices",
                transmute(notify_all_devices_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_can_modify_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::can-modify",
                transmute(notify_can_modify_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn connect_property_checkpoints_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::checkpoints",
                transmute(notify_checkpoints_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_connections_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::connections",
                transmute(notify_connections_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_connectivity_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::connectivity",
                transmute(notify_connectivity_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_connectivity_check_available_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::connectivity-check-available",
                transmute(notify_connectivity_check_available_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_connectivity_check_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::connectivity-check-enabled",
                transmute(notify_connectivity_check_enabled_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_devices_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::devices",
                transmute(notify_devices_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_dns_configuration_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::dns-configuration",
                transmute(notify_dns_configuration_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_dns_mode_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::dns-mode",
                transmute(notify_dns_mode_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_dns_rc_manager_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::dns-rc-manager",
                transmute(notify_dns_rc_manager_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_hostname_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::hostname",
                transmute(notify_hostname_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_metered_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::metered",
                transmute(notify_metered_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_networking_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::networking-enabled",
                transmute(notify_networking_enabled_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_nm_running_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::nm-running",
                transmute(notify_nm_running_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_primary_connection_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::primary-connection",
                transmute(notify_primary_connection_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_startup_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::startup",
                transmute(notify_startup_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_state_notify<F: Fn(&Client) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::state",
                transmute(notify_state_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_version_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::version",
                transmute(notify_version_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_wireless_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::wireless-enabled",
                transmute(notify_wireless_enabled_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_wireless_hardware_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::wireless-hardware-enabled",
                transmute(notify_wireless_hardware_enabled_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_wwan_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::wwan-enabled",
                transmute(notify_wwan_enabled_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    pub fn connect_property_wwan_hardware_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Client) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::wwan-hardware-enabled",
                transmute(notify_wwan_hardware_enabled_trampoline as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn active_connection_added_trampoline(
    this: *mut ffi::NMClient,
    active_connection: *mut ffi::NMActiveConnection,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client, &ActiveConnection) + 'static) = transmute(f);
    f(
        &from_glib_borrow(this),
        &from_glib_borrow(active_connection),
    )
}

unsafe extern "C" fn active_connection_removed_trampoline(
    this: *mut ffi::NMClient,
    active_connection: *mut ffi::NMActiveConnection,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client, &ActiveConnection) + 'static) = transmute(f);
    f(
        &from_glib_borrow(this),
        &from_glib_borrow(active_connection),
    )
}

unsafe extern "C" fn any_device_added_trampoline(
    this: *mut ffi::NMClient,
    device: *mut ffi::NMDevice,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client, &Device) + 'static) = transmute(f);
    f(&from_glib_borrow(this), &from_glib_borrow(device))
}

unsafe extern "C" fn any_device_removed_trampoline(
    this: *mut ffi::NMClient,
    device: *mut ffi::NMDevice,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client, &Device) + 'static) = transmute(f);
    f(&from_glib_borrow(this), &from_glib_borrow(device))
}

unsafe extern "C" fn connection_added_trampoline(
    this: *mut ffi::NMClient,
    connection: *mut ffi::NMRemoteConnection,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client, &RemoteConnection) + 'static) = transmute(f);
    f(&from_glib_borrow(this), &from_glib_borrow(connection))
}

unsafe extern "C" fn connection_removed_trampoline(
    this: *mut ffi::NMClient,
    connection: *mut ffi::NMRemoteConnection,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client, &RemoteConnection) + 'static) = transmute(f);
    f(&from_glib_borrow(this), &from_glib_borrow(connection))
}

unsafe extern "C" fn device_added_trampoline(
    this: *mut ffi::NMClient,
    device: *mut ffi::NMDevice,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client, &Device) + 'static) = transmute(f);
    f(&from_glib_borrow(this), &from_glib_borrow(device))
}

unsafe extern "C" fn device_removed_trampoline(
    this: *mut ffi::NMClient,
    device: *mut ffi::NMDevice,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client, &Device) + 'static) = transmute(f);
    f(&from_glib_borrow(this), &from_glib_borrow(device))
}

unsafe extern "C" fn permission_changed_trampoline(
    this: *mut ffi::NMClient,
    permission: libc::c_uint,
    result: libc::c_uint,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client, u32, u32) + 'static) = transmute(f);
    f(&from_glib_borrow(this), permission, result)
}

unsafe extern "C" fn notify_activating_connection_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_active_connections_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_all_devices_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_can_modify_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
unsafe extern "C" fn notify_checkpoints_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_connections_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_connectivity_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_connectivity_check_available_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_connectivity_check_enabled_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_devices_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_dns_configuration_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_dns_mode_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_dns_rc_manager_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_hostname_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_metered_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_networking_enabled_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_nm_running_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_primary_connection_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_startup_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_state_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_version_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_wireless_enabled_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_wireless_hardware_enabled_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_wwan_enabled_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_wwan_hardware_enabled_trampoline(
    this: *mut ffi::NMClient,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) {
    let f: &&(Fn(&Client) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}
