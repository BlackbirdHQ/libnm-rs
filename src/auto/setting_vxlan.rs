// This file was generated by gir (https://github.com/gtk-rs/gir @ 609779c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;

glib_wrapper! {
    pub struct SettingVxlan(Object<ffi::NMSettingVxlan, ffi::NMSettingVxlanClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_vxlan_get_type(),
    }
}

impl SettingVxlan {
    pub fn new() -> SettingVxlan {
        unsafe { Setting::from_glib_full(ffi::nm_setting_vxlan_new()).downcast_unchecked() }
    }
}

impl Default for SettingVxlan {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingVxlanExt {
    fn get_ageing(&self) -> u32;

    fn get_destination_port(&self) -> u32;

    fn get_id(&self) -> u32;

    fn get_l2_miss(&self) -> bool;

    fn get_l3_miss(&self) -> bool;

    fn get_learning(&self) -> bool;

    fn get_limit(&self) -> u32;

    fn get_local(&self) -> Option<String>;

    fn get_parent(&self) -> Option<String>;

    fn get_proxy(&self) -> bool;

    fn get_remote(&self) -> Option<String>;

    fn get_rsc(&self) -> bool;

    fn get_source_port_max(&self) -> u32;

    fn get_source_port_min(&self) -> u32;

    fn get_tos(&self) -> u32;

    fn get_ttl(&self) -> u32;

    fn set_property_ageing(&self, ageing: u32);

    fn set_property_destination_port(&self, destination_port: u32);

    fn set_property_id(&self, id: u32);

    fn set_property_l2_miss(&self, l2_miss: bool);

    fn set_property_l3_miss(&self, l3_miss: bool);

    fn set_property_learning(&self, learning: bool);

    fn set_property_limit(&self, limit: u32);

    fn set_property_local(&self, local: Option<&str>);

    fn set_property_parent(&self, parent: Option<&str>);

    fn set_property_proxy(&self, proxy: bool);

    fn set_property_remote(&self, remote: Option<&str>);

    fn set_property_rsc(&self, rsc: bool);

    fn set_property_source_port_max(&self, source_port_max: u32);

    fn set_property_source_port_min(&self, source_port_min: u32);

    fn set_property_tos(&self, tos: u32);

    fn set_property_ttl(&self, ttl: u32);

    fn connect_property_ageing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_destination_port_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_l2_miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_l3_miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_learning_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_limit_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_local_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_proxy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_remote_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_rsc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_source_port_max_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_source_port_min_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_tos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_ttl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingVxlan> + IsA<glib::object::Object>> SettingVxlanExt for O {
    fn get_ageing(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_ageing(self.to_glib_none().0) }
    }

    fn get_destination_port(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_destination_port(self.to_glib_none().0) }
    }

    fn get_id(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_id(self.to_glib_none().0) }
    }

    fn get_l2_miss(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_vxlan_get_l2_miss(self.to_glib_none().0)) }
    }

    fn get_l3_miss(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_vxlan_get_l3_miss(self.to_glib_none().0)) }
    }

    fn get_learning(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_vxlan_get_learning(self.to_glib_none().0)) }
    }

    fn get_limit(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_limit(self.to_glib_none().0) }
    }

    fn get_local(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_vxlan_get_local(self.to_glib_none().0)) }
    }

    fn get_parent(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_vxlan_get_parent(self.to_glib_none().0)) }
    }

    fn get_proxy(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_vxlan_get_proxy(self.to_glib_none().0)) }
    }

    fn get_remote(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_vxlan_get_remote(self.to_glib_none().0)) }
    }

    fn get_rsc(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_vxlan_get_rsc(self.to_glib_none().0)) }
    }

    fn get_source_port_max(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_source_port_max(self.to_glib_none().0) }
    }

    fn get_source_port_min(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_source_port_min(self.to_glib_none().0) }
    }

    fn get_tos(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_tos(self.to_glib_none().0) }
    }

    fn get_ttl(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_ttl(self.to_glib_none().0) }
    }

    fn set_property_ageing(&self, ageing: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "ageing".to_glib_none().0,
                Value::from(&ageing).to_glib_none().0,
            );
        }
    }

    fn set_property_destination_port(&self, destination_port: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "destination-port".to_glib_none().0,
                Value::from(&destination_port).to_glib_none().0,
            );
        }
    }

    fn set_property_id(&self, id: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "id".to_glib_none().0,
                Value::from(&id).to_glib_none().0,
            );
        }
    }

    fn set_property_l2_miss(&self, l2_miss: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "l2-miss".to_glib_none().0,
                Value::from(&l2_miss).to_glib_none().0,
            );
        }
    }

    fn set_property_l3_miss(&self, l3_miss: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "l3-miss".to_glib_none().0,
                Value::from(&l3_miss).to_glib_none().0,
            );
        }
    }

    fn set_property_learning(&self, learning: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "learning".to_glib_none().0,
                Value::from(&learning).to_glib_none().0,
            );
        }
    }

    fn set_property_limit(&self, limit: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "limit".to_glib_none().0,
                Value::from(&limit).to_glib_none().0,
            );
        }
    }

    fn set_property_local(&self, local: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "local".to_glib_none().0,
                Value::from(local).to_glib_none().0,
            );
        }
    }

    fn set_property_parent(&self, parent: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "parent".to_glib_none().0,
                Value::from(parent).to_glib_none().0,
            );
        }
    }

    fn set_property_proxy(&self, proxy: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "proxy".to_glib_none().0,
                Value::from(&proxy).to_glib_none().0,
            );
        }
    }

    fn set_property_remote(&self, remote: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "remote".to_glib_none().0,
                Value::from(remote).to_glib_none().0,
            );
        }
    }

    fn set_property_rsc(&self, rsc: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "rsc".to_glib_none().0,
                Value::from(&rsc).to_glib_none().0,
            );
        }
    }

    fn set_property_source_port_max(&self, source_port_max: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "source-port-max".to_glib_none().0,
                Value::from(&source_port_max).to_glib_none().0,
            );
        }
    }

    fn set_property_source_port_min(&self, source_port_min: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "source-port-min".to_glib_none().0,
                Value::from(&source_port_min).to_glib_none().0,
            );
        }
    }

    fn set_property_tos(&self, tos: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "tos".to_glib_none().0,
                Value::from(&tos).to_glib_none().0,
            );
        }
    }

    fn set_property_ttl(&self, ttl: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "ttl".to_glib_none().0,
                Value::from(&ttl).to_glib_none().0,
            );
        }
    }

    fn connect_property_ageing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::ageing",
                transmute(notify_ageing_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_destination_port_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::destination-port",
                transmute(notify_destination_port_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::id",
                transmute(notify_id_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_l2_miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::l2-miss",
                transmute(notify_l2_miss_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_l3_miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::l3-miss",
                transmute(notify_l3_miss_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_learning_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::learning",
                transmute(notify_learning_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_limit_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::limit",
                transmute(notify_limit_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_local_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::local",
                transmute(notify_local_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::parent",
                transmute(notify_parent_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_proxy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::proxy",
                transmute(notify_proxy_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_remote_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::remote",
                transmute(notify_remote_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_rsc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::rsc",
                transmute(notify_rsc_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_source_port_max_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::source-port-max",
                transmute(notify_source_port_max_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_source_port_min_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::source-port-min",
                transmute(notify_source_port_min_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_tos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::tos",
                transmute(notify_tos_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_ttl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::ttl",
                transmute(notify_ttl_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_ageing_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_destination_port_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_id_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_l2_miss_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_l3_miss_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_learning_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_limit_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_local_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_parent_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_proxy_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_remote_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_rsc_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_source_port_max_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_source_port_min_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_tos_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_ttl_trampoline<P>(
    this: *mut ffi::NMSettingVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingVxlan::from_glib_borrow(this).downcast_unchecked())
}
