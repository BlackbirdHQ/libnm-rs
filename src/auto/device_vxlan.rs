// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Device;

glib_wrapper! {
    pub struct DeviceVxlan(Object<ffi::NMDeviceVxlan, ffi::NMDeviceVxlanClass>): Device;

    match fn {
        get_type => || ffi::nm_device_vxlan_get_type(),
    }
}

pub trait DeviceVxlanExt {
    fn get_ageing(&self) -> u32;

    fn get_carrier(&self) -> bool;

    fn get_dst_port(&self) -> u32;

    fn get_group(&self) -> Option<String>;

    fn get_id(&self) -> u32;

    fn get_l2miss(&self) -> bool;

    fn get_l3miss(&self) -> bool;

    fn get_learning(&self) -> bool;

    fn get_limit(&self) -> u32;

    fn get_local(&self) -> Option<String>;

    fn get_parent(&self) -> Option<Device>;

    fn get_proxy(&self) -> bool;

    fn get_rsc(&self) -> bool;

    fn get_src_port_max(&self) -> u32;

    fn get_src_port_min(&self) -> u32;

    fn get_tos(&self) -> u32;

    fn get_ttl(&self) -> u32;

    fn connect_property_ageing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_carrier_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_dst_port_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_group_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_hw_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_l2miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_l3miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_learning_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_limit_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_local_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_proxy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_rsc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_src_port_max_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_src_port_min_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_tos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_ttl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DeviceVxlan> + IsA<glib::object::Object>> DeviceVxlanExt for O {
    fn get_ageing(&self) -> u32 {
        unsafe { ffi::nm_device_vxlan_get_ageing(self.to_glib_none().0) }
    }

    fn get_carrier(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_vxlan_get_carrier(self.to_glib_none().0)) }
    }

    fn get_dst_port(&self) -> u32 {
        unsafe { ffi::nm_device_vxlan_get_dst_port(self.to_glib_none().0) }
    }

    fn get_group(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_device_vxlan_get_group(self.to_glib_none().0)) }
    }

    fn get_id(&self) -> u32 {
        unsafe { ffi::nm_device_vxlan_get_id(self.to_glib_none().0) }
    }

    fn get_l2miss(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_vxlan_get_l2miss(self.to_glib_none().0)) }
    }

    fn get_l3miss(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_vxlan_get_l3miss(self.to_glib_none().0)) }
    }

    fn get_learning(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_vxlan_get_learning(self.to_glib_none().0)) }
    }

    fn get_limit(&self) -> u32 {
        unsafe { ffi::nm_device_vxlan_get_limit(self.to_glib_none().0) }
    }

    fn get_local(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_device_vxlan_get_local(self.to_glib_none().0)) }
    }

    fn get_parent(&self) -> Option<Device> {
        unsafe { from_glib_none(ffi::nm_device_vxlan_get_parent(self.to_glib_none().0)) }
    }

    fn get_proxy(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_vxlan_get_proxy(self.to_glib_none().0)) }
    }

    fn get_rsc(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_vxlan_get_rsc(self.to_glib_none().0)) }
    }

    fn get_src_port_max(&self) -> u32 {
        unsafe { ffi::nm_device_vxlan_get_src_port_max(self.to_glib_none().0) }
    }

    fn get_src_port_min(&self) -> u32 {
        unsafe { ffi::nm_device_vxlan_get_src_port_min(self.to_glib_none().0) }
    }

    fn get_tos(&self) -> u32 {
        unsafe { ffi::nm_device_vxlan_get_tos(self.to_glib_none().0) }
    }

    fn get_ttl(&self) -> u32 {
        unsafe { ffi::nm_device_vxlan_get_ttl(self.to_glib_none().0) }
    }

    fn connect_property_ageing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::ageing",
                transmute(notify_ageing_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_carrier_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::carrier",
                transmute(notify_carrier_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_dst_port_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::dst-port",
                transmute(notify_dst_port_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_group_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::group",
                transmute(notify_group_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_hw_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::hw-address",
                transmute(notify_hw_address_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::id",
                transmute(notify_id_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_l2miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::l2miss",
                transmute(notify_l2miss_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_l3miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::l3miss",
                transmute(notify_l3miss_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_learning_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::learning",
                transmute(notify_learning_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_limit_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::limit",
                transmute(notify_limit_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_local_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::local",
                transmute(notify_local_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::parent",
                transmute(notify_parent_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_proxy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::proxy",
                transmute(notify_proxy_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_rsc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::rsc",
                transmute(notify_rsc_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_src_port_max_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::src-port-max",
                transmute(notify_src_port_max_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_src_port_min_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::src-port-min",
                transmute(notify_src_port_min_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_tos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::tos",
                transmute(notify_tos_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_ttl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::ttl",
                transmute(notify_ttl_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_ageing_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_carrier_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dst_port_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_group_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_hw_address_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_id_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_l2miss_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_l3miss_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_learning_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_limit_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_local_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_parent_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_proxy_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_rsc_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_src_port_max_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_src_port_min_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_tos_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_ttl_trampoline<P>(
    this: *mut ffi::NMDeviceVxlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVxlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVxlan::from_glib_borrow(this).downcast_unchecked())
}
