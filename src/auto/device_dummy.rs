// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use glib_ffi;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use std::mem::transmute;
use Device;

glib_wrapper! {
    pub struct DeviceDummy(Object<ffi::NMDeviceDummy, ffi::NMDeviceDummyClass>): Device;

    match fn {
        get_type => || ffi::nm_device_dummy_get_type(),
    }
}

pub trait DeviceDummyExt: 'static {
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn connect_property_hw_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DeviceDummy>> DeviceDummyExt for O {
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn connect_property_hw_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::hw-address\0".as_ptr() as *const _,
                transmute(notify_hw_address_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
unsafe extern "C" fn notify_hw_address_trampoline<P>(
    this: *mut ffi::NMDeviceDummy,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceDummy>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceDummy::from_glib_borrow(this).downcast_unchecked())
}

impl fmt::Display for DeviceDummy {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DeviceDummy")
    }
}
