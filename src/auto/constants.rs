// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use std::ffi::CStr;

lazy_static! {
    pub static ref ACCESS_POINT_BSSID: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_ACCESS_POINT_BSSID).to_str().unwrap() };
}
lazy_static! {
    pub static ref ACCESS_POINT_FLAGS: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_ACCESS_POINT_FLAGS).to_str().unwrap() };
}
lazy_static! {
    pub static ref ACCESS_POINT_FREQUENCY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_FREQUENCY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACCESS_POINT_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACCESS_POINT_LAST_SEEN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_LAST_SEEN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACCESS_POINT_MAX_BITRATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_MAX_BITRATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACCESS_POINT_MODE: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_ACCESS_POINT_MODE).to_str().unwrap() };
}
lazy_static! {
    pub static ref ACCESS_POINT_RSN_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_RSN_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACCESS_POINT_SSID: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_ACCESS_POINT_SSID).to_str().unwrap() };
}
lazy_static! {
    pub static ref ACCESS_POINT_STRENGTH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_STRENGTH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACCESS_POINT_WPA_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACCESS_POINT_WPA_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_DEFAULT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_DEFAULT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_DEFAULT6: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_DEFAULT6)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_DEVICES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_DEVICES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_DHCP4_CONFIG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_DHCP4_CONFIG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_DHCP6_CONFIG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_DHCP6_CONFIG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_ID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_ID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_IP4_CONFIG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_IP4_CONFIG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_IP6_CONFIG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_IP6_CONFIG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_MASTER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_MASTER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_SPECIFIC_OBJECT_PATH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_SPECIFIC_OBJECT_PATH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_STATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_STATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_STATE_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_STATE_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_TYPE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_TYPE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_UUID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_UUID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref ACTIVE_CONNECTION_VPN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_ACTIVE_CONNECTION_VPN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CHECKPOINT_CREATED: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CHECKPOINT_CREATED).to_str().unwrap() };
}
lazy_static! {
    pub static ref CHECKPOINT_DEVICES: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CHECKPOINT_DEVICES).to_str().unwrap() };
}
lazy_static! {
    pub static ref CHECKPOINT_ROLLBACK_TIMEOUT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CHECKPOINT_ROLLBACK_TIMEOUT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_ACTIVATING_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ACTIVATING_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_ACTIVE_CONNECTIONS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ACTIVE_CONNECTIONS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_ACTIVE_CONNECTION_ADDED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ACTIVE_CONNECTION_ADDED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_ACTIVE_CONNECTION_REMOVED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ACTIVE_CONNECTION_REMOVED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_ALL_DEVICES: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CLIENT_ALL_DEVICES).to_str().unwrap() };
}
lazy_static! {
    pub static ref CLIENT_ANY_DEVICE_ADDED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ANY_DEVICE_ADDED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_ANY_DEVICE_REMOVED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_ANY_DEVICE_REMOVED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_CAN_MODIFY: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CLIENT_CAN_MODIFY).to_str().unwrap() };
}
lazy_static! {
    pub static ref CLIENT_CONNECTIONS: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CLIENT_CONNECTIONS).to_str().unwrap() };
}
lazy_static! {
    pub static ref CLIENT_CONNECTION_ADDED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CONNECTION_ADDED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_CONNECTION_REMOVED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CONNECTION_REMOVED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_CONNECTIVITY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CONNECTIVITY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_CONNECTIVITY_CHECK_AVAILABLE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CONNECTIVITY_CHECK_AVAILABLE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_CONNECTIVITY_CHECK_ENABLED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_CONNECTIVITY_CHECK_ENABLED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_DEVICES: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CLIENT_DEVICES).to_str().unwrap() };
}
lazy_static! {
    pub static ref CLIENT_DEVICE_ADDED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_DEVICE_ADDED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_DEVICE_REMOVED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_DEVICE_REMOVED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_DNS_CONFIGURATION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_DNS_CONFIGURATION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_DNS_MODE: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CLIENT_DNS_MODE).to_str().unwrap() };
}
lazy_static! {
    pub static ref CLIENT_DNS_RC_MANAGER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_DNS_RC_MANAGER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_HOSTNAME: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CLIENT_HOSTNAME).to_str().unwrap() };
}
lazy_static! {
    pub static ref CLIENT_METERED: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CLIENT_METERED).to_str().unwrap() };
}
lazy_static! {
    pub static ref CLIENT_NETWORKING_ENABLED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_NETWORKING_ENABLED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_NM_RUNNING: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CLIENT_NM_RUNNING).to_str().unwrap() };
}
lazy_static! {
    pub static ref CLIENT_PERMISSION_CHANGED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_PERMISSION_CHANGED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_PRIMARY_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_PRIMARY_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_STARTUP: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CLIENT_STARTUP).to_str().unwrap() };
}
lazy_static! {
    pub static ref CLIENT_STATE: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CLIENT_STATE).to_str().unwrap() };
}
lazy_static! {
    pub static ref CLIENT_VERSION: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CLIENT_VERSION).to_str().unwrap() };
}
lazy_static! {
    pub static ref CLIENT_WIMAX_ENABLED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_WIMAX_ENABLED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_WIMAX_HARDWARE_ENABLED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_WIMAX_HARDWARE_ENABLED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_WIRELESS_ENABLED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_WIRELESS_ENABLED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_WIRELESS_HARDWARE_ENABLED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_WIRELESS_HARDWARE_ENABLED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_WWAN_ENABLED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_WWAN_ENABLED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CLIENT_WWAN_HARDWARE_ENABLED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CLIENT_WWAN_HARDWARE_ENABLED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CONNECTION_CHANGED: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_CONNECTION_CHANGED).to_str().unwrap() };
}
lazy_static! {
    pub static ref CONNECTION_NORMALIZE_PARAM_IP6_CONFIG_METHOD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CONNECTION_NORMALIZE_PARAM_IP6_CONFIG_METHOD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CONNECTION_SECRETS_CLEARED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CONNECTION_SECRETS_CLEARED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref CONNECTION_SECRETS_UPDATED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_CONNECTION_SECRETS_UPDATED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_INTERFACE: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DBUS_INTERFACE).to_str().unwrap() };
}
lazy_static! {
    pub static ref DBUS_INTERFACE_DNS_MANAGER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INTERFACE_DNS_MANAGER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_INTERFACE_SETTINGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INTERFACE_SETTINGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_INTERFACE_SETTINGS_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INTERFACE_SETTINGS_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_INTERFACE_SETTINGS_CONNECTION_SECRETS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INTERFACE_SETTINGS_CONNECTION_SECRETS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_INTERFACE_VPN: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DBUS_INTERFACE_VPN).to_str().unwrap() };
}
lazy_static! {
    pub static ref DBUS_INTERFACE_VPN_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INTERFACE_VPN_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_INVALID_VPN_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_INVALID_VPN_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_NO_ACTIVE_VPN_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_NO_ACTIVE_VPN_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_NO_VPN_CONNECTIONS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_NO_VPN_CONNECTIONS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_PATH: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DBUS_PATH).to_str().unwrap() };
}
lazy_static! {
    pub static ref DBUS_PATH_AGENT_MANAGER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_PATH_AGENT_MANAGER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_PATH_DNS_MANAGER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_PATH_DNS_MANAGER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_PATH_SECRET_AGENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_PATH_SECRET_AGENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_PATH_SETTINGS: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DBUS_PATH_SETTINGS).to_str().unwrap() };
}
lazy_static! {
    pub static ref DBUS_PATH_SETTINGS_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_PATH_SETTINGS_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_PATH_VPN: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DBUS_PATH_VPN).to_str().unwrap() };
}
lazy_static! {
    pub static ref DBUS_PATH_VPN_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_PATH_VPN_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_SERVICE: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DBUS_SERVICE).to_str().unwrap() };
}
lazy_static! {
    pub static ref DBUS_VPN_ALREADY_STARTED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_ALREADY_STARTED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_ALREADY_STOPPED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_ALREADY_STOPPED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_BAD_ARGUMENTS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_BAD_ARGUMENTS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_ERROR_PREFIX: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_ERROR_PREFIX)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_INTERACTIVE_NOT_SUPPORTED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_INTERACTIVE_NOT_SUPPORTED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_SIGNAL_CONNECT_FAILED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_CONNECT_FAILED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_SIGNAL_IP4_CONFIG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_IP4_CONFIG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_SIGNAL_IP_CONFIG_BAD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_IP_CONFIG_BAD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_SIGNAL_LAUNCH_FAILED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_LAUNCH_FAILED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_SIGNAL_LOGIN_BANNER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_LOGIN_BANNER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_SIGNAL_LOGIN_FAILED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_LOGIN_FAILED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_SIGNAL_STATE_CHANGE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_STATE_CHANGE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_SIGNAL_VPN_CONFIG_BAD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_SIGNAL_VPN_CONFIG_BAD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_STARTING_IN_PROGRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_STARTING_IN_PROGRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_STOPPING_IN_PROGRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_STOPPING_IN_PROGRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DBUS_VPN_WRONG_STATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DBUS_VPN_WRONG_STATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_ACTIVE_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ACTIVE_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_ADSL_CARRIER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ADSL_CARRIER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_AUTOCONNECT: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_AUTOCONNECT).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_AVAILABLE_CONNECTIONS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_AVAILABLE_CONNECTIONS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_BOND_CARRIER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BOND_CARRIER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_BOND_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BOND_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_BOND_SLAVES: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_BOND_SLAVES).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_BRIDGE_CARRIER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BRIDGE_CARRIER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_BRIDGE_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BRIDGE_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_BRIDGE_SLAVES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BRIDGE_SLAVES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_BT_CAPABILITIES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BT_CAPABILITIES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_BT_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_BT_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_BT_NAME: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_BT_NAME).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_CAPABILITIES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_CAPABILITIES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_DEVICE_TYPE: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_DEVICE_TYPE).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_DHCP4_CONFIG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_DHCP4_CONFIG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_DHCP6_CONFIG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_DHCP6_CONFIG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_DRIVER: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_DRIVER).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_DRIVER_VERSION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_DRIVER_VERSION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_DUMMY_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_DUMMY_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_ETHERNET_CARRIER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ETHERNET_CARRIER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_ETHERNET_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ETHERNET_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_ETHERNET_PERMANENT_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ETHERNET_PERMANENT_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_ETHERNET_S390_SUBCHANNELS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ETHERNET_S390_SUBCHANNELS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_ETHERNET_SPEED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_ETHERNET_SPEED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_FIRMWARE_MISSING: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_FIRMWARE_MISSING)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_FIRMWARE_VERSION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_FIRMWARE_VERSION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_GENERIC_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_GENERIC_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_GENERIC_TYPE_DESCRIPTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_GENERIC_TYPE_DESCRIPTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_INFINIBAND_CARRIER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_INFINIBAND_CARRIER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_INFINIBAND_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_INFINIBAND_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_INTERFACE: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_INTERFACE).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_IP4_CONFIG: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_IP4_CONFIG).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_IP6_CONFIG: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_IP6_CONFIG).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_IP_INTERFACE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_INTERFACE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_IP_TUNNEL_ENCAPSULATION_LIMIT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_ENCAPSULATION_LIMIT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_IP_TUNNEL_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_IP_TUNNEL_FLOW_LABEL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_FLOW_LABEL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_IP_TUNNEL_INPUT_KEY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_INPUT_KEY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_IP_TUNNEL_LOCAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_LOCAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_IP_TUNNEL_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_IP_TUNNEL_OUTPUT_KEY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_OUTPUT_KEY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_IP_TUNNEL_PARENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_PARENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_IP_TUNNEL_PATH_MTU_DISCOVERY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_PATH_MTU_DISCOVERY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_IP_TUNNEL_REMOTE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_REMOTE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_IP_TUNNEL_TOS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_TOS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_IP_TUNNEL_TTL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_IP_TUNNEL_TTL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_LLDP_NEIGHBORS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_LLDP_NEIGHBORS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_CIPHER_SUITE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_CIPHER_SUITE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_ENCODING_SA: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_ENCODING_SA)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_ENCRYPT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_ENCRYPT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_ES: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_MACSEC_ES).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_ICV_LENGTH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_ICV_LENGTH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_INCLUDE_SCI: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_INCLUDE_SCI)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_PARENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_PARENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_PROTECT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_PROTECT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_REPLAY_PROTECT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_REPLAY_PROTECT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_SCB: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_MACSEC_SCB).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_SCI: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_MACSEC_SCI).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_VALIDATION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_VALIDATION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACSEC_WINDOW: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACSEC_WINDOW)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACVLAN_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACVLAN_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACVLAN_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACVLAN_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACVLAN_NO_PROMISC: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACVLAN_NO_PROMISC)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACVLAN_PARENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MACVLAN_PARENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MACVLAN_TAP: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_MACVLAN_TAP).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_MANAGED: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_MANAGED).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_METERED: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_METERED).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_MODEM_CURRENT_CAPABILITIES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MODEM_CURRENT_CAPABILITIES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MODEM_MODEM_CAPABILITIES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_MODEM_MODEM_CAPABILITIES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_MTU: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_MTU).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_NM_PLUGIN_MISSING: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_NM_PLUGIN_MISSING)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_OLPC_MESH_ACTIVE_CHANNEL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_OLPC_MESH_ACTIVE_CHANNEL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_OLPC_MESH_COMPANION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_OLPC_MESH_COMPANION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_OLPC_MESH_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_OLPC_MESH_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_OVS_BRIDGE_SLAVES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_OVS_BRIDGE_SLAVES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_OVS_PORT_SLAVES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_OVS_PORT_SLAVES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_PHYSICAL_PORT_ID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_PHYSICAL_PORT_ID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_PRODUCT: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_PRODUCT).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_REAL: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_REAL).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_STATE: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_STATE).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_STATE_REASON: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_STATE_REASON)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_TEAM_CARRIER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TEAM_CARRIER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_TEAM_CONFIG: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_TEAM_CONFIG).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_TEAM_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TEAM_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_TEAM_SLAVES: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_TEAM_SLAVES).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_TUN_GROUP: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_TUN_GROUP).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_TUN_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TUN_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_TUN_MODE: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_TUN_MODE).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_TUN_MULTI_QUEUE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TUN_MULTI_QUEUE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_TUN_NO_PI: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_TUN_NO_PI).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_TUN_OWNER: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_TUN_OWNER).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_TUN_VNET_HDR: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_TUN_VNET_HDR)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_UDI: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_UDI).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_VENDOR: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_VENDOR).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_VLAN_CARRIER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VLAN_CARRIER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VLAN_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VLAN_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VLAN_PARENT: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_VLAN_PARENT).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_VLAN_VLAN_ID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VLAN_VLAN_ID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_AGEING: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_AGEING)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_CARRIER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_CARRIER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_DST_PORT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_DST_PORT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_GROUP: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_VXLAN_GROUP).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_ID: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_VXLAN_ID).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_L2MISS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_L2MISS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_L3MISS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_L3MISS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_LEARNING: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_LEARNING)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_LIMIT: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_VXLAN_LIMIT).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_LOCAL: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_VXLAN_LOCAL).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_PARENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_PARENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_PROXY: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_VXLAN_PROXY).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_RSC: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_VXLAN_RSC).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_SRC_PORT_MAX: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_SRC_PORT_MAX)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_SRC_PORT_MIN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_VXLAN_SRC_PORT_MIN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_TOS: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_VXLAN_TOS).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_VXLAN_TTL: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_VXLAN_TTL).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_WIFI_ACCESS_POINTS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_ACCESS_POINTS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_WIFI_ACTIVE_ACCESS_POINT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_ACTIVE_ACCESS_POINT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_WIFI_BITRATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_BITRATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_WIFI_CAPABILITIES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_CAPABILITIES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_WIFI_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_WIFI_LAST_SCAN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_LAST_SCAN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_WIFI_MODE: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_WIFI_MODE).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_WIFI_PERMANENT_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIFI_PERMANENT_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_WIMAX_ACTIVE_NSP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIMAX_ACTIVE_NSP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_WIMAX_BSID: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_WIMAX_BSID).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_WIMAX_CENTER_FREQUENCY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIMAX_CENTER_FREQUENCY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_WIMAX_CINR: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_WIMAX_CINR).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_WIMAX_HW_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIMAX_HW_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DEVICE_WIMAX_NSPS: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_WIMAX_NSPS).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_WIMAX_RSSI: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DEVICE_WIMAX_RSSI).to_str().unwrap() };
}
lazy_static! {
    pub static ref DEVICE_WIMAX_TX_POWER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DEVICE_WIMAX_TX_POWER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref DHCP_CONFIG_FAMILY: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_DHCP_CONFIG_FAMILY).to_str().unwrap() };
}
lazy_static! {
    pub static ref DHCP_CONFIG_OPTIONS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_DHCP_CONFIG_OPTIONS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ADDRESS_ATTRIBUTE_LABEL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ADDRESS_ATTRIBUTE_LABEL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_CONFIG_ADDRESSES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_CONFIG_ADDRESSES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_CONFIG_DOMAINS: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_IP_CONFIG_DOMAINS).to_str().unwrap() };
}
lazy_static! {
    pub static ref IP_CONFIG_FAMILY: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_IP_CONFIG_FAMILY).to_str().unwrap() };
}
lazy_static! {
    pub static ref IP_CONFIG_GATEWAY: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_IP_CONFIG_GATEWAY).to_str().unwrap() };
}
lazy_static! {
    pub static ref IP_CONFIG_NAMESERVERS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_CONFIG_NAMESERVERS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_CONFIG_ROUTES: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_IP_CONFIG_ROUTES).to_str().unwrap() };
}
lazy_static! {
    pub static ref IP_CONFIG_SEARCHES: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_IP_CONFIG_SEARCHES).to_str().unwrap() };
}
lazy_static! {
    pub static ref IP_CONFIG_WINS_SERVERS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_CONFIG_WINS_SERVERS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_CWND: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_CWND)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_FROM: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_FROM)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_INITCWND: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_INITCWND)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_INITRWND: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_INITRWND)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_LOCK_CWND: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_LOCK_CWND)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_LOCK_INITCWND: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_LOCK_INITCWND)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_LOCK_INITRWND: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_LOCK_INITRWND)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_LOCK_MTU: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_LOCK_MTU)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_LOCK_WINDOW: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_LOCK_WINDOW)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_MTU: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_MTU)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_ONLINK: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_ONLINK)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_SRC: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_SRC)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_TABLE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_TABLE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_TOS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_TOS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref IP_ROUTE_ATTRIBUTE_WINDOW: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_IP_ROUTE_ATTRIBUTE_WINDOW)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_CHASSIS_ID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_CHASSIS_ID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_CHASSIS_ID_TYPE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_CHASSIS_ID_TYPE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_DESTINATION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_DESTINATION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_IEEE_802_1_PPVID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_1_PPVID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_IEEE_802_1_PPVID_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_1_PPVID_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_IEEE_802_1_PVID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_1_PVID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_IEEE_802_1_VID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_1_VID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_IEEE_802_1_VLAN_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_IEEE_802_1_VLAN_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_PORT_DESCRIPTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_PORT_DESCRIPTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_PORT_ID: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_LLDP_ATTR_PORT_ID).to_str().unwrap() };
}
lazy_static! {
    pub static ref LLDP_ATTR_PORT_ID_TYPE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_PORT_ID_TYPE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_SYSTEM_CAPABILITIES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_SYSTEM_CAPABILITIES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_SYSTEM_DESCRIPTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_SYSTEM_DESCRIPTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_ATTR_SYSTEM_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_ATTR_SYSTEM_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_DEST_NEAREST_BRIDGE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_DEST_NEAREST_BRIDGE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_DEST_NEAREST_CUSTOMER_BRIDGE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_DEST_NEAREST_CUSTOMER_BRIDGE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref LLDP_DEST_NEAREST_NON_TPMR_BRIDGE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_LLDP_DEST_NEAREST_NON_TPMR_BRIDGE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref OBJECT_DBUS_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_OBJECT_DBUS_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref OBJECT_DBUS_OBJECT: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_OBJECT_DBUS_OBJECT).to_str().unwrap() };
}
lazy_static! {
    pub static ref OBJECT_DBUS_OBJECT_MANAGER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_OBJECT_DBUS_OBJECT_MANAGER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref OBJECT_PATH: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_OBJECT_PATH).to_str().unwrap() };
}
lazy_static! {
    pub static ref REMOTE_CONNECTION_DBUS_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_REMOTE_CONNECTION_DBUS_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref REMOTE_CONNECTION_FILENAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_REMOTE_CONNECTION_FILENAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref REMOTE_CONNECTION_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_REMOTE_CONNECTION_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref REMOTE_CONNECTION_PATH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_REMOTE_CONNECTION_PATH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref REMOTE_CONNECTION_UNSAVED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_REMOTE_CONNECTION_UNSAVED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref REMOTE_CONNECTION_VISIBLE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_REMOTE_CONNECTION_VISIBLE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SECRET_AGENT_OLD_AUTO_REGISTER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SECRET_AGENT_OLD_AUTO_REGISTER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SECRET_AGENT_OLD_CAPABILITIES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SECRET_AGENT_OLD_CAPABILITIES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SECRET_AGENT_OLD_IDENTIFIER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SECRET_AGENT_OLD_IDENTIFIER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SECRET_AGENT_OLD_REGISTERED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SECRET_AGENT_OLD_REGISTERED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_ALTSUBJECT_MATCHES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_ALTSUBJECT_MATCHES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_ANONYMOUS_IDENTITY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_ANONYMOUS_IDENTITY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_AUTH_TIMEOUT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_AUTH_TIMEOUT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_CA_CERT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CA_CERT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_CA_CERT_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CA_CERT_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_CA_CERT_PASSWORD_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CA_CERT_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_CA_PATH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CA_PATH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_CERT_SCHEME_PREFIX_PATH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CERT_SCHEME_PREFIX_PATH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_CERT_SCHEME_PREFIX_PKCS11: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CERT_SCHEME_PREFIX_PKCS11)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_CLIENT_CERT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CLIENT_CERT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_CLIENT_CERT_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CLIENT_CERT_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_CLIENT_CERT_PASSWORD_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_CLIENT_CERT_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_DOMAIN_SUFFIX_MATCH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_DOMAIN_SUFFIX_MATCH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_EAP: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_802_1X_EAP).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_802_1X_IDENTITY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_IDENTITY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PAC_FILE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PAC_FILE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PASSWORD_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PASSWORD_RAW: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PASSWORD_RAW)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PASSWORD_RAW_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PASSWORD_RAW_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE1_AUTH_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE1_AUTH_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE1_FAST_PROVISIONING: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE1_FAST_PROVISIONING)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE1_PEAPLABEL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE1_PEAPLABEL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE1_PEAPVER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE1_PEAPVER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_ALTSUBJECT_MATCHES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_ALTSUBJECT_MATCHES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_AUTH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_AUTH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_AUTHEAP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_AUTHEAP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_CA_CERT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CA_CERT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_CA_CERT_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CA_CERT_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_CA_CERT_PASSWORD_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CA_CERT_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_CA_PATH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CA_PATH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_CLIENT_CERT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CLIENT_CERT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_DOMAIN_SUFFIX_MATCH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_DOMAIN_SUFFIX_MATCH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_PRIVATE_KEY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_PRIVATE_KEY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PHASE2_SUBJECT_MATCH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PHASE2_SUBJECT_MATCH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PIN: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_802_1X_PIN).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_802_1X_PIN_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PIN_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PRIVATE_KEY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PRIVATE_KEY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PRIVATE_KEY_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PRIVATE_KEY_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_PRIVATE_KEY_PASSWORD_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_PRIVATE_KEY_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_SUBJECT_MATCH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_SUBJECT_MATCH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_802_1X_SYSTEM_CA_CERTS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_802_1X_SYSTEM_CA_CERTS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_ADSL_ENCAPSULATION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_ENCAPSULATION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_ADSL_ENCAPSULATION_LLC: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_ENCAPSULATION_LLC)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_ADSL_ENCAPSULATION_VCMUX: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_ENCAPSULATION_VCMUX)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_ADSL_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_ADSL_PASSWORD_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_ADSL_PROTOCOL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_PROTOCOL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_ADSL_PROTOCOL_IPOATM: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_PROTOCOL_IPOATM)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_ADSL_PROTOCOL_PPPOA: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_PROTOCOL_PPPOA)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_ADSL_PROTOCOL_PPPOE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_PROTOCOL_PPPOE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_ADSL_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_ADSL_USERNAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_ADSL_USERNAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_ADSL_VCI: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_ADSL_VCI).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_ADSL_VPI: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_ADSL_VPI).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_BLUETOOTH_BDADDR: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BLUETOOTH_BDADDR)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BLUETOOTH_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BLUETOOTH_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BLUETOOTH_TYPE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BLUETOOTH_TYPE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BLUETOOTH_TYPE_DUN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BLUETOOTH_TYPE_DUN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BLUETOOTH_TYPE_NAP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BLUETOOTH_TYPE_NAP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BLUETOOTH_TYPE_PANU: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BLUETOOTH_TYPE_PANU)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTIONS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTIONS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_ACTIVE_SLAVE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_ACTIVE_SLAVE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_AD_ACTOR_SYSTEM: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_AD_ACTOR_SYSTEM)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_AD_ACTOR_SYS_PRIO: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_AD_ACTOR_SYS_PRIO)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_AD_SELECT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_AD_SELECT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_AD_USER_PORT_KEY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_AD_USER_PORT_KEY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_ALL_SLAVES_ACTIVE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_ALL_SLAVES_ACTIVE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_ARP_ALL_TARGETS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_ARP_ALL_TARGETS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_ARP_INTERVAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_ARP_INTERVAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_ARP_IP_TARGET: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_ARP_IP_TARGET)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_ARP_VALIDATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_ARP_VALIDATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_DOWNDELAY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_DOWNDELAY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_FAIL_OVER_MAC: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_FAIL_OVER_MAC)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_LACP_RATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_LACP_RATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_LP_INTERVAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_LP_INTERVAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_MIIMON: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_MIIMON)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_MIN_LINKS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_MIN_LINKS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_NUM_GRAT_ARP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_NUM_GRAT_ARP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_NUM_UNSOL_NA: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_NUM_UNSOL_NA)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_PACKETS_PER_SLAVE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_PACKETS_PER_SLAVE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_PRIMARY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_PRIMARY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_PRIMARY_RESELECT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_PRIMARY_RESELECT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_RESEND_IGMP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_RESEND_IGMP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_TLB_DYNAMIC_LB: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_TLB_DYNAMIC_LB)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_UPDELAY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_UPDELAY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_USE_CARRIER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_USE_CARRIER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_OPTION_XMIT_HASH_POLICY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_OPTION_XMIT_HASH_POLICY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BOND_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BOND_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_AGEING_TIME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_AGEING_TIME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_FORWARD_DELAY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_FORWARD_DELAY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_GROUP_FORWARD_MASK: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_GROUP_FORWARD_MASK)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_HELLO_TIME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_HELLO_TIME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_MAC_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MAC_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_MAX_AGE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MAX_AGE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_MULTICAST_SNOOPING: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_MULTICAST_SNOOPING)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_PORT_HAIRPIN_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_PORT_HAIRPIN_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_PORT_PATH_COST: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_PORT_PATH_COST)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_PORT_PRIORITY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_PORT_PRIORITY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_PORT_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_PORT_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_PRIORITY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_PRIORITY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_BRIDGE_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_BRIDGE_STP: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_BRIDGE_STP).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_CDMA_MTU: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_CDMA_MTU).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_CDMA_NUMBER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CDMA_NUMBER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CDMA_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CDMA_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CDMA_PASSWORD_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CDMA_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CDMA_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CDMA_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CDMA_USERNAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CDMA_USERNAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_AUTH_RETRIES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_AUTH_RETRIES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_AUTOCONNECT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_AUTOCONNECT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_AUTOCONNECT_PRIORITY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_AUTOCONNECT_PRIORITY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_AUTOCONNECT_RETRIES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_AUTOCONNECT_RETRIES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_AUTOCONNECT_SLAVES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_AUTOCONNECT_SLAVES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_GATEWAY_PING_TIMEOUT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_GATEWAY_PING_TIMEOUT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_ID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_ID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_INTERFACE_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_INTERFACE_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_LLDP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_LLDP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_MASTER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_MASTER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_MDNS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_MDNS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_METERED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_METERED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_PERMISSIONS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_PERMISSIONS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_READ_ONLY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_READ_ONLY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_SECONDARIES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_SECONDARIES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_SLAVE_TYPE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_SLAVE_TYPE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_STABLE_ID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_STABLE_ID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_TIMESTAMP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_TIMESTAMP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_TYPE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_TYPE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_UUID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_UUID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_CONNECTION_ZONE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_CONNECTION_ZONE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_APP_FCOE_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_FCOE_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_APP_FCOE_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_FCOE_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_APP_FCOE_PRIORITY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_FCOE_PRIORITY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_APP_FIP_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_FIP_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_APP_FIP_PRIORITY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_FIP_PRIORITY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_APP_ISCSI_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_ISCSI_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_APP_ISCSI_PRIORITY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_APP_ISCSI_PRIORITY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_FCOE_MODE_FABRIC: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_FCOE_MODE_FABRIC)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_FCOE_MODE_VN2VN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_FCOE_MODE_VN2VN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_PRIORITY_BANDWIDTH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_BANDWIDTH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_PRIORITY_FLOW_CONTROL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_FLOW_CONTROL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_PRIORITY_FLOW_CONTROL_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_FLOW_CONTROL_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_PRIORITY_GROUP_BANDWIDTH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_GROUP_BANDWIDTH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_PRIORITY_GROUP_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_GROUP_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_PRIORITY_GROUP_ID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_GROUP_ID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_PRIORITY_STRICT_BANDWIDTH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_STRICT_BANDWIDTH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_PRIORITY_TRAFFIC_CLASS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_PRIORITY_TRAFFIC_CLASS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DCB_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DCB_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_ATTEMPTS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_ATTEMPTS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_DEBUG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_DEBUG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_EDNS0: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_EDNS0)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_INET6: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_INET6)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_IP6_BYTESTRING: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_IP6_BYTESTRING)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_IP6_DOTINT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_IP6_DOTINT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_NDOTS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_NDOTS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_NO_CHECK_NAMES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_NO_CHECK_NAMES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_NO_IP6_DOTINT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_NO_IP6_DOTINT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_NO_TLD_QUERY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_NO_TLD_QUERY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_ROTATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_ROTATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_SINGLE_REQUEST: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_SINGLE_REQUEST)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_SINGLE_REQUEST_REOPEN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_SINGLE_REQUEST_REOPEN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_TIMEOUT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_TIMEOUT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DNS_OPTION_USE_VC: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DNS_OPTION_USE_VC)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_DUMMY_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_DUMMY_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_GENERIC_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GENERIC_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_GSM_APN: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_GSM_APN).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_GSM_DEVICE_ID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_DEVICE_ID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_GSM_HOME_ONLY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_HOME_ONLY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_GSM_MTU: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_GSM_MTU).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_GSM_NETWORK_ID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_NETWORK_ID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_GSM_NUMBER: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_GSM_NUMBER).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_GSM_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_GSM_PASSWORD_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_GSM_PIN: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_GSM_PIN).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_GSM_PIN_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_PIN_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_GSM_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_GSM_SIM_ID: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_GSM_SIM_ID).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_GSM_SIM_OPERATOR_ID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_SIM_OPERATOR_ID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_GSM_USERNAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_GSM_USERNAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_INFINIBAND_MAC_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_INFINIBAND_MAC_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_INFINIBAND_MTU: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_INFINIBAND_MTU)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_INFINIBAND_PARENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_INFINIBAND_PARENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_INFINIBAND_P_KEY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_INFINIBAND_P_KEY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_INFINIBAND_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_INFINIBAND_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_INFINIBAND_TRANSPORT_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_INFINIBAND_TRANSPORT_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP4_CONFIG_DHCP_CLIENT_ID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_DHCP_CLIENT_ID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP4_CONFIG_DHCP_FQDN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_DHCP_FQDN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP4_CONFIG_METHOD_AUTO: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_METHOD_AUTO)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP4_CONFIG_METHOD_DISABLED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_METHOD_DISABLED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP4_CONFIG_METHOD_LINK_LOCAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_METHOD_LINK_LOCAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP4_CONFIG_METHOD_MANUAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_METHOD_MANUAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP4_CONFIG_METHOD_SHARED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_METHOD_SHARED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP4_CONFIG_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP4_CONFIG_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP6_CONFIG_ADDR_GEN_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_ADDR_GEN_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP6_CONFIG_DHCP_DUID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_DHCP_DUID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP6_CONFIG_IP6_PRIVACY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_IP6_PRIVACY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP6_CONFIG_METHOD_AUTO: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_AUTO)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP6_CONFIG_METHOD_DHCP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_DHCP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP6_CONFIG_METHOD_IGNORE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_IGNORE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP6_CONFIG_METHOD_LINK_LOCAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_LINK_LOCAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP6_CONFIG_METHOD_MANUAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_MANUAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP6_CONFIG_METHOD_SHARED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_METHOD_SHARED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP6_CONFIG_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP6_CONFIG_TOKEN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP6_CONFIG_TOKEN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_ADDRESSES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_ADDRESSES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_DAD_TIMEOUT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DAD_TIMEOUT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_DHCP_HOSTNAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DHCP_HOSTNAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_DHCP_SEND_HOSTNAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DHCP_SEND_HOSTNAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_DHCP_TIMEOUT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DHCP_TIMEOUT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_DNS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DNS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_DNS_OPTIONS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DNS_OPTIONS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_DNS_PRIORITY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DNS_PRIORITY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_DNS_SEARCH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_DNS_SEARCH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_GATEWAY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_GATEWAY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_IGNORE_AUTO_DNS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_IGNORE_AUTO_DNS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_IGNORE_AUTO_ROUTES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_IGNORE_AUTO_ROUTES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_MAY_FAIL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_MAY_FAIL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_METHOD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_METHOD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_NEVER_DEFAULT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_NEVER_DEFAULT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_ROUTES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_ROUTES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_ROUTE_METRIC: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_ROUTE_METRIC)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_CONFIG_ROUTE_TABLE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_CONFIG_ROUTE_TABLE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_ENCAPSULATION_LIMIT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_ENCAPSULATION_LIMIT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_FLOW_LABEL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_FLOW_LABEL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_INPUT_KEY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_INPUT_KEY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_LOCAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_LOCAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_MTU: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_MTU)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_OUTPUT_KEY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_OUTPUT_KEY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_PARENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_PARENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_PATH_MTU_DISCOVERY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_PATH_MTU_DISCOVERY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_REMOTE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_REMOTE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_TOS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_TOS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_IP_TUNNEL_TTL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_IP_TUNNEL_TTL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACSEC_ENCRYPT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_ENCRYPT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACSEC_MKA_CAK: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_MKA_CAK)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACSEC_MKA_CAK_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_MKA_CAK_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACSEC_MKA_CKN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_MKA_CKN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACSEC_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACSEC_PARENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_PARENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACSEC_PORT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_PORT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACSEC_SEND_SCI: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_SEND_SCI)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACSEC_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACSEC_VALIDATION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACSEC_VALIDATION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACVLAN_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACVLAN_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACVLAN_PARENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACVLAN_PARENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACVLAN_PROMISCUOUS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACVLAN_PROMISCUOUS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACVLAN_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACVLAN_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_MACVLAN_TAP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_MACVLAN_TAP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_NAME: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_NAME).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_OLPC_MESH_CHANNEL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OLPC_MESH_CHANNEL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OLPC_MESH_DHCP_ANYCAST_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OLPC_MESH_DHCP_ANYCAST_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OLPC_MESH_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OLPC_MESH_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OLPC_MESH_SSID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OLPC_MESH_SSID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_BRIDGE_FAIL_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_BRIDGE_FAIL_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_BRIDGE_MCAST_SNOOPING_ENABLE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_BRIDGE_MCAST_SNOOPING_ENABLE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_BRIDGE_RSTP_ENABLE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_BRIDGE_RSTP_ENABLE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_BRIDGE_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_BRIDGE_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_BRIDGE_STP_ENABLE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_BRIDGE_STP_ENABLE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_INTERFACE_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_INTERFACE_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_INTERFACE_TYPE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_INTERFACE_TYPE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_PATCH_PEER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PATCH_PEER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_PATCH_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PATCH_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_PORT_BOND_DOWNDELAY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_BOND_DOWNDELAY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_PORT_BOND_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_BOND_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_PORT_BOND_UPDELAY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_BOND_UPDELAY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_PORT_LACP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_LACP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_PORT_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_PORT_TAG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_TAG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_OVS_PORT_VLAN_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_OVS_PORT_VLAN_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPPOE_PARENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPPOE_PARENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPPOE_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPPOE_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPPOE_PASSWORD_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPPOE_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPPOE_SERVICE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPPOE_SERVICE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPPOE_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPPOE_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPPOE_USERNAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPPOE_USERNAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_BAUD: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_PPP_BAUD).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_PPP_CRTSCTS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_CRTSCTS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_LCP_ECHO_FAILURE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_LCP_ECHO_FAILURE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_LCP_ECHO_INTERVAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_LCP_ECHO_INTERVAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_MPPE_STATEFUL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_MPPE_STATEFUL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_MRU: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_PPP_MRU).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_PPP_MTU: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_PPP_MTU).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_PPP_NOAUTH: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_PPP_NOAUTH).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_PPP_NOBSDCOMP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_NOBSDCOMP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_NODEFLATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_NODEFLATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_NO_VJ_COMP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_NO_VJ_COMP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_REFUSE_CHAP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REFUSE_CHAP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_REFUSE_EAP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REFUSE_EAP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_REFUSE_MSCHAP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REFUSE_MSCHAP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_REFUSE_MSCHAPV2: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REFUSE_MSCHAPV2)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_REFUSE_PAP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REFUSE_PAP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_REQUIRE_MPPE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REQUIRE_MPPE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_REQUIRE_MPPE_128: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_REQUIRE_MPPE_128)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PPP_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PPP_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PROXY_BROWSER_ONLY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PROXY_BROWSER_ONLY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PROXY_METHOD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PROXY_METHOD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PROXY_PAC_SCRIPT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PROXY_PAC_SCRIPT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PROXY_PAC_URL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PROXY_PAC_URL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_PROXY_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_PROXY_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_SERIAL_BAUD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SERIAL_BAUD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_SERIAL_BITS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SERIAL_BITS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_SERIAL_PARITY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SERIAL_PARITY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_SERIAL_SEND_DELAY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SERIAL_SEND_DELAY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_SERIAL_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SERIAL_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_SERIAL_STOPBITS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_SERIAL_STOPBITS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TC_CONFIG_QDISCS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TC_CONFIG_QDISCS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TC_CONFIG_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TC_CONFIG_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TC_CONFIG_TFILTERS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TC_CONFIG_TFILTERS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_CONFIG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_CONFIG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_LINK_WATCHERS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_LINK_WATCHERS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_MCAST_REJOIN_COUNT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_MCAST_REJOIN_COUNT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_MCAST_REJOIN_INTERVAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_MCAST_REJOIN_INTERVAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_NOTIFY_PEERS_COUNT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_NOTIFY_PEERS_COUNT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_NOTIFY_PEERS_INTERVAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_NOTIFY_PEERS_INTERVAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_PORT_CONFIG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_CONFIG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_PORT_LACP_KEY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_LACP_KEY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_PORT_LACP_PRIO: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_LACP_PRIO)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_PORT_LINK_WATCHERS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_LINK_WATCHERS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_PORT_PRIO: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_PRIO)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_PORT_QUEUE_ID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_QUEUE_ID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_PORT_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_PORT_STICKY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_PORT_STICKY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_ACTIVE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_ACTIVE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_ACTIVEBACKUP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_ACTIVEBACKUP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_AGG_SELECT_POLICY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_BANDWIDTH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_BANDWIDTH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_COUNT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_COUNT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO_STABLE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO_STABLE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_PORT_CONFIG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_PORT_CONFIG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_BROADCAST: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_BROADCAST)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_FAST_RATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_FAST_RATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_HWADDR_POLICY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_HWADDR_POLICY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_HWADDR_POLICY_BY_ACTIVE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_HWADDR_POLICY_BY_ACTIVE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_HWADDR_POLICY_ONLY_ACTIVE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_HWADDR_POLICY_ONLY_ACTIVE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_HWADDR_POLICY_SAME_ALL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_HWADDR_POLICY_SAME_ALL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_LACP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_LACP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_LOADBALANCE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_LOADBALANCE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_MIN_PORTS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_MIN_PORTS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_RANDOM: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_RANDOM)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_ROUNDROBIN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_ROUNDROBIN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_SYS_PRIO: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_SYS_PRIO)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_TX_BALANCER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_TX_BALANCER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_RUNNER_TX_HASH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_RUNNER_TX_HASH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TEAM_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TEAM_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TUN_GROUP: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_TUN_GROUP).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_TUN_MODE: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_TUN_MODE).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_TUN_MULTI_QUEUE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TUN_MULTI_QUEUE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TUN_OWNER: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_TUN_OWNER).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_TUN_PI: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_TUN_PI).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_TUN_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TUN_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_TUN_VNET_HDR: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_TUN_VNET_HDR)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_USER_DATA: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_USER_DATA).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_USER_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_USER_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VLAN_EGRESS_PRIORITY_MAP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VLAN_EGRESS_PRIORITY_MAP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VLAN_FLAGS: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_VLAN_FLAGS).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_VLAN_ID: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_VLAN_ID).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_VLAN_INGRESS_PRIORITY_MAP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VLAN_INGRESS_PRIORITY_MAP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VLAN_PARENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VLAN_PARENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VLAN_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VLAN_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VPN_DATA: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_VPN_DATA).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_VPN_PERSISTENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_PERSISTENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VPN_SECRETS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_SECRETS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VPN_SERVICE_TYPE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_SERVICE_TYPE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VPN_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VPN_TIMEOUT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_TIMEOUT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VPN_USER_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VPN_USER_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_AGEING: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_AGEING)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_DESTINATION_PORT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_DESTINATION_PORT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_ID: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_VXLAN_ID).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_VXLAN_L2_MISS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_L2_MISS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_L3_MISS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_L3_MISS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_LEARNING: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_LEARNING)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_LIMIT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_LIMIT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_LOCAL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_LOCAL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_PARENT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_PARENT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_PROXY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_PROXY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_REMOTE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_REMOTE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_RSC: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_VXLAN_RSC).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_VXLAN_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_SOURCE_PORT_MAX: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_SOURCE_PORT_MAX)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_SOURCE_PORT_MIN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_VXLAN_SOURCE_PORT_MIN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_VXLAN_TOS: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_VXLAN_TOS).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_VXLAN_TTL: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_VXLAN_TTL).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_WIMAX_MAC_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIMAX_MAC_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIMAX_NETWORK_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIMAX_NETWORK_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIMAX_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIMAX_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_AUTO_NEGOTIATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_AUTO_NEGOTIATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_CLONED_MAC_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_CLONED_MAC_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_DUPLEX: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_DUPLEX)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_GENERATE_MAC_ADDRESS_MASK: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_GENERATE_MAC_ADDRESS_MASK)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_MAC_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_MAC_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_MAC_ADDRESS_BLACKLIST: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_MAC_ADDRESS_BLACKLIST)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_MTU: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_WIRED_MTU).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_WIRED_PORT: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_SETTING_WIRED_PORT).to_str().unwrap() };
}
lazy_static! {
    pub static ref SETTING_WIRED_S390_NETTYPE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_S390_NETTYPE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_S390_OPTIONS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_S390_OPTIONS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_S390_SUBCHANNELS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_S390_SUBCHANNELS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_SPEED: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_SPEED)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_WAKE_ON_LAN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_WAKE_ON_LAN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRED_WAKE_ON_LAN_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRED_WAKE_ON_LAN_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_BAND: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_BAND)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_BSSID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_BSSID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_CHANNEL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_CHANNEL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_CLONED_MAC_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_CLONED_MAC_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_GENERATE_MAC_ADDRESS_MASK: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_GENERATE_MAC_ADDRESS_MASK)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_HIDDEN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_HIDDEN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_MAC_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MAC_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_MAC_ADDRESS_BLACKLIST: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MAC_ADDRESS_BLACKLIST)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_MAC_ADDRESS_RANDOMIZATION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MAC_ADDRESS_RANDOMIZATION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_MODE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MODE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_MODE_ADHOC: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MODE_ADHOC)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_MODE_AP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MODE_AP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_MODE_INFRA: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MODE_INFRA)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_MTU: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_MTU)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_POWERSAVE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_POWERSAVE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_RATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_RATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_AUTH_ALG: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_AUTH_ALG)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_FILS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_FILS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_GROUP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_GROUP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_KEY_MGMT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_KEY_MGMT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_LEAP_PASSWORD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_LEAP_PASSWORD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_LEAP_PASSWORD_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_LEAP_PASSWORD_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_LEAP_USERNAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_LEAP_USERNAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_PAIRWISE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_PAIRWISE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_PMF: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_PMF)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_PROTO: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_PROTO)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_PSK: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_PSK)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_PSK_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_PSK_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_WEP_KEY0: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_KEY0)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_WEP_KEY1: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_KEY1)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_WEP_KEY2: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_KEY2)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_WEP_KEY3: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_KEY3)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_WEP_KEY_FLAGS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_KEY_FLAGS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_WEP_TX_KEYIDX: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WEP_TX_KEYIDX)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SECURITY_WPS_METHOD: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SECURITY_WPS_METHOD)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SEEN_BSSIDS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SEEN_BSSIDS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SETTING_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SETTING_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_SSID: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_SSID)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_TX_POWER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_TX_POWER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref SETTING_WIRELESS_WAKE_ON_WLAN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_SETTING_WIRELESS_WAKE_ON_WLAN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref TEAM_LINK_WATCHER_ARP_PING: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_TEAM_LINK_WATCHER_ARP_PING)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref TEAM_LINK_WATCHER_ETHTOOL: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_TEAM_LINK_WATCHER_ETHTOOL)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref TEAM_LINK_WATCHER_NSNA_PING: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_TEAM_LINK_WATCHER_NSNA_PING)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_CONNECTION_BANNER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_CONNECTION_BANNER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_CONNECTION_VPN_STATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_CONNECTION_VPN_STATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_DBUS_PLUGIN_INTERFACE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_DBUS_PLUGIN_INTERFACE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_DBUS_PLUGIN_PATH: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_DBUS_PLUGIN_PATH)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_EDITOR_PLUGIN_DESCRIPTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_EDITOR_PLUGIN_DESCRIPTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_EDITOR_PLUGIN_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_EDITOR_PLUGIN_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_EDITOR_PLUGIN_SERVICE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_EDITOR_PLUGIN_SERVICE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_CAN_PERSIST: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CAN_PERSIST)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_CONFIG_BANNER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_BANNER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_CONFIG_EXT_GATEWAY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_EXT_GATEWAY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_CONFIG_HAS_IP4: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_HAS_IP4)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_CONFIG_HAS_IP6: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_HAS_IP6)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_CONFIG_MTU: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_MTU)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_CONFIG_PROXY_PAC: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_PROXY_PAC)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_CONFIG_TUNDEV: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_CONFIG_TUNDEV)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_INFO_FILENAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_INFO_FILENAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_INFO_KEYFILE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_INFO_KEYFILE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_INFO_KF_GROUP_CONNECTION: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_INFO_KF_GROUP_CONNECTION)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_INFO_KF_GROUP_GNOME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_INFO_KF_GROUP_GNOME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_INFO_KF_GROUP_LIBNM: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_INFO_KF_GROUP_LIBNM)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_INFO_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_INFO_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP4_CONFIG_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP4_CONFIG_DNS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_DNS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP4_CONFIG_DOMAIN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_DOMAIN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP4_CONFIG_DOMAINS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_DOMAINS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP4_CONFIG_INT_GATEWAY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_INT_GATEWAY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP4_CONFIG_MSS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_MSS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP4_CONFIG_NBNS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_NBNS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP4_CONFIG_NEVER_DEFAULT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_NEVER_DEFAULT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP4_CONFIG_PREFIX: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_PREFIX)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP4_CONFIG_PRESERVE_ROUTES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_PRESERVE_ROUTES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP4_CONFIG_PTP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_PTP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP4_CONFIG_ROUTES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP4_CONFIG_ROUTES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP6_CONFIG_ADDRESS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_ADDRESS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP6_CONFIG_DNS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_DNS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP6_CONFIG_DOMAIN: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_DOMAIN)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP6_CONFIG_DOMAINS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_DOMAINS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP6_CONFIG_INT_GATEWAY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_INT_GATEWAY)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP6_CONFIG_MSS: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_MSS)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP6_CONFIG_NEVER_DEFAULT: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_NEVER_DEFAULT)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP6_CONFIG_PREFIX: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_PREFIX)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP6_CONFIG_PRESERVE_ROUTES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_PRESERVE_ROUTES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP6_CONFIG_PTP: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_PTP)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_IP6_CONFIG_ROUTES: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_IP6_CONFIG_ROUTES)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_OLD_DBUS_SERVICE_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_OLD_DBUS_SERVICE_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_PLUGIN_OLD_STATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_PLUGIN_OLD_STATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_SERVICE_PLUGIN_DBUS_SERVICE_NAME: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_SERVICE_PLUGIN_DBUS_SERVICE_NAME)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_SERVICE_PLUGIN_DBUS_WATCH_PEER: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_SERVICE_PLUGIN_DBUS_WATCH_PEER)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref VPN_SERVICE_PLUGIN_STATE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_VPN_SERVICE_PLUGIN_STATE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref WIMAX_NSP_NAME: &'static str =
        unsafe { CStr::from_ptr(ffi::NM_WIMAX_NSP_NAME).to_str().unwrap() };
}
lazy_static! {
    pub static ref WIMAX_NSP_NETWORK_TYPE: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_WIMAX_NSP_NETWORK_TYPE)
            .to_str()
            .unwrap()
    };
}
lazy_static! {
    pub static ref WIMAX_NSP_SIGNAL_QUALITY: &'static str = unsafe {
        CStr::from_ptr(ffi::NM_WIMAX_NSP_SIGNAL_QUALITY)
            .to_str()
            .unwrap()
    };
}
