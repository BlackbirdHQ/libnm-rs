// This file was generated by gir (https://github.com/gtk-rs/gir @ 464833e)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use IPTunnelFlags;
use IPTunnelMode;
use Setting;

glib_wrapper! {
    pub struct SettingIPTunnel(Object<ffi::NMSettingIPTunnel, ffi::NMSettingIPTunnelClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_ip_tunnel_get_type(),
    }
}

impl SettingIPTunnel {
    pub fn new() -> SettingIPTunnel {
        unsafe { Setting::from_glib_full(ffi::nm_setting_ip_tunnel_new()).downcast_unchecked() }
    }
}

impl Default for SettingIPTunnel {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingIPTunnelExt {
    fn get_encapsulation_limit(&self) -> u32;

    fn get_flags(&self) -> IPTunnelFlags;

    fn get_flow_label(&self) -> u32;

    fn get_input_key(&self) -> Option<String>;

    fn get_local(&self) -> Option<String>;

    fn get_mode(&self) -> IPTunnelMode;

    fn get_mtu(&self) -> u32;

    fn get_output_key(&self) -> Option<String>;

    fn get_parent(&self) -> Option<String>;

    fn get_path_mtu_discovery(&self) -> bool;

    fn get_remote(&self) -> Option<String>;

    fn get_tos(&self) -> u32;

    fn get_ttl(&self) -> u32;

    fn set_property_encapsulation_limit(&self, encapsulation_limit: u32);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_flags(&self, flags: u32);

    fn set_property_flow_label(&self, flow_label: u32);

    fn set_property_input_key(&self, input_key: Option<&str>);

    fn set_property_local(&self, local: Option<&str>);

    fn set_property_mode(&self, mode: u32);

    fn set_property_mtu(&self, mtu: u32);

    fn set_property_output_key(&self, output_key: Option<&str>);

    fn set_property_parent(&self, parent: Option<&str>);

    fn set_property_path_mtu_discovery(&self, path_mtu_discovery: bool);

    fn set_property_remote(&self, remote: Option<&str>);

    fn set_property_tos(&self, tos: u32);

    fn set_property_ttl(&self, ttl: u32);

    fn connect_property_encapsulation_limit_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_flow_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_input_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_local_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_output_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_path_mtu_discovery_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_remote_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_tos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_ttl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingIPTunnel> + IsA<glib::object::Object>> SettingIPTunnelExt for O {
    fn get_encapsulation_limit(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_tunnel_get_encapsulation_limit(self.to_glib_none().0) }
    }

    fn get_flags(&self) -> IPTunnelFlags {
        unsafe { from_glib(ffi::nm_setting_ip_tunnel_get_flags(self.to_glib_none().0)) }
    }

    fn get_flow_label(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_tunnel_get_flow_label(self.to_glib_none().0) }
    }

    fn get_input_key(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_tunnel_get_input_key(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_local(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_ip_tunnel_get_local(self.to_glib_none().0)) }
    }

    fn get_mode(&self) -> IPTunnelMode {
        unsafe { from_glib(ffi::nm_setting_ip_tunnel_get_mode(self.to_glib_none().0)) }
    }

    fn get_mtu(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_tunnel_get_mtu(self.to_glib_none().0) }
    }

    fn get_output_key(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_tunnel_get_output_key(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_parent(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_ip_tunnel_get_parent(self.to_glib_none().0)) }
    }

    fn get_path_mtu_discovery(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_tunnel_get_path_mtu_discovery(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_remote(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_setting_ip_tunnel_get_remote(self.to_glib_none().0)) }
    }

    fn get_tos(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_tunnel_get_tos(self.to_glib_none().0) }
    }

    fn get_ttl(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_tunnel_get_ttl(self.to_glib_none().0) }
    }

    fn set_property_encapsulation_limit(&self, encapsulation_limit: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "encapsulation-limit".to_glib_none().0,
                Value::from(&encapsulation_limit).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_flags(&self, flags: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "flags".to_glib_none().0,
                Value::from(&flags).to_glib_none().0,
            );
        }
    }

    fn set_property_flow_label(&self, flow_label: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "flow-label".to_glib_none().0,
                Value::from(&flow_label).to_glib_none().0,
            );
        }
    }

    fn set_property_input_key(&self, input_key: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "input-key".to_glib_none().0,
                Value::from(input_key).to_glib_none().0,
            );
        }
    }

    fn set_property_local(&self, local: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "local".to_glib_none().0,
                Value::from(local).to_glib_none().0,
            );
        }
    }

    fn set_property_mode(&self, mode: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "mode".to_glib_none().0,
                Value::from(&mode).to_glib_none().0,
            );
        }
    }

    fn set_property_mtu(&self, mtu: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "mtu".to_glib_none().0,
                Value::from(&mtu).to_glib_none().0,
            );
        }
    }

    fn set_property_output_key(&self, output_key: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "output-key".to_glib_none().0,
                Value::from(output_key).to_glib_none().0,
            );
        }
    }

    fn set_property_parent(&self, parent: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "parent".to_glib_none().0,
                Value::from(parent).to_glib_none().0,
            );
        }
    }

    fn set_property_path_mtu_discovery(&self, path_mtu_discovery: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "path-mtu-discovery".to_glib_none().0,
                Value::from(&path_mtu_discovery).to_glib_none().0,
            );
        }
    }

    fn set_property_remote(&self, remote: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "remote".to_glib_none().0,
                Value::from(remote).to_glib_none().0,
            );
        }
    }

    fn set_property_tos(&self, tos: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "tos".to_glib_none().0,
                Value::from(&tos).to_glib_none().0,
            );
        }
    }

    fn set_property_ttl(&self, ttl: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0,
                "ttl".to_glib_none().0,
                Value::from(&ttl).to_glib_none().0,
            );
        }
    }

    fn connect_property_encapsulation_limit_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::encapsulation-limit",
                transmute(notify_encapsulation_limit_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::flags",
                transmute(notify_flags_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_flow_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::flow-label",
                transmute(notify_flow_label_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_input_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::input-key",
                transmute(notify_input_key_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_local_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::local",
                transmute(notify_local_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::mode",
                transmute(notify_mode_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::mtu",
                transmute(notify_mtu_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_output_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::output-key",
                transmute(notify_output_key_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::parent",
                transmute(notify_parent_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_path_mtu_discovery_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::path-mtu-discovery",
                transmute(notify_path_mtu_discovery_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_remote_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::remote",
                transmute(notify_remote_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_tos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::tos",
                transmute(notify_tos_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_ttl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::ttl",
                transmute(notify_ttl_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_encapsulation_limit_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
unsafe extern "C" fn notify_flags_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_flow_label_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_input_key_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_local_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_mode_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_mtu_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_output_key_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_parent_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_path_mtu_discovery_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_remote_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_tos_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_ttl_trampoline<P>(
    this: *mut ffi::NMSettingIPTunnel,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIPTunnel>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIPTunnel::from_glib_borrow(this).downcast_unchecked())
}
