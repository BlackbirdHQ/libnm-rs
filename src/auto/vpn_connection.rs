// This file was generated by gir (https://github.com/gtk-rs/gir @ 609779c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use ActiveConnection;
use VpnConnectionState;

glib_wrapper! {
    pub struct VpnConnection(Object<ffi::NMVpnConnection, ffi::NMVpnConnectionClass>): ActiveConnection;

    match fn {
        get_type => || ffi::nm_vpn_connection_get_type(),
    }
}

pub trait VpnConnectionExt {
    fn get_banner(&self) -> Option<String>;

    fn get_vpn_state(&self) -> VpnConnectionState;

    fn connect_vpn_state_changed<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_banner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vpn_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<VpnConnection> + IsA<glib::object::Object>> VpnConnectionExt for O {
    fn get_banner(&self) -> Option<String> {
        unsafe { from_glib_none(ffi::nm_vpn_connection_get_banner(self.to_glib_none().0)) }
    }

    fn get_vpn_state(&self) -> VpnConnectionState {
        unsafe { from_glib(ffi::nm_vpn_connection_get_vpn_state(self.to_glib_none().0)) }
    }

    fn connect_vpn_state_changed<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, u32, u32) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "vpn-state-changed",
                transmute(vpn_state_changed_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_banner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::banner",
                transmute(notify_banner_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_vpn_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::vpn-state",
                transmute(notify_vpn_state_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn vpn_state_changed_trampoline<P>(
    this: *mut ffi::NMVpnConnection,
    object: libc::c_uint,
    p0: libc::c_uint,
    f: glib_ffi::gpointer,
) where
    P: IsA<VpnConnection>,
{
    let f: &&(Fn(&P, u32, u32) + 'static) = transmute(f);
    f(
        &VpnConnection::from_glib_borrow(this).downcast_unchecked(),
        object,
        p0,
    )
}

unsafe extern "C" fn notify_banner_trampoline<P>(
    this: *mut ffi::NMVpnConnection,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<VpnConnection>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&VpnConnection::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_vpn_state_trampoline<P>(
    this: *mut ffi::NMVpnConnection,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<VpnConnection>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&VpnConnection::from_glib_borrow(this).downcast_unchecked())
}
