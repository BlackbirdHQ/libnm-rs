// This file was generated by gir (https://github.com/gtk-rs/gir @ 609779c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Setting;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use TCQdisc;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use TCTfilter;

glib_wrapper! {
    pub struct SettingTCConfig(Object<ffi::NMSettingTCConfig, ffi::NMSettingTCConfigClass>): Setting;

    match fn {
        get_type => || ffi::nm_setting_tc_config_get_type(),
    }
}

impl SettingTCConfig {
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn new() -> SettingTCConfig {
        unsafe { Setting::from_glib_full(ffi::nm_setting_tc_config_new()).downcast_unchecked() }
    }
}

#[cfg(any(feature = "v1_12", feature = "dox"))]
impl Default for SettingTCConfig {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingTCConfigExt {
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn add_qdisc(&self, qdisc: &TCQdisc) -> bool;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn add_tfilter(&self, tfilter: &TCTfilter) -> bool;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn clear_qdiscs(&self);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn clear_tfilters(&self);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_num_qdiscs(&self) -> u32;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_num_tfilters(&self) -> u32;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_qdisc(&self, idx: u32) -> Option<TCQdisc>;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_tfilter(&self, idx: u32) -> Option<TCTfilter>;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_qdisc(&self, idx: u32);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_qdisc_by_value(&self, qdisc: &TCQdisc) -> bool;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_tfilter(&self, idx: u32);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_tfilter_by_value(&self, tfilter: &TCTfilter) -> bool;

    //fn get_property_qdiscs(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 201 };

    //fn set_property_qdiscs(&self, qdiscs: /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 201 });

    //fn get_property_tfilters(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 202 };

    //fn set_property_tfilters(&self, tfilters: /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 202 });

    fn connect_property_qdiscs_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_tfilters_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingTCConfig> + IsA<glib::object::Object>> SettingTCConfigExt for O {
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn add_qdisc(&self, qdisc: &TCQdisc) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_tc_config_add_qdisc(
                self.to_glib_none().0,
                qdisc.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn add_tfilter(&self, tfilter: &TCTfilter) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_tc_config_add_tfilter(
                self.to_glib_none().0,
                tfilter.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn clear_qdiscs(&self) {
        unsafe {
            ffi::nm_setting_tc_config_clear_qdiscs(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn clear_tfilters(&self) {
        unsafe {
            ffi::nm_setting_tc_config_clear_tfilters(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_num_qdiscs(&self) -> u32 {
        unsafe { ffi::nm_setting_tc_config_get_num_qdiscs(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_num_tfilters(&self) -> u32 {
        unsafe { ffi::nm_setting_tc_config_get_num_tfilters(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_qdisc(&self, idx: u32) -> Option<TCQdisc> {
        unsafe {
            from_glib_none(ffi::nm_setting_tc_config_get_qdisc(
                self.to_glib_none().0,
                idx,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_tfilter(&self, idx: u32) -> Option<TCTfilter> {
        unsafe {
            from_glib_none(ffi::nm_setting_tc_config_get_tfilter(
                self.to_glib_none().0,
                idx,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_qdisc(&self, idx: u32) {
        unsafe {
            ffi::nm_setting_tc_config_remove_qdisc(self.to_glib_none().0, idx);
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_qdisc_by_value(&self, qdisc: &TCQdisc) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_tc_config_remove_qdisc_by_value(
                self.to_glib_none().0,
                qdisc.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_tfilter(&self, idx: u32) {
        unsafe {
            ffi::nm_setting_tc_config_remove_tfilter(self.to_glib_none().0, idx);
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_tfilter_by_value(&self, tfilter: &TCTfilter) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_tc_config_remove_tfilter_by_value(
                self.to_glib_none().0,
                tfilter.to_glib_none().0,
            ))
        }
    }

    //fn get_property_qdiscs(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 201 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "qdiscs".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    //fn set_property_qdiscs(&self, qdiscs: /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 201 }) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "qdiscs".to_glib_none().0, Value::from(&qdiscs).to_glib_none().0);
    //    }
    //}

    //fn get_property_tfilters(&self) -> /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 202 } {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "tfilters".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get().unwrap()
    //    }
    //}

    //fn set_property_tfilters(&self, tfilters: /*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 202 }) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "tfilters".to_glib_none().0, Value::from(&tfilters).to_glib_none().0);
    //    }
    //}

    fn connect_property_qdiscs_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::qdiscs",
                transmute(notify_qdiscs_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_tfilters_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::tfilters",
                transmute(notify_tfilters_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_qdiscs_trampoline<P>(
    this: *mut ffi::NMSettingTCConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTCConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTCConfig::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_tfilters_trampoline<P>(
    this: *mut ffi::NMSettingTCConfig,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingTCConfig>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingTCConfig::from_glib_borrow(this).downcast_unchecked())
}
