// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::Value;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Setting;
use SettingIPConfig;

glib_wrapper! {
    pub struct SettingIP4Config(Object<ffi::NMSettingIP4Config, ffi::NMSettingIP4ConfigClass>): SettingIPConfig, Setting;

    match fn {
        get_type => || ffi::nm_setting_ip4_config_get_type(),
    }
}

impl SettingIP4Config {
    pub fn new() -> SettingIP4Config {
        unsafe { Setting::from_glib_full(ffi::nm_setting_ip4_config_new()).downcast_unchecked() }
    }
}

impl Default for SettingIP4Config {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SettingIP4ConfigExt: 'static {
    fn get_dhcp_client_id(&self) -> Option<GString>;

    fn get_dhcp_fqdn(&self) -> Option<GString>;

    fn set_property_dhcp_client_id<'a, P: Into<Option<&'a str>>>(&self, dhcp_client_id: P);

    fn set_property_dhcp_fqdn<'a, P: Into<Option<&'a str>>>(&self, dhcp_fqdn: P);

    fn connect_property_dhcp_client_id_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_dhcp_fqdn_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingIP4Config>> SettingIP4ConfigExt for O {
    fn get_dhcp_client_id(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip4_config_get_dhcp_client_id(
                self.to_glib_none().0,
            ))
        }
    }

    fn get_dhcp_fqdn(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip4_config_get_dhcp_fqdn(
                self.to_glib_none().0,
            ))
        }
    }

    fn set_property_dhcp_client_id<'a, P: Into<Option<&'a str>>>(&self, dhcp_client_id: P) {
        let dhcp_client_id = dhcp_client_id.into();
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"dhcp-client-id\0".as_ptr() as *const _,
                Value::from(dhcp_client_id).to_glib_none().0,
            );
        }
    }

    fn set_property_dhcp_fqdn<'a, P: Into<Option<&'a str>>>(&self, dhcp_fqdn: P) {
        let dhcp_fqdn = dhcp_fqdn.into();
        unsafe {
            gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_ffi::GObject,
                b"dhcp-fqdn\0".as_ptr() as *const _,
                Value::from(dhcp_fqdn).to_glib_none().0,
            );
        }
    }

    fn connect_property_dhcp_client_id_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::dhcp-client-id\0".as_ptr() as *const _,
                transmute(notify_dhcp_client_id_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_dhcp_fqdn_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(
                self.to_glib_none().0 as *mut _,
                b"notify::dhcp-fqdn\0".as_ptr() as *const _,
                transmute(notify_dhcp_fqdn_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_dhcp_client_id_trampoline<P>(
    this: *mut ffi::NMSettingIP4Config,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIP4Config>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIP4Config::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dhcp_fqdn_trampoline<P>(
    this: *mut ffi::NMSettingIP4Config,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<SettingIP4Config>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&SettingIP4Config::from_glib_borrow(this).downcast_unchecked())
}

impl fmt::Display for SettingIP4Config {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingIP4Config")
    }
}
