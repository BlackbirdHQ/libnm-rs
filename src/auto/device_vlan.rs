// This file was generated by gir (https://github.com/gtk-rs/gir @ 609779c)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use Device;

glib_wrapper! {
    pub struct DeviceVlan(Object<ffi::NMDeviceVlan, ffi::NMDeviceVlanClass>): Device;

    match fn {
        get_type => || ffi::nm_device_vlan_get_type(),
    }
}

pub trait DeviceVlanExt {
    fn get_carrier(&self) -> bool;

    fn get_parent(&self) -> Option<Device>;

    fn get_vlan_id(&self) -> u32;

    fn connect_property_carrier_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_hw_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vlan_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DeviceVlan> + IsA<glib::object::Object>> DeviceVlanExt for O {
    fn get_carrier(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_vlan_get_carrier(self.to_glib_none().0)) }
    }

    fn get_parent(&self) -> Option<Device> {
        unsafe { from_glib_none(ffi::nm_device_vlan_get_parent(self.to_glib_none().0)) }
    }

    fn get_vlan_id(&self) -> u32 {
        unsafe { ffi::nm_device_vlan_get_vlan_id(self.to_glib_none().0) }
    }

    fn connect_property_carrier_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::carrier",
                transmute(notify_carrier_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_hw_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::hw-address",
                transmute(notify_hw_address_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::parent",
                transmute(notify_parent_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }

    fn connect_property_vlan_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(
                self.to_glib_none().0,
                "notify::vlan-id",
                transmute(notify_vlan_id_trampoline::<Self> as usize),
                Box_::into_raw(f) as *mut _,
            )
        }
    }
}

unsafe extern "C" fn notify_carrier_trampoline<P>(
    this: *mut ffi::NMDeviceVlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_hw_address_trampoline<P>(
    this: *mut ffi::NMDeviceVlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_parent_trampoline<P>(
    this: *mut ffi::NMDeviceVlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVlan::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_vlan_id_trampoline<P>(
    this: *mut ffi::NMDeviceVlan,
    _param_spec: glib_ffi::gpointer,
    f: glib_ffi::gpointer,
) where
    P: IsA<DeviceVlan>,
{
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DeviceVlan::from_glib_borrow(this).downcast_unchecked())
}
