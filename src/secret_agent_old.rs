// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use gio_sys;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::pin::Pin;
use std::ptr;
use Connection;
use SecretAgentCapabilities;
use SecretAgentGetSecretsFlags;

glib_wrapper! {
    pub struct SecretAgentOld(Object<nm_sys::NMSecretAgentOld, nm_sys::NMSecretAgentOldClass, SecretAgentOldClass>);

    match fn {
        get_type => || nm_sys::nm_secret_agent_old_get_type(),
    }
}

pub const NONE_SECRET_AGENT_OLD: Option<&SecretAgentOld> = None;

pub trait SecretAgentOldExt: 'static {
    fn delete_secrets<
        P: IsA<Connection>,
        Q: FnOnce(&SecretAgentOld, &Connection, &glib::Error) + 'static,
    >(
        &self,
        connection: &P,
        callback: Q,
    );

    fn get_registered(&self) -> bool;

    fn get_secrets<
        P: IsA<Connection>,
        Q: FnOnce(&SecretAgentOld, &Connection, &glib::Variant, &glib::Error) + 'static,
    >(
        &self,
        connection: &P,
        setting_name: &str,
        hints: &[&str],
        flags: SecretAgentGetSecretsFlags,
        callback: Q,
    );

    fn register<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error>;

    fn register_async<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    );

    fn register_async_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    fn save_secrets<
        P: IsA<Connection>,
        Q: FnOnce(&SecretAgentOld, &Connection, &glib::Error) + 'static,
    >(
        &self,
        connection: &P,
        callback: Q,
    );

    fn unregister<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error>;

    fn unregister_async<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    );

    fn unregister_async_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    fn get_property_auto_register(&self) -> bool;

    fn set_property_auto_register(&self, auto_register: bool);

    fn get_property_capabilities(&self) -> SecretAgentCapabilities;

    fn set_property_capabilities(&self, capabilities: SecretAgentCapabilities);

    fn get_property_identifier(&self) -> Option<GString>;

    fn connect_property_auto_register_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_capabilities_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_registered_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SecretAgentOld>> SecretAgentOldExt for O {
    fn delete_secrets<
        P: IsA<Connection>,
        Q: FnOnce(&SecretAgentOld, &Connection, &glib::Error) + 'static,
    >(
        &self,
        connection: &P,
        callback: Q,
    ) {
        let callback_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn callback_func<
            P: IsA<Connection>,
            Q: FnOnce(&SecretAgentOld, &Connection, &glib::Error) + 'static,
        >(
            agent: *mut nm_sys::NMSecretAgentOld,
            connection: *mut nm_sys::NMConnection,
            error: *mut glib_sys::GError,
            user_data: glib_sys::gpointer,
        ) {
            let agent = from_glib_borrow(agent);
            let connection = from_glib_borrow(connection);
            let error = from_glib_borrow(error);
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            (*callback)(&agent, &connection, &error);
        }
        let callback = Some(callback_func::<P, Q> as _);
        let super_callback0: Box_<Q> = callback_data;
        unsafe {
            nm_sys::nm_secret_agent_old_delete_secrets(
                self.as_ref().to_glib_none().0,
                connection.as_ref().to_glib_none().0,
                callback,
                Box_::into_raw(super_callback0) as *mut _,
            );
        }
    }

    fn get_registered(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_secret_agent_old_get_registered(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_secrets<
        P: IsA<Connection>,
        Q: FnOnce(&SecretAgentOld, &Connection, &glib::Variant, &glib::Error) + 'static,
    >(
        &self,
        connection: &P,
        setting_name: &str,
        hints: &[&str],
        flags: SecretAgentGetSecretsFlags,
        callback: Q,
    ) {
        let callback_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn callback_func<
            P: IsA<Connection>,
            Q: FnOnce(&SecretAgentOld, &Connection, &glib::Variant, &glib::Error) + 'static,
        >(
            agent: *mut nm_sys::NMSecretAgentOld,
            connection: *mut nm_sys::NMConnection,
            secrets: *mut glib_sys::GVariant,
            error: *mut glib_sys::GError,
            user_data: glib_sys::gpointer,
        ) {
            let agent = from_glib_borrow(agent);
            let connection = from_glib_borrow(connection);
            let secrets = from_glib_borrow(secrets);
            let error = from_glib_borrow(error);
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            (*callback)(&agent, &connection, &secrets, &error);
        }
        let callback = Some(callback_func::<P, Q> as _);
        let super_callback0: Box_<Q> = callback_data;
        unsafe {
            nm_sys::nm_secret_agent_old_get_secrets(
                self.as_ref().to_glib_none().0,
                connection.as_ref().to_glib_none().0,
                setting_name.to_glib_none().0,
                hints.to_glib_none().0,
                flags.to_glib(),
                callback,
                Box_::into_raw(super_callback0) as *mut _,
            );
        }
    }

    fn register<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_secret_agent_old_register(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn register_async<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn register_async_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_secret_agent_old_register_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = register_async_trampoline::<Q>;
        unsafe {
            nm_sys::nm_secret_agent_old_register_async(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn register_async_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.register_async(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    fn save_secrets<
        P: IsA<Connection>,
        Q: FnOnce(&SecretAgentOld, &Connection, &glib::Error) + 'static,
    >(
        &self,
        connection: &P,
        callback: Q,
    ) {
        let callback_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn callback_func<
            P: IsA<Connection>,
            Q: FnOnce(&SecretAgentOld, &Connection, &glib::Error) + 'static,
        >(
            agent: *mut nm_sys::NMSecretAgentOld,
            connection: *mut nm_sys::NMConnection,
            error: *mut glib_sys::GError,
            user_data: glib_sys::gpointer,
        ) {
            let agent = from_glib_borrow(agent);
            let connection = from_glib_borrow(connection);
            let error = from_glib_borrow(error);
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            (*callback)(&agent, &connection, &error);
        }
        let callback = Some(callback_func::<P, Q> as _);
        let super_callback0: Box_<Q> = callback_data;
        unsafe {
            nm_sys::nm_secret_agent_old_save_secrets(
                self.as_ref().to_glib_none().0,
                connection.as_ref().to_glib_none().0,
                callback,
                Box_::into_raw(super_callback0) as *mut _,
            );
        }
    }

    fn unregister<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_secret_agent_old_unregister(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn unregister_async<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn unregister_async_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_secret_agent_old_unregister_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = unregister_async_trampoline::<Q>;
        unsafe {
            nm_sys::nm_secret_agent_old_unregister_async(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn unregister_async_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.unregister_async(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    fn get_property_auto_register(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"auto-register\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `auto-register` getter")
                .unwrap()
        }
    }

    fn set_property_auto_register(&self, auto_register: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"auto-register\0".as_ptr() as *const _,
                Value::from(&auto_register).to_glib_none().0,
            );
        }
    }

    fn get_property_capabilities(&self) -> SecretAgentCapabilities {
        unsafe {
            let mut value =
                Value::from_type(<SecretAgentCapabilities as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"capabilities\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `capabilities` getter")
                .unwrap()
        }
    }

    fn set_property_capabilities(&self, capabilities: SecretAgentCapabilities) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"capabilities\0".as_ptr() as *const _,
                Value::from(&capabilities).to_glib_none().0,
            );
        }
    }

    fn get_property_identifier(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"identifier\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `identifier` getter")
        }
    }

    fn connect_property_auto_register_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_auto_register_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSecretAgentOld,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SecretAgentOld>,
        {
            let f: &F = &*(f as *const F);
            f(&SecretAgentOld::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::auto-register\0".as_ptr() as *const _,
                Some(transmute(
                    notify_auto_register_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_capabilities_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_capabilities_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSecretAgentOld,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SecretAgentOld>,
        {
            let f: &F = &*(f as *const F);
            f(&SecretAgentOld::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::capabilities\0".as_ptr() as *const _,
                Some(transmute(
                    notify_capabilities_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_registered_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_registered_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSecretAgentOld,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SecretAgentOld>,
        {
            let f: &F = &*(f as *const F);
            f(&SecretAgentOld::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::registered\0".as_ptr() as *const _,
                Some(transmute(notify_registered_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SecretAgentOld {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SecretAgentOld")
    }
}
