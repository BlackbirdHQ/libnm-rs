// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio;
use gio_sys;
use glib;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use libc;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use std::mem;
use std::mem::transmute;
use std::pin::Pin;
use std::ptr;
use ActiveConnection;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use Checkpoint;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use ClientInstanceFlags;
use ClientPermission;
use ClientPermissionResult;
use Connection;
use ConnectivityState;
use Device;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use DnsEntry;
#[cfg(any(feature = "v1_22", feature = "dox"))]
use ManagerReloadFlags;
#[cfg(any(feature = "v1_22", feature = "dox"))]
use Metered;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use Object;
use RemoteConnection;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use SettingsAddConnection2Flags;
use State;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use Ternary;

glib_wrapper! {
    pub struct Client(Object<nm_sys::NMClient, nm_sys::NMClientClass, ClientClass>);

    match fn {
        get_type => || nm_sys::nm_client_get_type(),
    }
}

impl Client {
    pub fn new<P: IsA<gio::Cancellable>>(cancellable: Option<&P>) -> Result<Client, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret =
                nm_sys::nm_client_new(cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn activate_connection_async<
        P: IsA<Connection>,
        Q: IsA<Device>,
        R: IsA<gio::Cancellable>,
        S: FnOnce(Result<ActiveConnection, glib::Error>) + Send + 'static,
    >(
        &self,
        connection: Option<&P>,
        device: Option<&Q>,
        specific_object: Option<&str>,
        cancellable: Option<&R>,
        callback: S,
    ) {
        let user_data: Box_<S> = Box_::new(callback);
        unsafe extern "C" fn activate_connection_async_trampoline<
            S: FnOnce(Result<ActiveConnection, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_client_activate_connection_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<S> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = activate_connection_async_trampoline::<S>;
        unsafe {
            nm_sys::nm_client_activate_connection_async(
                self.to_glib_none().0,
                connection.map(|p| p.as_ref()).to_glib_none().0,
                device.map(|p| p.as_ref()).to_glib_none().0,
                specific_object.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn activate_connection_async_future<
        P: IsA<Connection> + Clone + 'static,
        Q: IsA<Device> + Clone + 'static,
    >(
        &self,
        connection: Option<&P>,
        device: Option<&Q>,
        specific_object: Option<&str>,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<ActiveConnection, glib::Error>> + 'static>>
    {
        let connection = connection.map(ToOwned::to_owned);
        let device = device.map(ToOwned::to_owned);
        let specific_object = specific_object.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.activate_connection_async(
                connection.as_ref().map(::std::borrow::Borrow::borrow),
                device.as_ref().map(::std::borrow::Borrow::borrow),
                specific_object.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    pub fn add_and_activate_connection_async<
        P: IsA<Connection>,
        Q: IsA<Device>,
        R: IsA<gio::Cancellable>,
        S: FnOnce(Result<ActiveConnection, glib::Error>) + Send + 'static,
    >(
        &self,
        partial: Option<&P>,
        device: &Q,
        specific_object: Option<&str>,
        cancellable: Option<&R>,
        callback: S,
    ) {
        let user_data: Box_<S> = Box_::new(callback);
        unsafe extern "C" fn add_and_activate_connection_async_trampoline<
            S: FnOnce(Result<ActiveConnection, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_client_add_and_activate_connection_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<S> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = add_and_activate_connection_async_trampoline::<S>;
        unsafe {
            nm_sys::nm_client_add_and_activate_connection_async(
                self.to_glib_none().0,
                partial.map(|p| p.as_ref()).to_glib_none().0,
                device.as_ref().to_glib_none().0,
                specific_object.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn add_and_activate_connection_async_future<
        P: IsA<Connection> + Clone + 'static,
        Q: IsA<Device> + Clone + 'static,
    >(
        &self,
        partial: Option<&P>,
        device: &Q,
        specific_object: Option<&str>,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<ActiveConnection, glib::Error>> + 'static>>
    {
        let partial = partial.map(ToOwned::to_owned);
        let device = device.clone();
        let specific_object = specific_object.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.add_and_activate_connection_async(
                partial.as_ref().map(::std::borrow::Borrow::borrow),
                &device,
                specific_object.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn add_connection2<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(RemoteConnection, glib::Variant), glib::Error>) + Send + 'static,
    >(
        &self,
        settings: &glib::Variant,
        flags: SettingsAddConnection2Flags,
        args: Option<&glib::Variant>,
        ignore_out_result: bool,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn add_connection2_trampoline<
            Q: FnOnce(Result<(RemoteConnection, glib::Variant), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let mut out_result = ptr::null_mut();
            let ret = nm_sys::nm_client_add_connection2_finish(
                _source_object as *mut _,
                res,
                &mut out_result,
                &mut error,
            );
            let result = if error.is_null() {
                Ok((from_glib_full(ret), from_glib_full(out_result)))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = add_connection2_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_add_connection2(
                self.to_glib_none().0,
                settings.to_glib_none().0,
                flags.to_glib(),
                args.to_glib_none().0,
                ignore_out_result.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn add_connection2_future(
        &self,
        settings: &glib::Variant,
        flags: SettingsAddConnection2Flags,
        args: Option<&glib::Variant>,
        ignore_out_result: bool,
    ) -> Pin<
        Box_<
            dyn std::future::Future<Output = Result<(RemoteConnection, glib::Variant), glib::Error>>
                + 'static,
        >,
    > {
        let settings = settings.clone();
        let args = args.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.add_connection2(
                &settings,
                flags,
                args.as_ref().map(::std::borrow::Borrow::borrow),
                ignore_out_result,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    pub fn add_connection_async<
        P: IsA<Connection>,
        Q: IsA<gio::Cancellable>,
        R: FnOnce(Result<RemoteConnection, glib::Error>) + Send + 'static,
    >(
        &self,
        connection: &P,
        save_to_disk: bool,
        cancellable: Option<&Q>,
        callback: R,
    ) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn add_connection_async_trampoline<
            R: FnOnce(Result<RemoteConnection, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret =
                nm_sys::nm_client_add_connection_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = add_connection_async_trampoline::<R>;
        unsafe {
            nm_sys::nm_client_add_connection_async(
                self.to_glib_none().0,
                connection.as_ref().to_glib_none().0,
                save_to_disk.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn add_connection_async_future<P: IsA<Connection> + Clone + 'static>(
        &self,
        connection: &P,
        save_to_disk: bool,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<RemoteConnection, glib::Error>> + 'static>>
    {
        let connection = connection.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.add_connection_async(&connection, save_to_disk, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn check_connectivity<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<ConnectivityState, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_client_check_connectivity(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn check_connectivity_async<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<ConnectivityState, glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn check_connectivity_async_trampoline<
            Q: FnOnce(Result<ConnectivityState, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_client_check_connectivity_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(from_glib(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = check_connectivity_async_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_check_connectivity_async(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn check_connectivity_async_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<ConnectivityState, glib::Error>> + 'static>>
    {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.check_connectivity_async(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn checkpoint_adjust_rollback_timeout<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        checkpoint_path: &str,
        add_timeout: u32,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn checkpoint_adjust_rollback_timeout_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_checkpoint_adjust_rollback_timeout_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = checkpoint_adjust_rollback_timeout_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_checkpoint_adjust_rollback_timeout(
                self.to_glib_none().0,
                checkpoint_path.to_glib_none().0,
                add_timeout,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn checkpoint_adjust_rollback_timeout_future(
        &self,
        checkpoint_path: &str,
        add_timeout: u32,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let checkpoint_path = String::from(checkpoint_path);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.checkpoint_adjust_rollback_timeout(
                &checkpoint_path,
                add_timeout,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn checkpoint_destroy<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        checkpoint_path: &str,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn checkpoint_destroy_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_checkpoint_destroy_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = checkpoint_destroy_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_checkpoint_destroy(
                self.to_glib_none().0,
                checkpoint_path.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn checkpoint_destroy_future(
        &self,
        checkpoint_path: &str,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let checkpoint_path = String::from(checkpoint_path);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.checkpoint_destroy(&checkpoint_path, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //pub fn checkpoint_rollback<P: IsA<gio::Cancellable>, Q: FnOnce(Result</*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 7 }, glib::Error>) + Send + 'static>(&self, checkpoint_path: &str, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call nm_sys:nm_client_checkpoint_rollback() }
    //}

    //
    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //pub fn checkpoint_rollback_future(&self, checkpoint_path: &str) -> Pin<Box_<dyn std::future::Future<Output = Result</*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 7 }, glib::Error>> + 'static>> {

    //let checkpoint_path = String::from(checkpoint_path);
    //Box_::pin(gio::GioFuture::new(self, move |obj, send| {
    //    let cancellable = gio::Cancellable::new();
    //    obj.checkpoint_rollback(
    //        &checkpoint_path,
    //        Some(&cancellable),
    //        move |res| {
    //            send.resolve(res);
    //        },
    //    );

    //    cancellable
    //}))
    //}

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connectivity_check_get_available(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_connectivity_check_get_available(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connectivity_check_get_enabled(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_connectivity_check_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn connectivity_check_get_uri(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_client_connectivity_check_get_uri(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connectivity_check_set_enabled(&self, enabled: bool) {
        unsafe {
            nm_sys::nm_client_connectivity_check_set_enabled(
                self.to_glib_none().0,
                enabled.to_glib(),
            );
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn dbus_call<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<glib::Variant, glib::Error>) + Send + 'static,
    >(
        &self,
        object_path: &str,
        interface_name: &str,
        method_name: &str,
        parameters: Option<&glib::Variant>,
        reply_type: Option<&glib::VariantTy>,
        timeout_msec: i32,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn dbus_call_trampoline<
            Q: FnOnce(Result<glib::Variant, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_client_dbus_call_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = dbus_call_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_dbus_call(
                self.to_glib_none().0,
                object_path.to_glib_none().0,
                interface_name.to_glib_none().0,
                method_name.to_glib_none().0,
                parameters.to_glib_none().0,
                reply_type.to_glib_none().0,
                timeout_msec,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn dbus_call_future(
        &self,
        object_path: &str,
        interface_name: &str,
        method_name: &str,
        parameters: Option<&glib::Variant>,
        reply_type: Option<&glib::VariantTy>,
        timeout_msec: i32,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::Variant, glib::Error>> + 'static>>
    {
        let object_path = String::from(object_path);
        let interface_name = String::from(interface_name);
        let method_name = String::from(method_name);
        let parameters = parameters.map(ToOwned::to_owned);
        let reply_type = reply_type.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.dbus_call(
                &object_path,
                &interface_name,
                &method_name,
                parameters.as_ref().map(::std::borrow::Borrow::borrow),
                reply_type.as_ref().map(::std::borrow::Borrow::borrow),
                timeout_msec,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn dbus_set_property<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        object_path: &str,
        interface_name: &str,
        property_name: &str,
        value: &glib::Variant,
        timeout_msec: i32,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn dbus_set_property_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_dbus_set_property_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = dbus_set_property_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_dbus_set_property(
                self.to_glib_none().0,
                object_path.to_glib_none().0,
                interface_name.to_glib_none().0,
                property_name.to_glib_none().0,
                value.to_glib_none().0,
                timeout_msec,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn dbus_set_property_future(
        &self,
        object_path: &str,
        interface_name: &str,
        property_name: &str,
        value: &glib::Variant,
        timeout_msec: i32,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let object_path = String::from(object_path);
        let interface_name = String::from(interface_name);
        let property_name = String::from(property_name);
        let value = value.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.dbus_set_property(
                &object_path,
                &interface_name,
                &property_name,
                &value,
                timeout_msec,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn deactivate_connection<P: IsA<ActiveConnection>, Q: IsA<gio::Cancellable>>(
        &self,
        active: &P,
        cancellable: Option<&Q>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_deactivate_connection(
                self.to_glib_none().0,
                active.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn deactivate_connection_async<
        P: IsA<ActiveConnection>,
        Q: IsA<gio::Cancellable>,
        R: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        active: &P,
        cancellable: Option<&Q>,
        callback: R,
    ) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn deactivate_connection_async_trampoline<
            R: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_deactivate_connection_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = deactivate_connection_async_trampoline::<R>;
        unsafe {
            nm_sys::nm_client_deactivate_connection_async(
                self.to_glib_none().0,
                active.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn deactivate_connection_async_future<P: IsA<ActiveConnection> + Clone + 'static>(
        &self,
        active: &P,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let active = active.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.deactivate_connection_async(&active, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    pub fn get_activating_connection(&self) -> Option<ActiveConnection> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_activating_connection(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_active_connections(&self) -> Vec<ActiveConnection> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_client_get_active_connections(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_all_devices(&self) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_client_get_all_devices(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn get_capabilities(&self) -> Vec<u32> {
        unsafe {
            let mut length = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(
                nm_sys::nm_client_get_capabilities(self.to_glib_none().0, length.as_mut_ptr()),
                length.assume_init() as usize,
            );
            ret
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn get_checkpoints(&self) -> Vec<Checkpoint> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_client_get_checkpoints(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_connection_by_id(&self, id: &str) -> Option<RemoteConnection> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_connection_by_id(
                self.to_glib_none().0,
                id.to_glib_none().0,
            ))
        }
    }

    pub fn get_connection_by_path(&self, path: &str) -> Option<RemoteConnection> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_connection_by_path(
                self.to_glib_none().0,
                path.to_glib_none().0,
            ))
        }
    }

    pub fn get_connection_by_uuid(&self, uuid: &str) -> Option<RemoteConnection> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_connection_by_uuid(
                self.to_glib_none().0,
                uuid.to_glib_none().0,
            ))
        }
    }

    pub fn get_connections(&self) -> Vec<RemoteConnection> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_client_get_connections(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_connectivity(&self) -> ConnectivityState {
        unsafe { from_glib(nm_sys::nm_client_get_connectivity(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn get_context_busy_watcher(&self) -> Option<glib::Object> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_context_busy_watcher(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn get_dbus_name_owner(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_client_get_dbus_name_owner(self.to_glib_none().0)) }
    }

    pub fn get_device_by_iface(&self, iface: &str) -> Option<Device> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_device_by_iface(
                self.to_glib_none().0,
                iface.to_glib_none().0,
            ))
        }
    }

    pub fn get_device_by_path(&self, object_path: &str) -> Option<Device> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_device_by_path(
                self.to_glib_none().0,
                object_path.to_glib_none().0,
            ))
        }
    }

    pub fn get_devices(&self) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_client_get_devices(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_dns_configuration(&self) -> Vec<DnsEntry> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_client_get_dns_configuration(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_dns_mode(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_client_get_dns_mode(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_dns_rc_manager(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_client_get_dns_rc_manager(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn get_instance_flags(&self) -> ClientInstanceFlags {
        unsafe { from_glib(nm_sys::nm_client_get_instance_flags(self.to_glib_none().0)) }
    }

    //#[cfg(any(feature = "v1_22", feature = "dox"))]
    //pub fn get_main_context(&self) -> /*Ignored*/Option<glib::MainContext> {
    //    unsafe { TODO: call nm_sys:nm_client_get_main_context() }
    //}

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn get_metered(&self) -> Metered {
        unsafe { from_glib(nm_sys::nm_client_get_metered(self.to_glib_none().0)) }
    }

    pub fn get_nm_running(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_client_get_nm_running(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn get_object_by_path(&self, dbus_path: &str) -> Option<Object> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_object_by_path(
                self.to_glib_none().0,
                dbus_path.to_glib_none().0,
            ))
        }
    }

    pub fn get_permission_result(&self, permission: ClientPermission) -> ClientPermissionResult {
        unsafe {
            from_glib(nm_sys::nm_client_get_permission_result(
                self.to_glib_none().0,
                permission.to_glib(),
            ))
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn get_permissions_state(&self) -> Ternary {
        unsafe {
            from_glib(nm_sys::nm_client_get_permissions_state(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_primary_connection(&self) -> Option<ActiveConnection> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_primary_connection(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_startup(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_client_get_startup(self.to_glib_none().0)) }
    }

    pub fn get_state(&self) -> State {
        unsafe { from_glib(nm_sys::nm_client_get_state(self.to_glib_none().0)) }
    }

    pub fn get_version(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_client_get_version(self.to_glib_none().0)) }
    }

    pub fn networking_get_enabled(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_networking_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn networking_set_enabled(&self, enabled: bool) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_networking_set_enabled(
                self.to_glib_none().0,
                enabled.to_glib(),
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn reload<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        flags: ManagerReloadFlags,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn reload_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_reload_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = reload_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_reload(
                self.to_glib_none().0,
                flags.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn reload_future(
        &self,
        flags: ManagerReloadFlags,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.reload(flags, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn reload_connections<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_reload_connections(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn reload_connections_async<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn reload_connections_async_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_reload_connections_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = reload_connections_async_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_reload_connections_async(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn reload_connections_async_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.reload_connections_async(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn save_hostname<P: IsA<gio::Cancellable>>(
        &self,
        hostname: Option<&str>,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_save_hostname(
                self.to_glib_none().0,
                hostname.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn save_hostname_async<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        hostname: Option<&str>,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn save_hostname_async_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ =
                nm_sys::nm_client_save_hostname_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = save_hostname_async_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_save_hostname_async(
                self.to_glib_none().0,
                hostname.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn save_hostname_async_future(
        &self,
        hostname: Option<&str>,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let hostname = hostname.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.save_hostname_async(
                hostname.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn set_logging(
        &self,
        level: Option<&str>,
        domains: Option<&str>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_set_logging(
                self.to_glib_none().0,
                level.to_glib_none().0,
                domains.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn wimax_get_enabled(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_client_wimax_get_enabled(self.to_glib_none().0)) }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn wimax_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_wimax_hardware_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn wimax_set_enabled(&self, enabled: bool) {
        unsafe {
            nm_sys::nm_client_wimax_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    pub fn wireless_get_enabled(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_wireless_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn wireless_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_wireless_hardware_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn wireless_set_enabled(&self, enabled: bool) {
        unsafe {
            nm_sys::nm_client_wireless_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    pub fn wwan_get_enabled(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_client_wwan_get_enabled(self.to_glib_none().0)) }
    }

    pub fn wwan_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_wwan_hardware_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn wwan_set_enabled(&self, enabled: bool) {
        unsafe {
            nm_sys::nm_client_wwan_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    pub fn get_property_can_modify(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"can-modify\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `can-modify` getter")
                .unwrap()
        }
    }

    pub fn get_property_connectivity_check_available(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"connectivity-check-available\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `connectivity-check-available` getter")
                .unwrap()
        }
    }

    pub fn get_property_connectivity_check_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"connectivity-check-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `connectivity-check-enabled` getter")
                .unwrap()
        }
    }

    pub fn set_property_connectivity_check_enabled(&self, connectivity_check_enabled: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"connectivity-check-enabled\0".as_ptr() as *const _,
                Value::from(&connectivity_check_enabled).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn get_property_connectivity_check_uri(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"connectivity-check-uri\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `connectivity-check-uri` getter")
        }
    }

    pub fn get_property_hostname(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"hostname\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `hostname` getter")
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn set_property_instance_flags(&self, instance_flags: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"instance-flags\0".as_ptr() as *const _,
                Value::from(&instance_flags).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_property_metered(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"metered\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `metered` getter")
                .unwrap()
        }
    }

    pub fn get_property_networking_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"networking-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `networking-enabled` getter")
                .unwrap()
        }
    }

    pub fn set_property_networking_enabled(&self, networking_enabled: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"networking-enabled\0".as_ptr() as *const _,
                Value::from(&networking_enabled).to_glib_none().0,
            );
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn get_property_wimax_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wimax-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `wimax-enabled` getter")
                .unwrap()
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn set_property_wimax_enabled(&self, wimax_enabled: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wimax-enabled\0".as_ptr() as *const _,
                Value::from(&wimax_enabled).to_glib_none().0,
            );
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn get_property_wimax_hardware_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wimax-hardware-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `wimax-hardware-enabled` getter")
                .unwrap()
        }
    }

    pub fn get_property_wireless_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wireless-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `wireless-enabled` getter")
                .unwrap()
        }
    }

    pub fn set_property_wireless_enabled(&self, wireless_enabled: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wireless-enabled\0".as_ptr() as *const _,
                Value::from(&wireless_enabled).to_glib_none().0,
            );
        }
    }

    pub fn get_property_wireless_hardware_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wireless-hardware-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `wireless-hardware-enabled` getter")
                .unwrap()
        }
    }

    pub fn get_property_wwan_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wwan-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `wwan-enabled` getter")
                .unwrap()
        }
    }

    pub fn set_property_wwan_enabled(&self, wwan_enabled: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wwan-enabled\0".as_ptr() as *const _,
                Value::from(&wwan_enabled).to_glib_none().0,
            );
        }
    }

    pub fn get_property_wwan_hardware_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wwan-hardware-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `wwan-hardware-enabled` getter")
                .unwrap()
        }
    }

    pub fn new_async<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<Client, glib::Error>) + Send + 'static,
    >(
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn new_async_trampoline<
            Q: FnOnce(Result<Client, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_client_new_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = new_async_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_new_async(
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn new_async_future(
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Client, glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(&(), move |_obj, send| {
            let cancellable = gio::Cancellable::new();
            Self::new_async(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    pub fn connect_active_connection_added<F: Fn(&Client, &ActiveConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn active_connection_added_trampoline<
            F: Fn(&Client, &ActiveConnection) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            active_connection: *mut nm_sys::NMActiveConnection,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &from_glib_borrow(active_connection),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"active-connection-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    active_connection_added_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_active_connection_removed<F: Fn(&Client, &ActiveConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn active_connection_removed_trampoline<
            F: Fn(&Client, &ActiveConnection) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            active_connection: *mut nm_sys::NMActiveConnection,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &from_glib_borrow(active_connection),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"active-connection-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    active_connection_removed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_any_device_added<F: Fn(&Client, &Device) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn any_device_added_trampoline<F: Fn(&Client, &Device) + 'static>(
            this: *mut nm_sys::NMClient,
            device: *mut nm_sys::NMDevice,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(device))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"any-device-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    any_device_added_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_any_device_removed<F: Fn(&Client, &Device) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn any_device_removed_trampoline<F: Fn(&Client, &Device) + 'static>(
            this: *mut nm_sys::NMClient,
            device: *mut nm_sys::NMDevice,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(device))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"any-device-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    any_device_removed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_connection_added<F: Fn(&Client, &RemoteConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn connection_added_trampoline<
            F: Fn(&Client, &RemoteConnection) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            connection: *mut nm_sys::NMRemoteConnection,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(connection))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"connection-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    connection_added_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_connection_removed<F: Fn(&Client, &RemoteConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn connection_removed_trampoline<
            F: Fn(&Client, &RemoteConnection) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            connection: *mut nm_sys::NMRemoteConnection,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(connection))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"connection-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    connection_removed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_device_added<F: Fn(&Client, &Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn device_added_trampoline<F: Fn(&Client, &Device) + 'static>(
            this: *mut nm_sys::NMClient,
            device: *mut nm_sys::NMDevice,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(device))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"device-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    device_added_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_device_removed<F: Fn(&Client, &Device) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn device_removed_trampoline<F: Fn(&Client, &Device) + 'static>(
            this: *mut nm_sys::NMClient,
            device: *mut nm_sys::NMDevice,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(device))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"device-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    device_removed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_permission_changed<F: Fn(&Client, u32, u32) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn permission_changed_trampoline<F: Fn(&Client, u32, u32) + 'static>(
            this: *mut nm_sys::NMClient,
            permission: libc::c_uint,
            result: libc::c_uint,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), permission, result)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"permission-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    permission_changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_activating_connection_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_activating_connection_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::activating-connection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_activating_connection_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_active_connections_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_active_connections_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::active-connections\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_active_connections_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_all_devices_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_all_devices_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::all-devices\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_all_devices_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_can_modify_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_modify_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::can-modify\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_can_modify_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn connect_property_capabilities_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_capabilities_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::capabilities\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_capabilities_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn connect_property_checkpoints_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_checkpoints_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::checkpoints\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_checkpoints_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_connections_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_connections_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::connections\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_connections_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_connectivity_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_connectivity_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::connectivity\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_connectivity_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_connectivity_check_available_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_connectivity_check_available_trampoline<
            F: Fn(&Client) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::connectivity-check-available\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_connectivity_check_available_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_connectivity_check_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_connectivity_check_enabled_trampoline<
            F: Fn(&Client) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::connectivity-check-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_connectivity_check_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn connect_property_connectivity_check_uri_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_connectivity_check_uri_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::connectivity-check-uri\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_connectivity_check_uri_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn connect_property_dbus_name_owner_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_dbus_name_owner_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dbus-name-owner\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dbus_name_owner_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_devices_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_devices_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::devices\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_devices_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_dns_configuration_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_configuration_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dns-configuration\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dns_configuration_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_dns_mode_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_mode_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dns-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dns_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_dns_rc_manager_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_rc_manager_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dns-rc-manager\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dns_rc_manager_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_hostname_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_hostname_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hostname\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hostname_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn connect_property_instance_flags_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_instance_flags_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::instance-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_instance_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_metered_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_metered_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::metered\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_metered_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_networking_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_networking_enabled_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::networking-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_networking_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_nm_running_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_nm_running_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::nm-running\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_nm_running_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn connect_property_permissions_state_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_permissions_state_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::permissions-state\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_permissions_state_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_primary_connection_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_connection_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::primary-connection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_primary_connection_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_startup_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_startup_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::startup\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_startup_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_state_notify<F: Fn(&Client) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_state_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::state\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_state_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_version_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_version_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::version\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_version_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn connect_property_wimax_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wimax_enabled_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wimax-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wimax_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn connect_property_wimax_hardware_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wimax_hardware_enabled_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wimax-hardware-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wimax_hardware_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_wireless_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wireless_enabled_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wireless-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wireless_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_wireless_hardware_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wireless_hardware_enabled_trampoline<
            F: Fn(&Client) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wireless-hardware-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wireless_hardware_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_wwan_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wwan_enabled_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wwan-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wwan_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_wwan_hardware_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wwan_hardware_enabled_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wwan-hardware-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wwan_hardware_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Client {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Client")
    }
}
