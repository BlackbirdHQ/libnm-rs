// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ActiveConnection;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use crate::Checkpoint;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use crate::ClientInstanceFlags;
use crate::ClientPermission;
use crate::ClientPermissionResult;
use crate::Connection;
use crate::ConnectivityState;
use crate::Device;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use crate::DnsEntry;
#[cfg(any(feature = "v1_22", feature = "dox"))]
use crate::ManagerReloadFlags;
#[cfg(any(feature = "v1_22", feature = "dox"))]
use crate::Metered;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use crate::Object;
use crate::RemoteConnection;
#[cfg(any(feature = "v1_20", feature = "dox"))]
use crate::SettingsAddConnection2Flags;
use crate::State;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use crate::Ternary;
use gio;
use gio_sys;
use glib;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use libc;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use std::mem;
use std::mem::transmute;
use std::pin::Pin;
use std::ptr;

glib_wrapper! {
    pub struct Client(Object<nm_sys::NMClient, nm_sys::NMClientClass, ClientClass>);

    match fn {
        get_type => || nm_sys::nm_client_get_type(),
    }
}

impl Client {
    /// Creates a new `Client`.
    ///
    /// Note that this will do blocking D-Bus calls to initialize the
    /// client. You can use `Client::new_async` if you want to avoid
    /// that.
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    ///
    /// # Returns
    ///
    /// a new `Client` or NULL on an error
    pub fn new<P: IsA<gio::Cancellable>>(cancellable: Option<&P>) -> Result<Client, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret =
                nm_sys::nm_client_new(cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    /// Asynchronously starts a connection to a particular network using the
    /// configuration settings from `connection` and the network device `device`.
    /// Certain connection types also take a "specific object" which is the object
    /// path of a connection- specific object, like an `AccessPoint` for Wi-Fi
    /// connections, or an `WimaxNsp` for WiMAX connections, to which you wish to
    /// connect. If the specific object is not given, NetworkManager can, in some
    /// cases, automatically determine which network to connect to given the settings
    /// in `connection`.
    ///
    /// If `connection` is not given for a device-based activation, NetworkManager
    /// picks the best available connection for the device and activates it.
    ///
    /// Note that the callback is invoked when NetworkManager has started activating
    /// the new connection, not when it finishes. You can use the returned
    /// `ActiveConnection` object (in particular, `ActiveConnection:state`) to
    /// track the activation to its completion.
    /// ## `connection`
    /// an `Connection`
    /// ## `device`
    /// the `Device`
    /// ## `specific_object`
    /// the object path of a connection-type-specific
    ///  object this activation should use. This parameter is currently ignored for
    ///  wired and mobile broadband connections, and the value of `None` should be used
    ///  (ie, no specific object). For Wi-Fi or WiMAX connections, pass the object
    ///  path of a `AccessPoint` or `WimaxNsp` owned by `device`, which you can
    ///  get using `ObjectExt::get_path`, and which will be used to complete the
    ///  details of the newly added connection.
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    /// ## `callback`
    /// callback to be called when the activation has started
    /// ## `user_data`
    /// caller-specific data passed to `callback`
    pub fn activate_connection_async<
        P: IsA<Connection>,
        Q: IsA<Device>,
        R: IsA<gio::Cancellable>,
        S: FnOnce(Result<ActiveConnection, glib::Error>) + Send + 'static,
    >(
        &self,
        connection: Option<&P>,
        device: Option<&Q>,
        specific_object: Option<&str>,
        cancellable: Option<&R>,
        callback: S,
    ) {
        let user_data: Box_<S> = Box_::new(callback);
        unsafe extern "C" fn activate_connection_async_trampoline<
            S: FnOnce(Result<ActiveConnection, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_client_activate_connection_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<S> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = activate_connection_async_trampoline::<S>;
        unsafe {
            nm_sys::nm_client_activate_connection_async(
                self.to_glib_none().0,
                connection.map(|p| p.as_ref()).to_glib_none().0,
                device.map(|p| p.as_ref()).to_glib_none().0,
                specific_object.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn activate_connection_async_future<
        P: IsA<Connection> + Clone + 'static,
        Q: IsA<Device> + Clone + 'static,
    >(
        &self,
        connection: Option<&P>,
        device: Option<&Q>,
        specific_object: Option<&str>,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<ActiveConnection, glib::Error>> + 'static>>
    {
        let connection = connection.map(ToOwned::to_owned);
        let device = device.map(ToOwned::to_owned);
        let specific_object = specific_object.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.activate_connection_async(
                connection.as_ref().map(::std::borrow::Borrow::borrow),
                device.as_ref().map(::std::borrow::Borrow::borrow),
                specific_object.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Adds a new connection using the given details (if any) as a template,
    /// automatically filling in missing settings with the capabilities of the given
    /// device and specific object. The new connection is then asynchronously
    /// activated as with `Client::activate_connection_async`. Cannot be used for
    /// VPN connections at this time.
    ///
    /// Note that the callback is invoked when NetworkManager has started activating
    /// the new connection, not when it finishes. You can used the returned
    /// `ActiveConnection` object (in particular, `ActiveConnection:state`) to
    /// track the activation to its completion.
    /// ## `partial`
    /// an `Connection` to add; the connection may be
    ///  partially filled (or even `None`) and will be completed by NetworkManager
    ///  using the given `device` and `specific_object` before being added
    /// ## `device`
    /// the `Device`
    /// ## `specific_object`
    /// the object path of a connection-type-specific
    ///  object this activation should use. This parameter is currently ignored for
    ///  wired and mobile broadband connections, and the value of `None` should be used
    ///  (ie, no specific object). For Wi-Fi or WiMAX connections, pass the object
    ///  path of a `AccessPoint` or `WimaxNsp` owned by `device`, which you can
    ///  get using `ObjectExt::get_path`, and which will be used to complete the
    ///  details of the newly added connection.
    ///  If the variant is floating, it will be consumed.
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    /// ## `callback`
    /// callback to be called when the activation has started
    /// ## `user_data`
    /// caller-specific data passed to `callback`
    pub fn add_and_activate_connection_async<
        P: IsA<Connection>,
        Q: IsA<Device>,
        R: IsA<gio::Cancellable>,
        S: FnOnce(Result<ActiveConnection, glib::Error>) + Send + 'static,
    >(
        &self,
        partial: Option<&P>,
        device: &Q,
        specific_object: Option<&str>,
        cancellable: Option<&R>,
        callback: S,
    ) {
        let user_data: Box_<S> = Box_::new(callback);
        unsafe extern "C" fn add_and_activate_connection_async_trampoline<
            S: FnOnce(Result<ActiveConnection, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_client_add_and_activate_connection_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<S> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = add_and_activate_connection_async_trampoline::<S>;
        unsafe {
            nm_sys::nm_client_add_and_activate_connection_async(
                self.to_glib_none().0,
                partial.map(|p| p.as_ref()).to_glib_none().0,
                device.as_ref().to_glib_none().0,
                specific_object.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn add_and_activate_connection_async_future<
        P: IsA<Connection> + Clone + 'static,
        Q: IsA<Device> + Clone + 'static,
    >(
        &self,
        partial: Option<&P>,
        device: &Q,
        specific_object: Option<&str>,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<ActiveConnection, glib::Error>> + 'static>>
    {
        let partial = partial.map(ToOwned::to_owned);
        let device = device.clone();
        let specific_object = specific_object.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.add_and_activate_connection_async(
                partial.as_ref().map(::std::borrow::Borrow::borrow),
                &device,
                specific_object.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Call AddConnection2() D-Bus API asynchronously.
    ///
    /// Feature: `v1_20`
    ///
    /// ## `settings`
    /// the "a{sa{sv}}" `glib::Variant` with the content of the setting.
    /// ## `flags`
    /// the `SettingsAddConnection2Flags` argument.
    /// ## `args`
    /// the "a{sv}" `glib::Variant` with extra argument or `None`
    ///  for no extra arguments.
    /// ## `ignore_out_result`
    /// this function wraps AddConnection2(), which has an
    ///  additional result "a{sv}" output parameter. By setting this to `true`,
    ///  you signal that you are not interested in that output parameter.
    ///  This allows the function to fall back to AddConnection() and AddConnectionUnsaved(),
    ///  which is interesting if you run against an older server version that does
    ///  not yet provide AddConnection2(). By setting this to `false`, the function
    ///  under the hood always calls AddConnection2().
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    /// ## `callback`
    /// callback to be called when the add operation completes
    /// ## `user_data`
    /// caller-specific data passed to `callback`
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn add_connection2<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(RemoteConnection, glib::Variant), glib::Error>) + Send + 'static,
    >(
        &self,
        settings: &glib::Variant,
        flags: SettingsAddConnection2Flags,
        args: Option<&glib::Variant>,
        ignore_out_result: bool,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn add_connection2_trampoline<
            Q: FnOnce(Result<(RemoteConnection, glib::Variant), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let mut out_result = ptr::null_mut();
            let ret = nm_sys::nm_client_add_connection2_finish(
                _source_object as *mut _,
                res,
                &mut out_result,
                &mut error,
            );
            let result = if error.is_null() {
                Ok((from_glib_full(ret), from_glib_full(out_result)))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = add_connection2_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_add_connection2(
                self.to_glib_none().0,
                settings.to_glib_none().0,
                flags.to_glib(),
                args.to_glib_none().0,
                ignore_out_result.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn add_connection2_future(
        &self,
        settings: &glib::Variant,
        flags: SettingsAddConnection2Flags,
        args: Option<&glib::Variant>,
        ignore_out_result: bool,
    ) -> Pin<
        Box_<
            dyn std::future::Future<Output = Result<(RemoteConnection, glib::Variant), glib::Error>>
                + 'static,
        >,
    > {
        let settings = settings.clone();
        let args = args.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.add_connection2(
                &settings,
                flags,
                args.as_ref().map(::std::borrow::Borrow::borrow),
                ignore_out_result,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Requests that the remote settings service add the given settings to a new
    /// connection. If `save_to_disk` is `true`, the connection is immediately written
    /// to disk; otherwise it is initially only stored in memory, but may be saved
    /// later by calling the connection's `RemoteConnection::commit_changes`
    /// method.
    ///
    /// `connection` is untouched by this function and only serves as a template of
    /// the settings to add. The `RemoteConnection` object that represents what
    /// NetworkManager actually added is returned to `callback` when the addition
    /// operation is complete.
    ///
    /// Note that the `RemoteConnection` returned in `callback` may not contain
    /// identical settings to `connection` as NetworkManager may perform automatic
    /// completion and/or normalization of connection properties.
    /// ## `connection`
    /// the connection to add. Note that this object's settings will be
    ///  added, not the object itself
    /// ## `save_to_disk`
    /// whether to immediately save the connection to disk
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    /// ## `callback`
    /// callback to be called when the add operation completes
    /// ## `user_data`
    /// caller-specific data passed to `callback`
    pub fn add_connection_async<
        P: IsA<Connection>,
        Q: IsA<gio::Cancellable>,
        R: FnOnce(Result<RemoteConnection, glib::Error>) + Send + 'static,
    >(
        &self,
        connection: &P,
        save_to_disk: bool,
        cancellable: Option<&Q>,
        callback: R,
    ) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn add_connection_async_trampoline<
            R: FnOnce(Result<RemoteConnection, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret =
                nm_sys::nm_client_add_connection_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = add_connection_async_trampoline::<R>;
        unsafe {
            nm_sys::nm_client_add_connection_async(
                self.to_glib_none().0,
                connection.as_ref().to_glib_none().0,
                save_to_disk.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn add_connection_async_future<P: IsA<Connection> + Clone + 'static>(
        &self,
        connection: &P,
        save_to_disk: bool,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<RemoteConnection, glib::Error>> + 'static>>
    {
        let connection = connection.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.add_connection_async(&connection, save_to_disk, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    /// Updates the network connectivity state and returns the (new)
    /// current state. Contrast `Client::get_connectivity`, which returns
    /// the most recent known state without re-checking.
    ///
    /// This is a blocking call; use `Client::check_connectivity_async`
    /// if you do not want to block.
    ///
    /// # Deprecated since 1.22
    ///
    /// Use `Client::check_connectivity_async` or GDBusConnection.
    /// ## `cancellable`
    /// a `gio::Cancellable`
    ///
    /// # Returns
    ///
    /// the (new) current connectivity state
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn check_connectivity<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<ConnectivityState, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_client_check_connectivity(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    /// Asynchronously updates the network connectivity state and invokes
    /// `callback` when complete. Contrast `Client::get_connectivity`,
    /// which (immediately) returns the most recent known state without
    /// re-checking, and `Client::check_connectivity`, which blocks.
    /// ## `cancellable`
    /// a `gio::Cancellable`
    /// ## `callback`
    /// callback to call with the result
    /// ## `user_data`
    /// data for `callback`.
    pub fn check_connectivity_async<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<ConnectivityState, glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn check_connectivity_async_trampoline<
            Q: FnOnce(Result<ConnectivityState, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_client_check_connectivity_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(from_glib(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = check_connectivity_async_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_check_connectivity_async(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn check_connectivity_async_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<ConnectivityState, glib::Error>> + 'static>>
    {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.check_connectivity_async(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    /// Resets the timeout for the checkpoint with path `checkpoint_path`
    /// to `timeout_add`.
    ///
    /// Feature: `v1_12`
    ///
    /// ## `checkpoint_path`
    /// a D-Bus path to a checkpoint
    /// ## `add_timeout`
    /// the timeout in seconds counting from now.
    ///  Set to zero, to disable the timeout.
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    /// ## `callback`
    /// callback to be called when the add operation completes
    /// ## `user_data`
    /// caller-specific data passed to `callback`
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn checkpoint_adjust_rollback_timeout<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        checkpoint_path: &str,
        add_timeout: u32,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn checkpoint_adjust_rollback_timeout_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_checkpoint_adjust_rollback_timeout_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = checkpoint_adjust_rollback_timeout_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_checkpoint_adjust_rollback_timeout(
                self.to_glib_none().0,
                checkpoint_path.to_glib_none().0,
                add_timeout,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn checkpoint_adjust_rollback_timeout_future(
        &self,
        checkpoint_path: &str,
        add_timeout: u32,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let checkpoint_path = String::from(checkpoint_path);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.checkpoint_adjust_rollback_timeout(
                &checkpoint_path,
                add_timeout,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Destroys an existing checkpoint without performing a rollback.
    ///
    /// Feature: `v1_12`
    ///
    /// ## `checkpoint_path`
    /// the D-Bus path for the checkpoint
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    /// ## `callback`
    /// callback to be called when the add operation completes
    /// ## `user_data`
    /// caller-specific data passed to `callback`
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn checkpoint_destroy<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        checkpoint_path: &str,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn checkpoint_destroy_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_checkpoint_destroy_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = checkpoint_destroy_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_checkpoint_destroy(
                self.to_glib_none().0,
                checkpoint_path.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn checkpoint_destroy_future(
        &self,
        checkpoint_path: &str,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let checkpoint_path = String::from(checkpoint_path);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.checkpoint_destroy(&checkpoint_path, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //pub fn checkpoint_rollback<P: IsA<gio::Cancellable>, Q: FnOnce(Result</*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 7 }, glib::Error>) + Send + 'static>(&self, checkpoint_path: &str, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call nm_sys:nm_client_checkpoint_rollback() }
    //}

    //
    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //pub fn checkpoint_rollback_future(&self, checkpoint_path: &str) -> Pin<Box_<dyn std::future::Future<Output = Result</*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 7 }, glib::Error>> + 'static>> {

    //let checkpoint_path = String::from(checkpoint_path);
    //Box_::pin(gio::GioFuture::new(self, move |obj, send| {
    //    let cancellable = gio::Cancellable::new();
    //    obj.checkpoint_rollback(
    //        &checkpoint_path,
    //        Some(&cancellable),
    //        move |res| {
    //            send.resolve(res);
    //        },
    //    );

    //    cancellable
    //}))
    //}

    /// Determine whether connectivity checking is available. This
    /// requires that the URI of a connectivity service has been set in the
    /// configuration file.
    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// `true` if connectivity checking is available.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connectivity_check_get_available(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_connectivity_check_get_available(
                self.to_glib_none().0,
            ))
        }
    }

    /// Determine whether connectivity checking is enabled.
    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Returns
    ///
    /// `true` if connectivity checking is enabled.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connectivity_check_get_enabled(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_connectivity_check_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    /// Get the URI that will be queried to determine if there is internet
    /// connectivity.
    ///
    /// Feature: `v1_20`
    ///
    ///
    /// # Returns
    ///
    /// the connectivity URI in use
    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn connectivity_check_get_uri(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_client_connectivity_check_get_uri(
                self.to_glib_none().0,
            ))
        }
    }

    /// Enable or disable connectivity checking. Note that if a
    /// connectivity checking URI has not been configured, this will not
    /// have any effect.
    ///
    /// Feature: `v1_10`
    ///
    ///
    /// # Deprecated since 1.22
    ///
    /// Use the async command `Client::dbus_set_property` on `NM_DBUS_PATH`,
    /// `NM_DBUS_INTERFACE` to set "ConnectivityCheckEnabled" property to a "(b)" value.
    /// ## `enabled`
    /// `true` to enable connectivity checking
    #[cfg_attr(feature = "v1_22", deprecated)]
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    pub fn connectivity_check_set_enabled(&self, enabled: bool) {
        unsafe {
            nm_sys::nm_client_connectivity_check_set_enabled(
                self.to_glib_none().0,
                enabled.to_glib(),
            );
        }
    }

    /// Call `gio::DBusConnection::call` on the current name owner with the specified
    /// arguments. Most importantly, this invokes `gio::DBusConnection::call` with the
    /// client's `glib::MainContext`, so that the response is always in order with other
    /// events D-Bus events. Of course, the call uses `gio::Task` and will invoke the
    /// callback on the current `glib::MainContext::get_thread_default`.
    ///
    /// This API is merely a convenient wrapper for `gio::DBusConnection::call`. You can
    /// also use `gio::DBusConnection::call` directly, with the same effect.
    ///
    /// Feature: `v1_24`
    ///
    /// ## `object_path`
    /// path of remote object
    /// ## `interface_name`
    /// D-Bus interface to invoke method on
    /// ## `method_name`
    /// the name of the method to invoke
    /// ## `parameters`
    /// a `glib::Variant` tuple with parameters for the method
    ///  or `None` if not passing parameters
    /// ## `reply_type`
    /// the expected type of the reply (which will be a
    ///  tuple), or `None`
    /// ## `timeout_msec`
    /// the timeout in milliseconds, -1 to use the default
    ///  timeout or `G_MAXINT` for no timeout
    /// ## `cancellable`
    /// a `gio::Cancellable` or `None`
    /// ## `callback`
    /// a `GAsyncReadyCallback` to call when the request
    ///  is satisfied or `None` if you don't care about the result of the
    ///  method invocation
    /// ## `user_data`
    /// the data to pass to `callback`
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn dbus_call<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<glib::Variant, glib::Error>) + Send + 'static,
    >(
        &self,
        object_path: &str,
        interface_name: &str,
        method_name: &str,
        parameters: Option<&glib::Variant>,
        reply_type: Option<&glib::VariantTy>,
        timeout_msec: i32,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn dbus_call_trampoline<
            Q: FnOnce(Result<glib::Variant, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_client_dbus_call_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = dbus_call_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_dbus_call(
                self.to_glib_none().0,
                object_path.to_glib_none().0,
                interface_name.to_glib_none().0,
                method_name.to_glib_none().0,
                parameters.to_glib_none().0,
                reply_type.to_glib_none().0,
                timeout_msec,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn dbus_call_future(
        &self,
        object_path: &str,
        interface_name: &str,
        method_name: &str,
        parameters: Option<&glib::Variant>,
        reply_type: Option<&glib::VariantTy>,
        timeout_msec: i32,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::Variant, glib::Error>> + 'static>>
    {
        let object_path = String::from(object_path);
        let interface_name = String::from(interface_name);
        let method_name = String::from(method_name);
        let parameters = parameters.map(ToOwned::to_owned);
        let reply_type = reply_type.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.dbus_call(
                &object_path,
                &interface_name,
                &method_name,
                parameters.as_ref().map(::std::borrow::Borrow::borrow),
                reply_type.as_ref().map(::std::borrow::Borrow::borrow),
                timeout_msec,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Like `Client::dbus_call` but calls "Set" on the standard "org.freedesktop.DBus.Properties"
    /// D-Bus interface.
    ///
    /// Feature: `v1_24`
    ///
    /// ## `object_path`
    /// path of remote object
    /// ## `interface_name`
    /// D-Bus interface to invoke method on
    /// ## `property_name`
    /// the name of the property to set
    /// ## `value`
    /// a `glib::Variant` tuple with the value to set
    /// ## `timeout_msec`
    /// the timeout in milliseconds, -1 to use the default
    ///  timeout or `G_MAXINT` for no timeout
    /// ## `cancellable`
    /// a `gio::Cancellable` or `None`
    /// ## `callback`
    /// a `GAsyncReadyCallback` to call when the request
    ///  is satisfied or `None` if you don't care about the result of the
    ///  method invocation
    /// ## `user_data`
    /// the data to pass to `callback`
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn dbus_set_property<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        object_path: &str,
        interface_name: &str,
        property_name: &str,
        value: &glib::Variant,
        timeout_msec: i32,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn dbus_set_property_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_dbus_set_property_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = dbus_set_property_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_dbus_set_property(
                self.to_glib_none().0,
                object_path.to_glib_none().0,
                interface_name.to_glib_none().0,
                property_name.to_glib_none().0,
                value.to_glib_none().0,
                timeout_msec,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn dbus_set_property_future(
        &self,
        object_path: &str,
        interface_name: &str,
        property_name: &str,
        value: &glib::Variant,
        timeout_msec: i32,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let object_path = String::from(object_path);
        let interface_name = String::from(interface_name);
        let property_name = String::from(property_name);
        let value = value.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.dbus_set_property(
                &object_path,
                &interface_name,
                &property_name,
                &value,
                timeout_msec,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Deactivates an active `ActiveConnection`.
    ///
    /// # Deprecated since 1.22
    ///
    /// Use `Client::deactivate_connection_async` or GDBusConnection.
    /// ## `active`
    /// the `ActiveConnection` to deactivate
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    ///
    /// # Returns
    ///
    /// success or failure
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn deactivate_connection<P: IsA<ActiveConnection>, Q: IsA<gio::Cancellable>>(
        &self,
        active: &P,
        cancellable: Option<&Q>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_deactivate_connection(
                self.to_glib_none().0,
                active.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    /// Asynchronously deactivates an active `ActiveConnection`.
    /// ## `active`
    /// the `ActiveConnection` to deactivate
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    /// ## `callback`
    /// callback to be called when the deactivation has completed
    /// ## `user_data`
    /// caller-specific data passed to `callback`
    pub fn deactivate_connection_async<
        P: IsA<ActiveConnection>,
        Q: IsA<gio::Cancellable>,
        R: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        active: &P,
        cancellable: Option<&Q>,
        callback: R,
    ) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn deactivate_connection_async_trampoline<
            R: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_deactivate_connection_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = deactivate_connection_async_trampoline::<R>;
        unsafe {
            nm_sys::nm_client_deactivate_connection_async(
                self.to_glib_none().0,
                active.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn deactivate_connection_async_future<P: IsA<ActiveConnection> + Clone + 'static>(
        &self,
        active: &P,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let active = active.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.deactivate_connection_async(&active, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    /// Gets the `ActiveConnection` corresponding to a
    /// currently-activating connection that is expected to become the new
    /// `Client:primary-connection` upon successful activation.
    ///
    /// # Returns
    ///
    /// the appropriate `ActiveConnection`, if
    /// any.
    pub fn get_activating_connection(&self) -> Option<ActiveConnection> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_activating_connection(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets the active connections.
    ///
    /// # Returns
    ///
    /// a `glib::PtrArray`
    ///  containing all the active `NMActiveConnections`.
    /// The returned array is owned by the client and should not be modified.
    pub fn get_active_connections(&self) -> Vec<ActiveConnection> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_client_get_active_connections(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets both real devices and device placeholders (eg, software devices which
    /// do not currently exist, but could be created automatically by NetworkManager
    /// if one of their NMDevice::ActivatableConnections was activated). Use
    /// `DeviceExt::is_real` to determine whether each device is a real device or
    /// a placeholder.
    ///
    /// Use `nm_device_get_type` or the NM_IS_DEVICE_XXXX() functions to determine
    /// what kind of device each member of the returned array is, and then you may
    /// use device-specific methods such as `DeviceEthernet::get_hw_address`.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// a `glib::PtrArray`
    /// containing all the `NMDevices`. The returned array is owned by the
    /// `Client` object and should not be modified.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_all_devices(&self) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_client_get_all_devices(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_24`
    ///
    /// ## `length`
    /// the number of returned capabilities.
    ///
    /// # Returns
    ///
    /// the
    ///  list of capabilities reported by the server or `None`
    ///  if the capabilities are unknown.
    ///  The numeric values correspond to `Capability` enum.
    ///  The array is terminated by a numeric zero sentinel
    ///  at position `length`.
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn get_capabilities(&self) -> Vec<u32> {
        unsafe {
            let mut length = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(
                nm_sys::nm_client_get_capabilities(self.to_glib_none().0, length.as_mut_ptr()),
                length.assume_init() as usize,
            );
            ret
        }
    }

    /// Gets all the active checkpoints.
    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// a `glib::PtrArray`
    /// containing all the `Checkpoint`. The returned array is owned by the
    /// `Client` object and should not be modified.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn get_checkpoints(&self) -> Vec<Checkpoint> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_client_get_checkpoints(
                self.to_glib_none().0,
            ))
        }
    }

    /// Returns the first matching `RemoteConnection` matching a given `id`.
    /// ## `id`
    /// the id of the remote connection
    ///
    /// # Returns
    ///
    /// the remote connection object on success, or `None` if no
    ///  matching object was found.
    ///
    /// The connection is as received from D-Bus and might not validate according
    /// to `Connection::verify`.
    pub fn get_connection_by_id(&self, id: &str) -> Option<RemoteConnection> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_connection_by_id(
                self.to_glib_none().0,
                id.to_glib_none().0,
            ))
        }
    }

    /// Returns the `RemoteConnection` representing the connection at `path`.
    /// ## `path`
    /// the D-Bus object path of the remote connection
    ///
    /// # Returns
    ///
    /// the remote connection object on success, or `None` if the object was
    ///  not known
    ///
    /// The connection is as received from D-Bus and might not validate according
    /// to `Connection::verify`.
    pub fn get_connection_by_path(&self, path: &str) -> Option<RemoteConnection> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_connection_by_path(
                self.to_glib_none().0,
                path.to_glib_none().0,
            ))
        }
    }

    /// Returns the `RemoteConnection` identified by `uuid`.
    /// ## `uuid`
    /// the UUID of the remote connection
    ///
    /// # Returns
    ///
    /// the remote connection object on success, or `None` if the object was
    ///  not known
    ///
    /// The connection is as received from D-Bus and might not validate according
    /// to `Connection::verify`.
    pub fn get_connection_by_uuid(&self, uuid: &str) -> Option<RemoteConnection> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_connection_by_uuid(
                self.to_glib_none().0,
                uuid.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// an array
    /// containing all connections provided by the remote settings service. The
    /// returned array is owned by the `Client` object and should not be modified.
    ///
    /// The connections are as received from D-Bus and might not validate according
    /// to `Connection::verify`.
    pub fn get_connections(&self) -> Vec<RemoteConnection> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_client_get_connections(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets the current network connectivity state. Contrast
    /// `Client::check_connectivity` and
    /// `Client::check_connectivity_async`, which re-check the
    /// connectivity state first before returning any information.
    ///
    /// # Returns
    ///
    /// the current connectivity state
    pub fn get_connectivity(&self) -> ConnectivityState {
        unsafe { from_glib(nm_sys::nm_client_get_connectivity(self.to_glib_none().0)) }
    }

    ///
    /// Feature: `v1_22`
    ///
    ///
    /// # Returns
    ///
    /// a GObject that stays alive as long as there are pending
    ///  D-Bus operations.
    ///
    /// NMClient will schedule asynchronous D-Bus requests which will complete on
    /// the GMainContext associated with the instance. When destroying the NMClient
    /// instance, those requests are cancelled right away, however their pending requests are
    /// still outstanding and queued in the GMainContext. These outstanding callbacks
    /// keep the GMainContext alive. In order to fully release all resources,
    /// the user must keep iterating the main context until all these callbacks
    /// are handled. Of course, at this point no more actual callbacks will be invoked
    /// for the user, those are all internally cancelled.
    ///
    /// This just leaves one problem: how long does the user need to keep the
    /// GMainContext running to ensure everything is cleaned up? The answer is
    /// this GObject. Subscribe a weak reference to the returned object and keep
    /// iterating the main context until the object got unreferenced.
    ///
    /// Note that after the NMClient instance gets destroyed, the remaining callbacks
    /// will be invoked right away. That means, the user won't have to iterate the
    /// main context much longer.
    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn get_context_busy_watcher(&self) -> Option<glib::Object> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_context_busy_watcher(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_22`
    ///
    ///
    /// # Returns
    ///
    /// the current name owner of the D-Bus service of NetworkManager.
    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn get_dbus_name_owner(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_client_get_dbus_name_owner(self.to_glib_none().0)) }
    }

    /// Gets a `Device` from a `Client`.
    /// ## `iface`
    /// the interface name to search for
    ///
    /// # Returns
    ///
    /// the `Device` for the given `iface` or `None` if none is found.
    pub fn get_device_by_iface(&self, iface: &str) -> Option<Device> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_device_by_iface(
                self.to_glib_none().0,
                iface.to_glib_none().0,
            ))
        }
    }

    /// Gets a `Device` from a `Client`.
    /// ## `object_path`
    /// the object path to search for
    ///
    /// # Returns
    ///
    /// the `Device` for the given `object_path` or `None` if none is found.
    pub fn get_device_by_path(&self, object_path: &str) -> Option<Device> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_device_by_path(
                self.to_glib_none().0,
                object_path.to_glib_none().0,
            ))
        }
    }

    /// Gets all the known network devices. Use `nm_device_get_type` or the
    /// `<literal>`NM_IS_DEVICE_XXXX`</literal>` functions to determine what kind of
    /// device member of the returned array is, and then you may use device-specific
    /// methods such as `DeviceEthernet::get_hw_address`.
    ///
    /// # Returns
    ///
    /// a `glib::PtrArray`
    /// containing all the `NMDevices`. The returned array is owned by the
    /// `Client` object and should not be modified.
    pub fn get_devices(&self) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_client_get_devices(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets the current DNS configuration
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// a `glib::PtrArray`
    /// containing `DnsEntry` elements or `None` in case the value is not
    /// available. The returned array is owned by the `Client` object
    /// and should not be modified.
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_dns_configuration(&self) -> Vec<DnsEntry> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_client_get_dns_configuration(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets the current DNS processing mode.
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// the DNS processing mode, or `None` in case the
    ///  value is not available.
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_dns_mode(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_client_get_dns_mode(self.to_glib_none().0)) }
    }

    /// Gets the current DNS resolv.conf manager.
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// the resolv.conf manager or `None` in case the
    ///  value is not available.
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_dns_rc_manager(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_client_get_dns_rc_manager(self.to_glib_none().0)) }
    }

    ///
    /// Feature: `v1_24`
    ///
    ///
    /// # Returns
    ///
    /// the `ClientInstanceFlags` flags.
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn get_instance_flags(&self) -> ClientInstanceFlags {
        unsafe { from_glib(nm_sys::nm_client_get_instance_flags(self.to_glib_none().0)) }
    }

    //#[cfg(any(feature = "v1_22", feature = "dox"))]
    //pub fn get_main_context(&self) -> /*Ignored*/Option<glib::MainContext> {
    //    unsafe { TODO: call nm_sys:nm_client_get_main_context() }
    //}

    ///
    /// Feature: `v1_22`
    ///
    ///
    /// # Returns
    ///
    /// whether the default route is metered.
    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn get_metered(&self) -> Metered {
        unsafe { from_glib(nm_sys::nm_client_get_metered(self.to_glib_none().0)) }
    }

    /// Determines whether the daemon is running.
    ///
    /// # Returns
    ///
    /// `true` if the daemon is running
    pub fn get_nm_running(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_client_get_nm_running(self.to_glib_none().0)) }
    }

    ///
    /// Feature: `v1_24`
    ///
    /// ## `dbus_path`
    /// the D-Bus path of the object to look up
    ///
    /// # Returns
    ///
    /// the `Object` instance that is
    ///  cached under `dbus_path`, or `None` if no such object exists.
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn get_object_by_path(&self, dbus_path: &str) -> Option<Object> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_object_by_path(
                self.to_glib_none().0,
                dbus_path.to_glib_none().0,
            ))
        }
    }

    /// Requests the result of a specific permission, which indicates whether the
    /// client can or cannot perform the action the permission represents
    /// ## `permission`
    /// the permission for which to return the result, one of `ClientPermission`
    ///
    /// # Returns
    ///
    /// the permission's result, one of `ClientPermissionResult`
    pub fn get_permission_result(&self, permission: ClientPermission) -> ClientPermissionResult {
        unsafe {
            from_glib(nm_sys::nm_client_get_permission_result(
                self.to_glib_none().0,
                permission.to_glib(),
            ))
        }
    }

    ///
    /// Feature: `v1_24`
    ///
    ///
    /// # Returns
    ///
    /// the state of the cached permissions. `Ternary::Default`
    ///  means that no permissions result was yet received. All permissions
    ///  are unknown. `Ternary::True` means that the permissions got received
    ///  and are cached. %`Ternary::False` means that permissions are cached,
    ///  but they are invalided as as "CheckPermissions" signal was received
    ///  in the meantime.
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn get_permissions_state(&self) -> Ternary {
        unsafe {
            from_glib(nm_sys::nm_client_get_permissions_state(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets the `ActiveConnection` corresponding to the primary active
    /// network device.
    ///
    /// In particular, when there is no VPN active, or the VPN does not
    /// have the default route, this returns the active connection that has
    /// the default route. If there is a VPN active with the default route,
    /// then this function returns the active connection that contains the
    /// route to the VPN endpoint.
    ///
    /// If there is no default route, or the default route is over a
    /// non-NetworkManager-recognized device, this will return `None`.
    ///
    /// # Returns
    ///
    /// the appropriate `ActiveConnection`, if
    /// any
    pub fn get_primary_connection(&self) -> Option<ActiveConnection> {
        unsafe {
            from_glib_none(nm_sys::nm_client_get_primary_connection(
                self.to_glib_none().0,
            ))
        }
    }

    /// Tests whether the daemon is still in the process of activating
    /// connections at startup.
    ///
    /// # Returns
    ///
    /// whether the daemon is still starting up
    pub fn get_startup(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_client_get_startup(self.to_glib_none().0)) }
    }

    /// Gets the current daemon state.
    ///
    /// # Returns
    ///
    /// the current `State`
    pub fn get_state(&self) -> State {
        unsafe { from_glib(nm_sys::nm_client_get_state(self.to_glib_none().0)) }
    }

    /// Gets NetworkManager version.
    ///
    /// # Returns
    ///
    /// string with the version (or `None` if NetworkManager is not running)
    pub fn get_version(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_client_get_version(self.to_glib_none().0)) }
    }

    /// Whether networking is enabled or disabled.
    ///
    /// # Returns
    ///
    /// `true` if networking is enabled, `false` if networking is disabled
    pub fn networking_get_enabled(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_networking_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    /// Enables or disables networking. When networking is disabled, all controlled
    /// interfaces are disconnected and deactivated. When networking is enabled,
    /// all controlled interfaces are available for activation.
    ///
    /// # Deprecated since 1.22
    ///
    /// Use the async command `Client::dbus_call` on `NM_DBUS_PATH`,
    /// `NM_DBUS_INTERFACE` to call "Enable" with "(b)" arguments and no return value.
    /// ## `enabled`
    /// `true` to set networking enabled, `false` to set networking disabled
    ///
    /// # Returns
    ///
    /// `true` on success, `false` otherwise
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn networking_set_enabled(&self, enabled: bool) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_networking_set_enabled(
                self.to_glib_none().0,
                enabled.to_glib(),
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    /// Reload NetworkManager's configuration and perform certain updates, like
    /// flushing caches or rewriting external state to disk. This is similar to
    /// sending SIGHUP to NetworkManager but it allows for more fine-grained control
    /// over what to reload (see `flags`). It also allows non-root access via
    /// PolicyKit and contrary to signals it is synchronous.
    ///
    /// Feature: `v1_22`
    ///
    /// ## `flags`
    /// flags indicating what to reload.
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    /// ## `callback`
    /// callback to be called when the add operation completes
    /// ## `user_data`
    /// caller-specific data passed to `callback`
    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn reload<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        flags: ManagerReloadFlags,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn reload_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_reload_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = reload_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_reload(
                self.to_glib_none().0,
                flags.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn reload_future(
        &self,
        flags: ManagerReloadFlags,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.reload(flags, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    /// Requests that the remote settings service reload all connection
    /// files from disk, adding, updating, and removing connections until
    /// the in-memory state matches the on-disk state.
    ///
    /// # Deprecated since 1.22
    ///
    /// Use `Client::reload_connections_async` or GDBusConnection.
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    ///
    /// # Returns
    ///
    /// `true` on success, `false` on failure
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn reload_connections<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_reload_connections(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    /// Requests that the remote settings service begin reloading all connection
    /// files from disk, adding, updating, and removing connections until the
    /// in-memory state matches the on-disk state.
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    /// ## `callback`
    /// callback to be called when the reload operation completes
    /// ## `user_data`
    /// caller-specific data passed to `callback`
    pub fn reload_connections_async<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn reload_connections_async_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_reload_connections_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = reload_connections_async_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_reload_connections_async(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn reload_connections_async_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.reload_connections_async(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    /// Requests that the machine's persistent hostname be set to the specified value
    /// or cleared.
    ///
    /// # Deprecated since 1.22
    ///
    /// Use `Client::save_hostname_async` or GDBusConnection.
    /// ## `hostname`
    /// the new persistent hostname to set, or `None` to
    ///  clear any existing persistent hostname
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    ///
    /// # Returns
    ///
    /// `true` if the request was successful, `false` if it failed
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn save_hostname<P: IsA<gio::Cancellable>>(
        &self,
        hostname: Option<&str>,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_save_hostname(
                self.to_glib_none().0,
                hostname.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    /// Requests that the machine's persistent hostname be set to the specified value
    /// or cleared.
    /// ## `hostname`
    /// the new persistent hostname to set, or `None` to
    ///  clear any existing persistent hostname
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    /// ## `callback`
    /// callback to be called when the operation completes
    /// ## `user_data`
    /// caller-specific data passed to `callback`
    pub fn save_hostname_async<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        hostname: Option<&str>,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn save_hostname_async_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ =
                nm_sys::nm_client_save_hostname_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = save_hostname_async_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_save_hostname_async(
                self.to_glib_none().0,
                hostname.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn save_hostname_async_future(
        &self,
        hostname: Option<&str>,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let hostname = hostname.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.save_hostname_async(
                hostname.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    /// Sets NetworkManager logging level and/or domains.
    ///
    /// # Deprecated since 1.22
    ///
    /// Use the async command `Client::dbus_call` on `NM_DBUS_PATH`,
    /// `NM_DBUS_INTERFACE` to call "SetLogging" with "(ss)" arguments for level and domains.
    /// ## `level`
    /// logging level to set (`None` or an empty string for no change)
    /// ## `domains`
    /// logging domains to set. The string should be a list of log
    ///  domains separated by ",". (`None` or an empty string for no change)
    ///
    /// # Returns
    ///
    /// `true` on success, `false` otherwise
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn set_logging(
        &self,
        level: Option<&str>,
        domains: Option<&str>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_client_set_logging(
                self.to_glib_none().0,
                level.to_glib_none().0,
                domains.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    /// Determines whether WiMAX is enabled.
    ///
    /// # Deprecated since 1.22
    ///
    /// This function always returns FALSE because WiMax is no longer supported.
    ///
    /// # Returns
    ///
    /// `true` if WiMAX is enabled
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn wimax_get_enabled(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_client_wimax_get_enabled(self.to_glib_none().0)) }
    }

    /// Determines whether the WiMAX hardware is enabled.
    ///
    /// # Deprecated since 1.22
    ///
    /// This function always returns FALSE because WiMax is no longer supported.
    ///
    /// # Returns
    ///
    /// `true` if the WiMAX hardware is enabled
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn wimax_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_wimax_hardware_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    /// Enables or disables WiMAX devices.
    ///
    /// # Deprecated since 1.22
    ///
    /// This function does nothing because WiMax is no longer supported.
    /// ## `enabled`
    /// `true` to enable WiMAX
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn wimax_set_enabled(&self, enabled: bool) {
        unsafe {
            nm_sys::nm_client_wimax_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    /// Determines whether the wireless is enabled.
    ///
    /// # Returns
    ///
    /// `true` if wireless is enabled
    pub fn wireless_get_enabled(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_wireless_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    /// Determines whether the wireless hardware is enabled.
    ///
    /// # Returns
    ///
    /// `true` if the wireless hardware is enabled
    pub fn wireless_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_wireless_hardware_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    /// Enables or disables wireless devices.
    ///
    /// # Deprecated since 1.22
    ///
    /// Use the async command `Client::dbus_set_property` on `NM_DBUS_PATH`,
    /// `NM_DBUS_INTERFACE` to set "WirelessEnabled" property to a "(b)" value.
    /// ## `enabled`
    /// `true` to enable wireless
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn wireless_set_enabled(&self, enabled: bool) {
        unsafe {
            nm_sys::nm_client_wireless_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    /// Determines whether WWAN is enabled.
    ///
    /// # Returns
    ///
    /// `true` if WWAN is enabled
    pub fn wwan_get_enabled(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_client_wwan_get_enabled(self.to_glib_none().0)) }
    }

    /// Determines whether the WWAN hardware is enabled.
    ///
    /// # Returns
    ///
    /// `true` if the WWAN hardware is enabled
    pub fn wwan_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_client_wwan_hardware_get_enabled(
                self.to_glib_none().0,
            ))
        }
    }

    /// Enables or disables WWAN devices.
    ///
    /// # Deprecated since 1.22
    ///
    /// Use the async command `Client::dbus_set_property` on `NM_DBUS_PATH`,
    /// `NM_DBUS_INTERFACE` to set "WwanEnabled" property to a "(b)" value.
    /// ## `enabled`
    /// `true` to enable WWAN
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn wwan_set_enabled(&self, enabled: bool) {
        unsafe {
            nm_sys::nm_client_wwan_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    /// If `true`, adding and modifying connections is supported.
    pub fn get_property_can_modify(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"can-modify\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `can-modify` getter")
                .unwrap()
        }
    }

    pub fn get_property_connectivity_check_available(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"connectivity-check-available\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `connectivity-check-available` getter")
                .unwrap()
        }
    }

    pub fn get_property_connectivity_check_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"connectivity-check-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `connectivity-check-enabled` getter")
                .unwrap()
        }
    }

    pub fn set_property_connectivity_check_enabled(&self, connectivity_check_enabled: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"connectivity-check-enabled\0".as_ptr() as *const _,
                Value::from(&connectivity_check_enabled).to_glib_none().0,
            );
        }
    }

    /// The used URI for connectivity checking.
    ///
    /// Feature: `v1_22`
    ///
    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn get_property_connectivity_check_uri(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"connectivity-check-uri\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `connectivity-check-uri` getter")
        }
    }

    /// The machine hostname stored in persistent configuration. This can be
    /// modified by calling `Client::save_hostname`.
    pub fn get_property_hostname(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"hostname\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `hostname` getter")
        }
    }

    /// `ClientInstanceFlags` for the instance. These affect behavior of `Client`.
    /// This is a construct property and you may only set most flags only during
    /// construction.
    ///
    /// The flag `ClientInstanceFlags::NoAutoFetchPermissions` can be toggled any time,
    /// even after constructing the instance. Note that you may want to watch NMClient:permissions-state
    /// property to know whether permissions are ready. Note that permissions are only fetched
    /// when NMClient has a D-Bus name owner.
    ///
    /// Feature: `v1_24`
    ///
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn set_property_instance_flags(&self, instance_flags: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"instance-flags\0".as_ptr() as *const _,
                Value::from(&instance_flags).to_glib_none().0,
            );
        }
    }

    /// Whether the connectivity is metered.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn get_property_metered(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"metered\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `metered` getter")
                .unwrap()
        }
    }

    /// Whether networking is enabled.
    ///
    /// The property setter is a synchronous D-Bus call. This is deprecated since 1.22.
    pub fn get_property_networking_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"networking-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `networking-enabled` getter")
                .unwrap()
        }
    }

    /// Whether networking is enabled.
    ///
    /// The property setter is a synchronous D-Bus call. This is deprecated since 1.22.
    pub fn set_property_networking_enabled(&self, networking_enabled: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"networking-enabled\0".as_ptr() as *const _,
                Value::from(&networking_enabled).to_glib_none().0,
            );
        }
    }

    /// Whether WiMAX functionality is enabled.
    ///
    /// # Deprecated since 1.22
    ///
    /// WiMAX is no longer supported and this always returns FALSE. The setter has no effect.
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn get_property_wimax_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wimax-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `wimax-enabled` getter")
                .unwrap()
        }
    }

    /// Whether WiMAX functionality is enabled.
    ///
    /// # Deprecated since 1.22
    ///
    /// WiMAX is no longer supported and this always returns FALSE. The setter has no effect.
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn set_property_wimax_enabled(&self, wimax_enabled: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wimax-enabled\0".as_ptr() as *const _,
                Value::from(&wimax_enabled).to_glib_none().0,
            );
        }
    }

    /// Whether the WiMAX hardware is enabled.
    ///
    /// # Deprecated since 1.22
    ///
    /// WiMAX is no longer supported and this always returns FALSE.
    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn get_property_wimax_hardware_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wimax-hardware-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `wimax-hardware-enabled` getter")
                .unwrap()
        }
    }

    /// Whether wireless is enabled.
    ///
    /// The property setter is a synchronous D-Bus call. This is deprecated since 1.22.
    pub fn get_property_wireless_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wireless-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `wireless-enabled` getter")
                .unwrap()
        }
    }

    /// Whether wireless is enabled.
    ///
    /// The property setter is a synchronous D-Bus call. This is deprecated since 1.22.
    pub fn set_property_wireless_enabled(&self, wireless_enabled: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wireless-enabled\0".as_ptr() as *const _,
                Value::from(&wireless_enabled).to_glib_none().0,
            );
        }
    }

    /// Whether the wireless hardware is enabled.
    pub fn get_property_wireless_hardware_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wireless-hardware-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `wireless-hardware-enabled` getter")
                .unwrap()
        }
    }

    /// Whether WWAN functionality is enabled.
    ///
    /// The property setter is a synchronous D-Bus call. This is deprecated since 1.22.
    pub fn get_property_wwan_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wwan-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `wwan-enabled` getter")
                .unwrap()
        }
    }

    /// Whether WWAN functionality is enabled.
    ///
    /// The property setter is a synchronous D-Bus call. This is deprecated since 1.22.
    pub fn set_property_wwan_enabled(&self, wwan_enabled: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wwan-enabled\0".as_ptr() as *const _,
                Value::from(&wwan_enabled).to_glib_none().0,
            );
        }
    }

    /// Whether the WWAN hardware is enabled.
    pub fn get_property_wwan_hardware_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"wwan-hardware-enabled\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `wwan-hardware-enabled` getter")
                .unwrap()
        }
    }

    /// Creates a new `Client` and begins asynchronously initializing it.
    /// `callback` will be called when it is done; use
    /// `Client::new_finish` to get the result. Note that on an error,
    /// the callback can be invoked with two first parameters as NULL.
    /// ## `cancellable`
    /// a `gio::Cancellable`, or `None`
    /// ## `callback`
    /// callback to call when the client is created
    /// ## `user_data`
    /// data for `callback`
    pub fn new_async<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<Client, glib::Error>) + Send + 'static,
    >(
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn new_async_trampoline<
            Q: FnOnce(Result<Client, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_client_new_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = new_async_trampoline::<Q>;
        unsafe {
            nm_sys::nm_client_new_async(
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn new_async_future(
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Client, glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(&(), move |_obj, send| {
            let cancellable = gio::Cancellable::new();
            Self::new_async(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    /// Notifies that a `ActiveConnection` has been added.
    /// ## `active_connection`
    /// the new active connection
    pub fn connect_active_connection_added<F: Fn(&Client, &ActiveConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn active_connection_added_trampoline<
            F: Fn(&Client, &ActiveConnection) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            active_connection: *mut nm_sys::NMActiveConnection,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &from_glib_borrow(active_connection),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"active-connection-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    active_connection_added_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    /// Notifies that a `ActiveConnection` has been removed.
    /// ## `active_connection`
    /// the removed active connection
    pub fn connect_active_connection_removed<F: Fn(&Client, &ActiveConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn active_connection_removed_trampoline<
            F: Fn(&Client, &ActiveConnection) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            active_connection: *mut nm_sys::NMActiveConnection,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                &from_glib_borrow(active_connection),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"active-connection-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    active_connection_removed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    /// Notifies that a `Device` is added. This signal is emitted for both
    /// regular devices and placeholder devices.
    /// ## `device`
    /// the new device
    pub fn connect_any_device_added<F: Fn(&Client, &Device) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn any_device_added_trampoline<F: Fn(&Client, &Device) + 'static>(
            this: *mut nm_sys::NMClient,
            device: *mut nm_sys::NMDevice,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(device))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"any-device-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    any_device_added_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    /// Notifies that a `Device` is removed. This signal is emitted for both
    /// regular devices and placeholder devices.
    /// ## `device`
    /// the removed device
    pub fn connect_any_device_removed<F: Fn(&Client, &Device) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn any_device_removed_trampoline<F: Fn(&Client, &Device) + 'static>(
            this: *mut nm_sys::NMClient,
            device: *mut nm_sys::NMDevice,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(device))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"any-device-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    any_device_removed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    /// Notifies that a `Connection` has been added.
    /// ## `connection`
    /// the new connection
    pub fn connect_connection_added<F: Fn(&Client, &RemoteConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn connection_added_trampoline<
            F: Fn(&Client, &RemoteConnection) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            connection: *mut nm_sys::NMRemoteConnection,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(connection))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"connection-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    connection_added_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    /// Notifies that a `Connection` has been removed.
    /// ## `connection`
    /// the removed connection
    pub fn connect_connection_removed<F: Fn(&Client, &RemoteConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn connection_removed_trampoline<
            F: Fn(&Client, &RemoteConnection) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            connection: *mut nm_sys::NMRemoteConnection,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(connection))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"connection-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    connection_removed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    /// Notifies that a `Device` is added. This signal is not emitted for
    /// placeholder devices.
    /// ## `device`
    /// the new device
    pub fn connect_device_added<F: Fn(&Client, &Device) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn device_added_trampoline<F: Fn(&Client, &Device) + 'static>(
            this: *mut nm_sys::NMClient,
            device: *mut nm_sys::NMDevice,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(device))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"device-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    device_added_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    /// Notifies that a `Device` is removed. This signal is not emitted for
    /// placeholder devices.
    /// ## `device`
    /// the removed device
    pub fn connect_device_removed<F: Fn(&Client, &Device) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn device_removed_trampoline<F: Fn(&Client, &Device) + 'static>(
            this: *mut nm_sys::NMClient,
            device: *mut nm_sys::NMDevice,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(device))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"device-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    device_removed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    /// Notifies that a permission has changed
    /// ## `permission`
    /// a permission from `ClientPermission`
    /// ## `result`
    /// the permission's result, one of `ClientPermissionResult`
    pub fn connect_permission_changed<F: Fn(&Client, u32, u32) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn permission_changed_trampoline<F: Fn(&Client, u32, u32) + 'static>(
            this: *mut nm_sys::NMClient,
            permission: libc::c_uint,
            result: libc::c_uint,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), permission, result)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"permission-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    permission_changed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_activating_connection_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_activating_connection_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::activating-connection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_activating_connection_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_active_connections_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_active_connections_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::active-connections\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_active_connections_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_all_devices_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_all_devices_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::all-devices\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_all_devices_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_can_modify_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_modify_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::can-modify\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_can_modify_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn connect_property_capabilities_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_capabilities_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::capabilities\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_capabilities_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    pub fn connect_property_checkpoints_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_checkpoints_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::checkpoints\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_checkpoints_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_connections_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_connections_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::connections\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_connections_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_connectivity_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_connectivity_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::connectivity\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_connectivity_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_connectivity_check_available_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_connectivity_check_available_trampoline<
            F: Fn(&Client) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::connectivity-check-available\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_connectivity_check_available_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_connectivity_check_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_connectivity_check_enabled_trampoline<
            F: Fn(&Client) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::connectivity-check-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_connectivity_check_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn connect_property_connectivity_check_uri_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_connectivity_check_uri_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::connectivity-check-uri\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_connectivity_check_uri_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    pub fn connect_property_dbus_name_owner_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_dbus_name_owner_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dbus-name-owner\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dbus_name_owner_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_devices_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_devices_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::devices\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_devices_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_dns_configuration_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_configuration_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dns-configuration\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dns_configuration_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_dns_mode_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_mode_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dns-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dns_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_dns_rc_manager_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_rc_manager_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dns-rc-manager\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dns_rc_manager_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_hostname_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_hostname_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hostname\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hostname_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn connect_property_instance_flags_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_instance_flags_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::instance-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_instance_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn connect_property_metered_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_metered_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::metered\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_metered_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_networking_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_networking_enabled_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::networking-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_networking_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_nm_running_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_nm_running_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::nm-running\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_nm_running_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    pub fn connect_property_permissions_state_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_permissions_state_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::permissions-state\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_permissions_state_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_primary_connection_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_connection_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::primary-connection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_primary_connection_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_startup_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_startup_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::startup\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_startup_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_state_notify<F: Fn(&Client) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_state_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::state\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_state_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_version_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_version_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::version\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_version_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn connect_property_wimax_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wimax_enabled_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wimax-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wimax_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated)]
    pub fn connect_property_wimax_hardware_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wimax_hardware_enabled_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wimax-hardware-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wimax_hardware_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_wireless_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wireless_enabled_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wireless-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wireless_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_wireless_hardware_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wireless_hardware_enabled_trampoline<
            F: Fn(&Client) + 'static,
        >(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wireless-hardware-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wireless_hardware_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_wwan_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wwan_enabled_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wwan-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wwan_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_wwan_hardware_enabled_notify<F: Fn(&Client) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wwan_hardware_enabled_trampoline<F: Fn(&Client) + 'static>(
            this: *mut nm_sys::NMClient,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wwan-hardware-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_wwan_hardware_enabled_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Client {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Client")
    }
}
