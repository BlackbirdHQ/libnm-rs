// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_18", feature = "dox"))]
use glib;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use glib::translate::*;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use glib::GString;
use nm_sys;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use std::mem;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use std::ptr;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct BridgeVlan(Shared<nm_sys::NMBridgeVlan>);

    match fn {
        ref => |ptr| nm_sys::nm_bridge_vlan_ref(ptr),
        unref => |ptr| nm_sys::nm_bridge_vlan_unref(ptr),
        get_type => || nm_sys::nm_bridge_vlan_get_type(),
    }
}

impl BridgeVlan {
    /// Creates a new `BridgeVlan` object for the given VLAN id range.
    /// Setting `vid_end` to 0 is equivalent to setting it to `vid_start`
    /// and creates a single-id VLAN.
    ///
    /// Feature: `v1_18`
    ///
    /// ## `vid_start`
    /// the start VLAN id, must be between 1 and 4094.
    /// ## `vid_end`
    /// the end VLAN id, must be 0 or between `vid_start` and 4094.
    ///
    /// # Returns
    ///
    /// the new `BridgeVlan` object.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn new(vid_start: u16, vid_end: u16) -> BridgeVlan {
        unsafe { from_glib_full(nm_sys::nm_bridge_vlan_new(vid_start, vid_end)) }
    }

    /// Compare two bridge VLAN objects.
    ///
    /// Feature: `v1_18`
    ///
    /// ## `b`
    /// another `BridgeVlan`
    ///
    /// # Returns
    ///
    /// zero of the two instances are equivalent or
    ///  a non-zero integer otherwise. This defines a total ordering
    ///  over the VLANs. Whether a VLAN is sealed or not does not
    ///  affect the comparison.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn cmp(&self, b: &BridgeVlan) -> i32 {
        unsafe { nm_sys::nm_bridge_vlan_cmp(self.to_glib_none().0, b.to_glib_none().0) }
    }

    /// Gets the VLAN id range.
    ///
    /// Feature: `v1_18`
    ///
    /// ## `vid_start`
    /// location to store the VLAN id range start.
    /// ## `vid_end`
    /// location to store the VLAN id range end
    ///
    /// # Returns
    ///
    /// `true` is the VLAN specifies a range, `false` if it is
    /// a single-id VLAN.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_vid_range(&self) -> Option<(u16, u16)> {
        unsafe {
            let mut vid_start = mem::MaybeUninit::uninit();
            let mut vid_end = mem::MaybeUninit::uninit();
            let ret = from_glib(nm_sys::nm_bridge_vlan_get_vid_range(
                self.to_glib_none().0,
                vid_start.as_mut_ptr(),
                vid_end.as_mut_ptr(),
            ));
            let vid_start = vid_start.assume_init();
            let vid_end = vid_end.assume_init();
            if ret {
                Some((vid_start, vid_end))
            } else {
                None
            }
        }
    }

    /// Returns whether the VLAN is the PVID for the port.
    ///
    /// Feature: `v1_18`
    ///
    ///
    /// # Returns
    ///
    /// `true` if the VLAN is the PVID
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn is_pvid(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_bridge_vlan_is_pvid(self.to_glib_none().0)) }
    }

    ///
    /// Feature: `v1_18`
    ///
    ///
    /// # Returns
    ///
    /// whether `self_` is sealed or not.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn is_sealed(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_bridge_vlan_is_sealed(self.to_glib_none().0)) }
    }

    /// Returns whether the VLAN is untagged.
    ///
    /// Feature: `v1_18`
    ///
    ///
    /// # Returns
    ///
    /// `true` if the VLAN is untagged, `false` otherwise
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn is_untagged(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_bridge_vlan_is_untagged(self.to_glib_none().0)) }
    }

    ///
    /// Feature: `v1_18`
    ///
    ///
    /// # Returns
    ///
    /// a clone of `self`. This instance
    ///  is always unsealed.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn new_clone(&self) -> Option<BridgeVlan> {
        unsafe { from_glib_full(nm_sys::nm_bridge_vlan_new_clone(self.to_glib_none().0)) }
    }

    /// Seal the `BridgeVlan` instance. Afterwards, it is a bug
    /// to call all functions that modify the instance (except ref/unref).
    /// A sealed instance cannot be unsealed again, but you can create
    /// an unsealed copy with `BridgeVlan::new_clone`.
    ///
    /// Feature: `v1_18`
    ///
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn seal(&self) {
        unsafe {
            nm_sys::nm_bridge_vlan_seal(self.to_glib_none().0);
        }
    }

    /// Change the value of the PVID property of the VLAN. It
    /// is invalid to set the value to `true` for non-single-id
    /// VLANs.
    ///
    /// Feature: `v1_18`
    ///
    /// ## `value`
    /// the new value
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_pvid(&self, value: bool) {
        unsafe {
            nm_sys::nm_bridge_vlan_set_pvid(self.to_glib_none().0, value.to_glib());
        }
    }

    /// Change the value of the untagged property of the VLAN.
    ///
    /// Feature: `v1_18`
    ///
    /// ## `value`
    /// the new value
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_untagged(&self, value: bool) {
        unsafe {
            nm_sys::nm_bridge_vlan_set_untagged(self.to_glib_none().0, value.to_glib());
        }
    }

    /// Convert a `BridgeVlan` to a string.
    ///
    /// Feature: `v1_18`
    ///
    ///
    /// # Returns
    ///
    /// formatted string or `None`
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn to_str(&self) -> Result<GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_bridge_vlan_to_str(self.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    /// Parses the string representation of the queueing
    /// discipline to a `BridgeVlan` instance.
    ///
    /// Feature: `v1_18`
    ///
    /// ## `str`
    /// the string representation of a bridge VLAN
    ///
    /// # Returns
    ///
    /// the `BridgeVlan` or `None`
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn from_str(str: &str) -> Result<BridgeVlan, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_bridge_vlan_from_str(str.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}
