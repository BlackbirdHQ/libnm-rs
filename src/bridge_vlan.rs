// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_18", feature = "dox"))]
use glib;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use glib::translate::*;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use glib::GString;
use nm_sys;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use std::mem;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use std::ptr;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct BridgeVlan(Shared<nm_sys::NMBridgeVlan>);

    match fn {
        ref => |ptr| nm_sys::nm_bridge_vlan_ref(ptr),
        unref => |ptr| nm_sys::nm_bridge_vlan_unref(ptr),
        get_type => || nm_sys::nm_bridge_vlan_get_type(),
    }
}

impl BridgeVlan {
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn new(vid_start: u16, vid_end: u16) -> BridgeVlan {
        unsafe { from_glib_full(nm_sys::nm_bridge_vlan_new(vid_start, vid_end)) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn cmp(&self, b: &BridgeVlan) -> i32 {
        unsafe { nm_sys::nm_bridge_vlan_cmp(self.to_glib_none().0, b.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_vid_range(&self) -> Option<(u16, u16)> {
        unsafe {
            let mut vid_start = mem::MaybeUninit::uninit();
            let mut vid_end = mem::MaybeUninit::uninit();
            let ret = from_glib(nm_sys::nm_bridge_vlan_get_vid_range(
                self.to_glib_none().0,
                vid_start.as_mut_ptr(),
                vid_end.as_mut_ptr(),
            ));
            let vid_start = vid_start.assume_init();
            let vid_end = vid_end.assume_init();
            if ret {
                Some((vid_start, vid_end))
            } else {
                None
            }
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn is_pvid(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_bridge_vlan_is_pvid(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn is_sealed(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_bridge_vlan_is_sealed(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn is_untagged(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_bridge_vlan_is_untagged(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn new_clone(&self) -> Option<BridgeVlan> {
        unsafe { from_glib_full(nm_sys::nm_bridge_vlan_new_clone(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn seal(&self) {
        unsafe {
            nm_sys::nm_bridge_vlan_seal(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_pvid(&self, value: bool) {
        unsafe {
            nm_sys::nm_bridge_vlan_set_pvid(self.to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_untagged(&self, value: bool) {
        unsafe {
            nm_sys::nm_bridge_vlan_set_untagged(self.to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn to_str(&self) -> Result<GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_bridge_vlan_to_str(self.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn from_str(str: &str) -> Result<BridgeVlan, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_bridge_vlan_from_str(str.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}
