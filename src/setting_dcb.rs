// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::{Setting, SettingDcbFlags};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    /// Data Center Bridging Settings
    ///
    /// ## Properties
    ///
    ///
    /// #### `app-fcoe-flags`
    ///  Specifies the [`SettingDcbFlags`][crate::SettingDcbFlags] for the DCB FCoE application. Flags may
    /// be any combination of [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE],
    /// [`SettingDcbFlags::ADVERTISE`][crate::SettingDcbFlags::ADVERTISE], and [`SettingDcbFlags::WILLING`][crate::SettingDcbFlags::WILLING].
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `app-fcoe-mode`
    ///  The FCoE controller mode; either [`SETTING_DCB_FCOE_MODE_FABRIC`][crate::SETTING_DCB_FCOE_MODE_FABRIC]
    /// or [`SETTING_DCB_FCOE_MODE_VN2VN`][crate::SETTING_DCB_FCOE_MODE_VN2VN].
    ///
    /// Since 1.34, [`None`] is the default and means [`SETTING_DCB_FCOE_MODE_FABRIC`][crate::SETTING_DCB_FCOE_MODE_FABRIC].
    /// Before 1.34, [`None`] was rejected as invalid and the default was [`SETTING_DCB_FCOE_MODE_FABRIC`][crate::SETTING_DCB_FCOE_MODE_FABRIC].
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `app-fcoe-priority`
    ///  The highest User Priority (0 - 7) which FCoE frames should use, or -1 for
    /// default priority. Only used when the [`app-fcoe-flags`][struct@crate::SettingDcb#app-fcoe-flags]
    /// property includes the [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `app-fip-flags`
    ///  Specifies the [`SettingDcbFlags`][crate::SettingDcbFlags] for the DCB FIP application. Flags may
    /// be any combination of [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE],
    /// [`SettingDcbFlags::ADVERTISE`][crate::SettingDcbFlags::ADVERTISE], and [`SettingDcbFlags::WILLING`][crate::SettingDcbFlags::WILLING].
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `app-fip-priority`
    ///  The highest User Priority (0 - 7) which FIP frames should use, or -1 for
    /// default priority. Only used when the [`app-fip-flags`][struct@crate::SettingDcb#app-fip-flags]
    /// property includes the [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `app-iscsi-flags`
    ///  Specifies the [`SettingDcbFlags`][crate::SettingDcbFlags] for the DCB iSCSI application. Flags
    /// may be any combination of [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE],
    /// [`SettingDcbFlags::ADVERTISE`][crate::SettingDcbFlags::ADVERTISE], and [`SettingDcbFlags::WILLING`][crate::SettingDcbFlags::WILLING].
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `app-iscsi-priority`
    ///  The highest User Priority (0 - 7) which iSCSI frames should use, or -1
    /// for default priority. Only used when the [`app-iscsi-flags`][struct@crate::SettingDcb#app-iscsi-flags]
    /// property includes the [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `priority-bandwidth`
    ///  An array of 8 uint values, where the array index corresponds to the User
    /// Priority (0 - 7) and the value indicates the percentage of bandwidth of
    /// the priority's assigned group that the priority may use. The sum of all
    /// percentages for priorities which belong to the same group must total 100
    /// percents.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `priority-flow-control`
    ///  An array of 8 boolean values, where the array index corresponds to the User
    /// Priority (0 - 7) and the value indicates whether or not the corresponding
    /// priority should transmit priority pause.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `priority-flow-control-flags`
    ///  Specifies the [`SettingDcbFlags`][crate::SettingDcbFlags] for DCB Priority Flow Control (PFC).
    /// Flags may be any combination of [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE],
    /// [`SettingDcbFlags::ADVERTISE`][crate::SettingDcbFlags::ADVERTISE], and [`SettingDcbFlags::WILLING`][crate::SettingDcbFlags::WILLING].
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `priority-group-bandwidth`
    ///  An array of 8 uint values, where the array index corresponds to the
    /// Priority Group ID (0 - 7) and the value indicates the percentage of link
    /// bandwidth allocated to that group. Allowed values are 0 - 100, and the
    /// sum of all values must total 100 percents.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `priority-group-flags`
    ///  Specifies the [`SettingDcbFlags`][crate::SettingDcbFlags] for DCB Priority Groups. Flags may be
    /// any combination of [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE],
    /// [`SettingDcbFlags::ADVERTISE`][crate::SettingDcbFlags::ADVERTISE], and [`SettingDcbFlags::WILLING`][crate::SettingDcbFlags::WILLING].
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `priority-group-id`
    ///  An array of 8 uint values, where the array index corresponds to the User
    /// Priority (0 - 7) and the value indicates the Priority Group ID. Allowed
    /// Priority Group ID values are 0 - 7 or 15 for the unrestricted group.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `priority-strict-bandwidth`
    ///  An array of 8 boolean values, where the array index corresponds to the User
    /// Priority (0 - 7) and the value indicates whether or not the priority may
    /// use all of the bandwidth allocated to its assigned group.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `priority-traffic-class`
    ///  An array of 8 uint values, where the array index corresponds to the User
    /// Priority (0 - 7) and the value indicates the traffic class (0 - 7) to
    /// which the priority is mapped.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Setting</h4></summary>
    ///
    ///
    /// #### `name`
    ///  The setting's name, which uniquely identifies the setting within the
    /// connection. Each setting type has a name unique to that type, for
    /// example "ppp" or "802-11-wireless" or "802-3-ethernet".
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`SettingExt`][trait@crate::prelude::SettingExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMSettingDcb")]
    pub struct SettingDcb(Object<ffi::NMSettingDcb, ffi::NMSettingDcbClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_dcb_get_type(),
    }
}

impl SettingDcb {
    /// Creates a new [`SettingDcb`][crate::SettingDcb] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingDcb`][crate::SettingDcb] object
    #[doc(alias = "nm_setting_dcb_new")]
    pub fn new() -> SettingDcb {
        unsafe { Setting::from_glib_full(ffi::nm_setting_dcb_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the [`app-fcoe-flags`][struct@crate::SettingDcb#app-fcoe-flags] property of the setting
    #[doc(alias = "nm_setting_dcb_get_app_fcoe_flags")]
    #[doc(alias = "get_app_fcoe_flags")]
    pub fn app_fcoe_flags(&self) -> SettingDcbFlags {
        unsafe {
            from_glib(ffi::nm_setting_dcb_get_app_fcoe_flags(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`app-fcoe-mode`][struct@crate::SettingDcb#app-fcoe-mode] property of the setting
    #[doc(alias = "nm_setting_dcb_get_app_fcoe_mode")]
    #[doc(alias = "get_app_fcoe_mode")]
    pub fn app_fcoe_mode(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_dcb_get_app_fcoe_mode(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`app-fcoe-priority`][struct@crate::SettingDcb#app-fcoe-priority] property of the setting
    #[doc(alias = "nm_setting_dcb_get_app_fcoe_priority")]
    #[doc(alias = "get_app_fcoe_priority")]
    pub fn app_fcoe_priority(&self) -> i32 {
        unsafe { ffi::nm_setting_dcb_get_app_fcoe_priority(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`app-fip-flags`][struct@crate::SettingDcb#app-fip-flags] property of the setting
    #[doc(alias = "nm_setting_dcb_get_app_fip_flags")]
    #[doc(alias = "get_app_fip_flags")]
    pub fn app_fip_flags(&self) -> SettingDcbFlags {
        unsafe { from_glib(ffi::nm_setting_dcb_get_app_fip_flags(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`app-fip-priority`][struct@crate::SettingDcb#app-fip-priority] property of the setting
    #[doc(alias = "nm_setting_dcb_get_app_fip_priority")]
    #[doc(alias = "get_app_fip_priority")]
    pub fn app_fip_priority(&self) -> i32 {
        unsafe { ffi::nm_setting_dcb_get_app_fip_priority(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`app-iscsi-flags`][struct@crate::SettingDcb#app-iscsi-flags] property of the setting
    #[doc(alias = "nm_setting_dcb_get_app_iscsi_flags")]
    #[doc(alias = "get_app_iscsi_flags")]
    pub fn app_iscsi_flags(&self) -> SettingDcbFlags {
        unsafe {
            from_glib(ffi::nm_setting_dcb_get_app_iscsi_flags(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`app-iscsi-priority`][struct@crate::SettingDcb#app-iscsi-priority] property of the setting
    #[doc(alias = "nm_setting_dcb_get_app_iscsi_priority")]
    #[doc(alias = "get_app_iscsi_priority")]
    pub fn app_iscsi_priority(&self) -> i32 {
        unsafe { ffi::nm_setting_dcb_get_app_iscsi_priority(self.to_glib_none().0) }
    }

    /// ## `user_priority`
    /// the User Priority (0 - 7) to retrieve the group bandwidth percentage for
    ///
    /// # Returns
    ///
    /// the allowed bandwidth percentage of `user_priority` in its priority group.
    /// These values are only valid when [`priority-group-flags`][struct@crate::SettingDcb#priority-group-flags] includes the
    /// [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    #[doc(alias = "nm_setting_dcb_get_priority_bandwidth")]
    #[doc(alias = "get_priority_bandwidth")]
    pub fn priority_bandwidth(&self, user_priority: u32) -> u32 {
        unsafe { ffi::nm_setting_dcb_get_priority_bandwidth(self.to_glib_none().0, user_priority) }
    }

    /// ## `user_priority`
    /// the User Priority (0 - 7) to retrieve flow control for
    ///
    /// # Returns
    ///
    /// [`true`] if flow control is enabled for the given `user_priority`,
    /// [`false`] if not enabled
    #[doc(alias = "nm_setting_dcb_get_priority_flow_control")]
    #[doc(alias = "get_priority_flow_control")]
    pub fn is_priority_flow_control(&self, user_priority: u32) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_dcb_get_priority_flow_control(
                self.to_glib_none().0,
                user_priority,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`priority-flow-control-flags`][struct@crate::SettingDcb#priority-flow-control-flags] property of the setting
    #[doc(alias = "nm_setting_dcb_get_priority_flow_control_flags")]
    #[doc(alias = "get_priority_flow_control_flags")]
    pub fn priority_flow_control_flags(&self) -> SettingDcbFlags {
        unsafe {
            from_glib(ffi::nm_setting_dcb_get_priority_flow_control_flags(
                self.to_glib_none().0,
            ))
        }
    }

    /// ## `group_id`
    /// the priority group (0 - 7) to retrieve the bandwidth percentage for
    ///
    /// # Returns
    ///
    /// the bandwidth percentage assigned to `group_id`. These values are
    /// only valid when [`priority-group-flags`][struct@crate::SettingDcb#priority-group-flags] includes the
    /// [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    #[doc(alias = "nm_setting_dcb_get_priority_group_bandwidth")]
    #[doc(alias = "get_priority_group_bandwidth")]
    pub fn priority_group_bandwidth(&self, group_id: u32) -> u32 {
        unsafe { ffi::nm_setting_dcb_get_priority_group_bandwidth(self.to_glib_none().0, group_id) }
    }

    ///
    /// # Returns
    ///
    /// the [`priority-group-flags`][struct@crate::SettingDcb#priority-group-flags] property of the setting
    #[doc(alias = "nm_setting_dcb_get_priority_group_flags")]
    #[doc(alias = "get_priority_group_flags")]
    pub fn priority_group_flags(&self) -> SettingDcbFlags {
        unsafe {
            from_glib(ffi::nm_setting_dcb_get_priority_group_flags(
                self.to_glib_none().0,
            ))
        }
    }

    /// ## `user_priority`
    /// the User Priority (0 - 7) to retrieve the group ID for
    ///
    /// # Returns
    ///
    /// the group number `user_priority` is assigned to. These values are
    /// only valid when [`priority-group-flags`][struct@crate::SettingDcb#priority-group-flags] includes the
    /// [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    #[doc(alias = "nm_setting_dcb_get_priority_group_id")]
    #[doc(alias = "get_priority_group_id")]
    pub fn priority_group_id(&self, user_priority: u32) -> u32 {
        unsafe { ffi::nm_setting_dcb_get_priority_group_id(self.to_glib_none().0, user_priority) }
    }

    /// ## `user_priority`
    /// the User Priority (0 - 7) to retrieve strict bandwidth for
    ///
    /// # Returns
    ///
    /// [`true`] if `user_priority` may use all of the bandwidth allocated to its
    /// assigned group, or [`false`] if not. These values are only valid when
    /// [`priority-group-flags`][struct@crate::SettingDcb#priority-group-flags] includes the [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    #[doc(alias = "nm_setting_dcb_get_priority_strict_bandwidth")]
    #[doc(alias = "get_priority_strict_bandwidth")]
    pub fn is_priority_strict_bandwidth(&self, user_priority: u32) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_dcb_get_priority_strict_bandwidth(
                self.to_glib_none().0,
                user_priority,
            ))
        }
    }

    /// ## `user_priority`
    /// the User Priority (0 - 7) to retrieve the traffic class for
    ///
    /// # Returns
    ///
    /// the traffic class assigned to `user_priority`. These values are only
    /// valid when [`priority-group-flags`][struct@crate::SettingDcb#priority-group-flags] includes the
    /// [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    #[doc(alias = "nm_setting_dcb_get_priority_traffic_class")]
    #[doc(alias = "get_priority_traffic_class")]
    pub fn priority_traffic_class(&self, user_priority: u32) -> u32 {
        unsafe {
            ffi::nm_setting_dcb_get_priority_traffic_class(self.to_glib_none().0, user_priority)
        }
    }

    /// These values are only valid when [`priority-group-flags`][struct@crate::SettingDcb#priority-group-flags] includes
    /// the [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    /// ## `user_priority`
    /// the User Priority (0 - 7) to set the bandwidth percentage for
    /// ## `bandwidth_percent`
    /// the bandwidth percentage (0 - 100) that `user_priority` is
    /// allowed to use within its priority group
    #[doc(alias = "nm_setting_dcb_set_priority_bandwidth")]
    pub fn set_priority_bandwidth(&self, user_priority: u32, bandwidth_percent: u32) {
        unsafe {
            ffi::nm_setting_dcb_set_priority_bandwidth(
                self.to_glib_none().0,
                user_priority,
                bandwidth_percent,
            );
        }
    }

    /// These values are only valid when [`priority-flow-control`][struct@crate::SettingDcb#priority-flow-control] includes
    /// the [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    /// ## `user_priority`
    /// the User Priority (0 - 7) to set flow control for
    /// ## `enabled`
    /// [`true`] to enable flow control for this priority, [`false`] to disable it
    #[doc(alias = "nm_setting_dcb_set_priority_flow_control")]
    pub fn set_priority_flow_control(&self, user_priority: u32, enabled: bool) {
        unsafe {
            ffi::nm_setting_dcb_set_priority_flow_control(
                self.to_glib_none().0,
                user_priority,
                enabled.into_glib(),
            );
        }
    }

    /// These values are only valid when [`priority-group-flags`][struct@crate::SettingDcb#priority-group-flags] includes
    /// the [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    /// ## `group_id`
    /// the priority group (0 - 7) to set the bandwidth percentage for
    /// ## `bandwidth_percent`
    /// the bandwidth percentage (0 - 100) to assign to `group_id` to
    #[doc(alias = "nm_setting_dcb_set_priority_group_bandwidth")]
    pub fn set_priority_group_bandwidth(&self, group_id: u32, bandwidth_percent: u32) {
        unsafe {
            ffi::nm_setting_dcb_set_priority_group_bandwidth(
                self.to_glib_none().0,
                group_id,
                bandwidth_percent,
            );
        }
    }

    /// These values are only valid when [`priority-group-flags`][struct@crate::SettingDcb#priority-group-flags] includes
    /// the [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    /// ## `user_priority`
    /// the User Priority (0 - 7) to set flow control for
    /// ## `group_id`
    /// the group (0 - 7) to assign `user_priority` to, or 15 for the
    /// unrestricted group.
    #[doc(alias = "nm_setting_dcb_set_priority_group_id")]
    pub fn set_priority_group_id(&self, user_priority: u32, group_id: u32) {
        unsafe {
            ffi::nm_setting_dcb_set_priority_group_id(
                self.to_glib_none().0,
                user_priority,
                group_id,
            );
        }
    }

    /// These values are only valid when [`priority-group-flags`][struct@crate::SettingDcb#priority-group-flags] includes
    /// the [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    /// ## `user_priority`
    /// the User Priority (0 - 7) to set strict bandwidth for
    /// ## `strict`
    /// [`true`] to allow `user_priority` to use all the bandwidth allocated to
    /// its priority group, or [`false`] if not
    #[doc(alias = "nm_setting_dcb_set_priority_strict_bandwidth")]
    pub fn set_priority_strict_bandwidth(&self, user_priority: u32, strict: bool) {
        unsafe {
            ffi::nm_setting_dcb_set_priority_strict_bandwidth(
                self.to_glib_none().0,
                user_priority,
                strict.into_glib(),
            );
        }
    }

    #[doc(alias = "nm_setting_dcb_set_priority_traffic_class")]
    pub fn set_priority_traffic_class(&self, user_priority: u32, traffic_class: u32) {
        unsafe {
            ffi::nm_setting_dcb_set_priority_traffic_class(
                self.to_glib_none().0,
                user_priority,
                traffic_class,
            );
        }
    }

    /// Specifies the [`SettingDcbFlags`][crate::SettingDcbFlags] for the DCB FCoE application. Flags may
    /// be any combination of [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE],
    /// [`SettingDcbFlags::ADVERTISE`][crate::SettingDcbFlags::ADVERTISE], and [`SettingDcbFlags::WILLING`][crate::SettingDcbFlags::WILLING].
    #[doc(alias = "app-fcoe-flags")]
    pub fn set_app_fcoe_flags(&self, app_fcoe_flags: SettingDcbFlags) {
        glib::ObjectExt::set_property(self, "app-fcoe-flags", &app_fcoe_flags)
    }

    /// The FCoE controller mode; either [`SETTING_DCB_FCOE_MODE_FABRIC`][crate::SETTING_DCB_FCOE_MODE_FABRIC]
    /// or [`SETTING_DCB_FCOE_MODE_VN2VN`][crate::SETTING_DCB_FCOE_MODE_VN2VN].
    ///
    /// Since 1.34, [`None`] is the default and means [`SETTING_DCB_FCOE_MODE_FABRIC`][crate::SETTING_DCB_FCOE_MODE_FABRIC].
    /// Before 1.34, [`None`] was rejected as invalid and the default was [`SETTING_DCB_FCOE_MODE_FABRIC`][crate::SETTING_DCB_FCOE_MODE_FABRIC].
    #[doc(alias = "app-fcoe-mode")]
    pub fn set_app_fcoe_mode(&self, app_fcoe_mode: Option<&str>) {
        glib::ObjectExt::set_property(self, "app-fcoe-mode", &app_fcoe_mode)
    }

    /// The highest User Priority (0 - 7) which FCoE frames should use, or -1 for
    /// default priority. Only used when the [`app-fcoe-flags`][struct@crate::SettingDcb#app-fcoe-flags]
    /// property includes the [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    #[doc(alias = "app-fcoe-priority")]
    pub fn set_app_fcoe_priority(&self, app_fcoe_priority: i32) {
        glib::ObjectExt::set_property(self, "app-fcoe-priority", &app_fcoe_priority)
    }

    /// Specifies the [`SettingDcbFlags`][crate::SettingDcbFlags] for the DCB FIP application. Flags may
    /// be any combination of [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE],
    /// [`SettingDcbFlags::ADVERTISE`][crate::SettingDcbFlags::ADVERTISE], and [`SettingDcbFlags::WILLING`][crate::SettingDcbFlags::WILLING].
    #[doc(alias = "app-fip-flags")]
    pub fn set_app_fip_flags(&self, app_fip_flags: SettingDcbFlags) {
        glib::ObjectExt::set_property(self, "app-fip-flags", &app_fip_flags)
    }

    /// The highest User Priority (0 - 7) which FIP frames should use, or -1 for
    /// default priority. Only used when the [`app-fip-flags`][struct@crate::SettingDcb#app-fip-flags]
    /// property includes the [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    #[doc(alias = "app-fip-priority")]
    pub fn set_app_fip_priority(&self, app_fip_priority: i32) {
        glib::ObjectExt::set_property(self, "app-fip-priority", &app_fip_priority)
    }

    /// Specifies the [`SettingDcbFlags`][crate::SettingDcbFlags] for the DCB iSCSI application. Flags
    /// may be any combination of [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE],
    /// [`SettingDcbFlags::ADVERTISE`][crate::SettingDcbFlags::ADVERTISE], and [`SettingDcbFlags::WILLING`][crate::SettingDcbFlags::WILLING].
    #[doc(alias = "app-iscsi-flags")]
    pub fn set_app_iscsi_flags(&self, app_iscsi_flags: SettingDcbFlags) {
        glib::ObjectExt::set_property(self, "app-iscsi-flags", &app_iscsi_flags)
    }

    /// The highest User Priority (0 - 7) which iSCSI frames should use, or -1
    /// for default priority. Only used when the [`app-iscsi-flags`][struct@crate::SettingDcb#app-iscsi-flags]
    /// property includes the [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE] flag.
    #[doc(alias = "app-iscsi-priority")]
    pub fn set_app_iscsi_priority(&self, app_iscsi_priority: i32) {
        glib::ObjectExt::set_property(self, "app-iscsi-priority", &app_iscsi_priority)
    }

    /// Specifies the [`SettingDcbFlags`][crate::SettingDcbFlags] for DCB Priority Flow Control (PFC).
    /// Flags may be any combination of [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE],
    /// [`SettingDcbFlags::ADVERTISE`][crate::SettingDcbFlags::ADVERTISE], and [`SettingDcbFlags::WILLING`][crate::SettingDcbFlags::WILLING].
    #[doc(alias = "priority-flow-control-flags")]
    pub fn set_priority_flow_control_flags(&self, priority_flow_control_flags: SettingDcbFlags) {
        glib::ObjectExt::set_property(
            self,
            "priority-flow-control-flags",
            &priority_flow_control_flags,
        )
    }

    /// Specifies the [`SettingDcbFlags`][crate::SettingDcbFlags] for DCB Priority Groups. Flags may be
    /// any combination of [`SettingDcbFlags::ENABLE`][crate::SettingDcbFlags::ENABLE],
    /// [`SettingDcbFlags::ADVERTISE`][crate::SettingDcbFlags::ADVERTISE], and [`SettingDcbFlags::WILLING`][crate::SettingDcbFlags::WILLING].
    #[doc(alias = "priority-group-flags")]
    pub fn set_priority_group_flags(&self, priority_group_flags: SettingDcbFlags) {
        glib::ObjectExt::set_property(self, "priority-group-flags", &priority_group_flags)
    }

    #[doc(alias = "app-fcoe-flags")]
    pub fn connect_app_fcoe_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_app_fcoe_flags_trampoline<F: Fn(&SettingDcb) + 'static>(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::app-fcoe-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_app_fcoe_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "app-fcoe-mode")]
    pub fn connect_app_fcoe_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_app_fcoe_mode_trampoline<F: Fn(&SettingDcb) + 'static>(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::app-fcoe-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_app_fcoe_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "app-fcoe-priority")]
    pub fn connect_app_fcoe_priority_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_app_fcoe_priority_trampoline<F: Fn(&SettingDcb) + 'static>(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::app-fcoe-priority\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_app_fcoe_priority_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "app-fip-flags")]
    pub fn connect_app_fip_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_app_fip_flags_trampoline<F: Fn(&SettingDcb) + 'static>(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::app-fip-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_app_fip_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "app-fip-priority")]
    pub fn connect_app_fip_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_app_fip_priority_trampoline<F: Fn(&SettingDcb) + 'static>(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::app-fip-priority\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_app_fip_priority_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "app-iscsi-flags")]
    pub fn connect_app_iscsi_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_app_iscsi_flags_trampoline<F: Fn(&SettingDcb) + 'static>(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::app-iscsi-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_app_iscsi_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "app-iscsi-priority")]
    pub fn connect_app_iscsi_priority_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_app_iscsi_priority_trampoline<F: Fn(&SettingDcb) + 'static>(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::app-iscsi-priority\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_app_iscsi_priority_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "priority-bandwidth")]
    pub fn connect_priority_bandwidth_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_bandwidth_trampoline<F: Fn(&SettingDcb) + 'static>(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::priority-bandwidth\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_priority_bandwidth_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "priority-flow-control")]
    pub fn connect_priority_flow_control_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_flow_control_trampoline<
            F: Fn(&SettingDcb) + 'static,
        >(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::priority-flow-control\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_priority_flow_control_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "priority-flow-control-flags")]
    pub fn connect_priority_flow_control_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_flow_control_flags_trampoline<
            F: Fn(&SettingDcb) + 'static,
        >(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::priority-flow-control-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_priority_flow_control_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "priority-group-bandwidth")]
    pub fn connect_priority_group_bandwidth_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_group_bandwidth_trampoline<
            F: Fn(&SettingDcb) + 'static,
        >(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::priority-group-bandwidth\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_priority_group_bandwidth_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "priority-group-flags")]
    pub fn connect_priority_group_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_group_flags_trampoline<
            F: Fn(&SettingDcb) + 'static,
        >(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::priority-group-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_priority_group_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "priority-group-id")]
    pub fn connect_priority_group_id_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_group_id_trampoline<F: Fn(&SettingDcb) + 'static>(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::priority-group-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_priority_group_id_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "priority-strict-bandwidth")]
    pub fn connect_priority_strict_bandwidth_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_strict_bandwidth_trampoline<
            F: Fn(&SettingDcb) + 'static,
        >(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::priority-strict-bandwidth\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_priority_strict_bandwidth_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "priority-traffic-class")]
    pub fn connect_priority_traffic_class_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_traffic_class_trampoline<
            F: Fn(&SettingDcb) + 'static,
        >(
            this: *mut ffi::NMSettingDcb,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::priority-traffic-class\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_priority_traffic_class_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for SettingDcb {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingDcb {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingDcb")
    }
}
