// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_18", feature = "dox"))]
use glib;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use glib::translate::*;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use glib::GString;
use nm_sys;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use std::ptr;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct IPRoutingRule(Shared<nm_sys::NMIPRoutingRule>);

    match fn {
        ref => |ptr| nm_sys::nm_ip_routing_rule_ref(ptr),
        unref => |ptr| nm_sys::nm_ip_routing_rule_unref(ptr),
        get_type => || nm_sys::nm_ip_routing_rule_get_type(),
    }
}

impl IPRoutingRule {
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn new(addr_family: i32) -> IPRoutingRule {
        unsafe { from_glib_full(nm_sys::nm_ip_routing_rule_new(addr_family)) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn cmp(&self, other: Option<&IPRoutingRule>) -> i32 {
        unsafe { nm_sys::nm_ip_routing_rule_cmp(self.to_glib_none().0, other.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_action(&self) -> u8 {
        unsafe { nm_sys::nm_ip_routing_rule_get_action(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_addr_family(&self) -> i32 {
        unsafe { nm_sys::nm_ip_routing_rule_get_addr_family(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_destination_port_end(&self) -> u16 {
        unsafe { nm_sys::nm_ip_routing_rule_get_destination_port_end(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_destination_port_start(&self) -> u16 {
        unsafe { nm_sys::nm_ip_routing_rule_get_destination_port_start(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_from(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_ip_routing_rule_get_from(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_from_len(&self) -> u8 {
        unsafe { nm_sys::nm_ip_routing_rule_get_from_len(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_fwmark(&self) -> u32 {
        unsafe { nm_sys::nm_ip_routing_rule_get_fwmark(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_fwmask(&self) -> u32 {
        unsafe { nm_sys::nm_ip_routing_rule_get_fwmask(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_iifname(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_ip_routing_rule_get_iifname(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_invert(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_ip_routing_rule_get_invert(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_ipproto(&self) -> u8 {
        unsafe { nm_sys::nm_ip_routing_rule_get_ipproto(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_oifname(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_ip_routing_rule_get_oifname(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_priority(&self) -> i64 {
        unsafe { nm_sys::nm_ip_routing_rule_get_priority(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_source_port_end(&self) -> u16 {
        unsafe { nm_sys::nm_ip_routing_rule_get_source_port_end(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_source_port_start(&self) -> u16 {
        unsafe { nm_sys::nm_ip_routing_rule_get_source_port_start(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn get_suppress_prefixlength(&self) -> i32 {
        unsafe { nm_sys::nm_ip_routing_rule_get_suppress_prefixlength(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_table(&self) -> u32 {
        unsafe { nm_sys::nm_ip_routing_rule_get_table(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_to(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_ip_routing_rule_get_to(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_to_len(&self) -> u8 {
        unsafe { nm_sys::nm_ip_routing_rule_get_to_len(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn get_tos(&self) -> u8 {
        unsafe { nm_sys::nm_ip_routing_rule_get_tos(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn is_sealed(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_ip_routing_rule_is_sealed(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn new_clone(&self) -> Option<IPRoutingRule> {
        unsafe { from_glib_full(nm_sys::nm_ip_routing_rule_new_clone(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn seal(&self) {
        unsafe {
            nm_sys::nm_ip_routing_rule_seal(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_action(&self, action: u8) {
        unsafe {
            nm_sys::nm_ip_routing_rule_set_action(self.to_glib_none().0, action);
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_destination_port(&self, start: u16, end: u16) {
        unsafe {
            nm_sys::nm_ip_routing_rule_set_destination_port(self.to_glib_none().0, start, end);
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_fwmark(&self, fwmark: u32, fwmask: u32) {
        unsafe {
            nm_sys::nm_ip_routing_rule_set_fwmark(self.to_glib_none().0, fwmark, fwmask);
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_iifname(&self, iifname: Option<&str>) {
        unsafe {
            nm_sys::nm_ip_routing_rule_set_iifname(self.to_glib_none().0, iifname.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_invert(&self, invert: bool) {
        unsafe {
            nm_sys::nm_ip_routing_rule_set_invert(self.to_glib_none().0, invert.to_glib());
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_ipproto(&self, ipproto: u8) {
        unsafe {
            nm_sys::nm_ip_routing_rule_set_ipproto(self.to_glib_none().0, ipproto);
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_oifname(&self, oifname: Option<&str>) {
        unsafe {
            nm_sys::nm_ip_routing_rule_set_oifname(self.to_glib_none().0, oifname.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_priority(&self, priority: i64) {
        unsafe {
            nm_sys::nm_ip_routing_rule_set_priority(self.to_glib_none().0, priority);
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_source_port(&self, start: u16, end: u16) {
        unsafe {
            nm_sys::nm_ip_routing_rule_set_source_port(self.to_glib_none().0, start, end);
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    pub fn set_suppress_prefixlength(&self, suppress_prefixlength: i32) {
        unsafe {
            nm_sys::nm_ip_routing_rule_set_suppress_prefixlength(
                self.to_glib_none().0,
                suppress_prefixlength,
            );
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_table(&self, table: u32) {
        unsafe {
            nm_sys::nm_ip_routing_rule_set_table(self.to_glib_none().0, table);
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn set_tos(&self, tos: u8) {
        unsafe {
            nm_sys::nm_ip_routing_rule_set_tos(self.to_glib_none().0, tos);
        }
    }

    //#[cfg(any(feature = "v1_18", feature = "dox"))]
    //pub fn to_string(&self, to_string_flags: IPRoutingRuleAsStringFlags, extra_args: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 25 }/TypeId { ns_id: 0, id: 25 }) -> Result<GString, glib::Error> {
    //    unsafe { TODO: call nm_sys:nm_ip_routing_rule_to_string() }
    //}

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    pub fn validate(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_ip_routing_rule_validate(self.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //#[cfg(any(feature = "v1_18", feature = "dox"))]
    //pub fn from_string(str: &str, to_string_flags: IPRoutingRuleAsStringFlags, extra_args: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 25 }/TypeId { ns_id: 0, id: 25 }) -> Result<IPRoutingRule, glib::Error> {
    //    unsafe { TODO: call nm_sys:nm_ip_routing_rule_from_string() }
    //}
}
