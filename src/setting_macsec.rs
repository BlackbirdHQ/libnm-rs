// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use crate::SettingMacsecMode;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use crate::SettingMacsecValidation;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use crate::SettingSecretFlags;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use glib::object::Cast;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use glib::translate::*;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use glib::ToValue;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMSettingMacsec")]
    pub struct SettingMacsec(Object<ffi::NMSettingMacsec, ffi::NMSettingMacsecClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_macsec_get_type(),
    }
}

impl SettingMacsec {
    /// Creates a new [`SettingMacsec`][crate::SettingMacsec] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingMacsec`][crate::SettingMacsec] object
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_setting_macsec_new")]
    pub fn new() -> SettingMacsec {
        unsafe { Setting::from_glib_full(ffi::nm_setting_macsec_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingMacsec::encrypt` property of the setting
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_setting_macsec_get_encrypt")]
    #[doc(alias = "get_encrypt")]
    pub fn is_encrypt(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_macsec_get_encrypt(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingMacsec::mka-cak` property of the setting
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_setting_macsec_get_mka_cak")]
    #[doc(alias = "get_mka_cak")]
    pub fn mka_cak(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_macsec_get_mka_cak(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`SettingSecretFlags`][crate::SettingSecretFlags] pertaining to the `property::SettingMacsec::mka-cak`
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_setting_macsec_get_mka_cak_flags")]
    #[doc(alias = "get_mka_cak_flags")]
    pub fn mka_cak_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(ffi::nm_setting_macsec_get_mka_cak_flags(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingMacsec::mka-ckn` property of the setting
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_setting_macsec_get_mka_ckn")]
    #[doc(alias = "get_mka_ckn")]
    pub fn mka_ckn(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_macsec_get_mka_ckn(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingMacsec::mode` property of the setting
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_setting_macsec_get_mode")]
    #[doc(alias = "get_mode")]
    pub fn mode(&self) -> SettingMacsecMode {
        unsafe { from_glib(ffi::nm_setting_macsec_get_mode(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingMacsec::parent` property of the setting
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_setting_macsec_get_parent")]
    #[doc(alias = "get_parent")]
    pub fn parent(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_macsec_get_parent(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingMacsec::port` property of the setting
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_setting_macsec_get_port")]
    #[doc(alias = "get_port")]
    pub fn port(&self) -> i32 {
        unsafe { ffi::nm_setting_macsec_get_port(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingMacsec::send-sci` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "nm_setting_macsec_get_send_sci")]
    #[doc(alias = "get_send_sci")]
    pub fn is_send_sci(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_macsec_get_send_sci(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingMacsec::validation` property of the setting
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_setting_macsec_get_validation")]
    #[doc(alias = "get_validation")]
    pub fn validation(&self) -> SettingMacsecValidation {
        unsafe { from_glib(ffi::nm_setting_macsec_get_validation(self.to_glib_none().0)) }
    }

    /// Whether the transmitted traffic must be encrypted.
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn set_encrypt(&self, encrypt: bool) {
        glib::ObjectExt::set_property(self, "encrypt", &encrypt)
    }

    /// The pre-shared CAK (Connectivity Association Key) for MACsec
    /// Key Agreement.
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "mka-cak")]
    pub fn set_mka_cak(&self, mka_cak: Option<&str>) {
        glib::ObjectExt::set_property(self, "mka-cak", &mka_cak)
    }

    /// Flags indicating how to handle the `property::SettingMacsec::mka-cak`
    /// property.
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "mka-cak-flags")]
    pub fn set_mka_cak_flags(&self, mka_cak_flags: SettingSecretFlags) {
        glib::ObjectExt::set_property(self, "mka-cak-flags", &mka_cak_flags)
    }

    /// The pre-shared CKN (Connectivity-association Key Name) for
    /// MACsec Key Agreement.
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "mka-ckn")]
    pub fn set_mka_ckn(&self, mka_ckn: Option<&str>) {
        glib::ObjectExt::set_property(self, "mka-ckn", &mka_ckn)
    }

    /// Specifies how the CAK (Connectivity Association Key) for MKA (MACsec Key
    /// Agreement) is obtained.
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn set_mode(&self, mode: i32) {
        glib::ObjectExt::set_property(self, "mode", &mode)
    }

    /// If given, specifies the parent interface name or parent connection UUID
    /// from which this MACSEC interface should be created. If this property is
    /// not specified, the connection must contain an [`SettingWired`][crate::SettingWired] setting
    /// with a `property::SettingWired::mac-address` property.
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn set_parent(&self, parent: Option<&str>) {
        glib::ObjectExt::set_property(self, "parent", &parent)
    }

    /// The port component of the SCI (Secure Channel Identifier), between 1 and 65534.
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn set_port(&self, port: i32) {
        glib::ObjectExt::set_property(self, "port", &port)
    }

    /// Specifies whether the SCI (Secure Channel Identifier) is included
    /// in every packet.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "send-sci")]
    pub fn set_send_sci(&self, send_sci: bool) {
        glib::ObjectExt::set_property(self, "send-sci", &send_sci)
    }

    /// Specifies the validation mode for incoming frames.
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn set_validation(&self, validation: i32) {
        glib::ObjectExt::set_property(self, "validation", &validation)
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "encrypt")]
    pub fn connect_encrypt_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_encrypt_trampoline<F: Fn(&SettingMacsec) + 'static>(
            this: *mut ffi::NMSettingMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::encrypt\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_encrypt_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "mka-cak")]
    pub fn connect_mka_cak_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mka_cak_trampoline<F: Fn(&SettingMacsec) + 'static>(
            this: *mut ffi::NMSettingMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mka-cak\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mka_cak_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "mka-cak-flags")]
    pub fn connect_mka_cak_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mka_cak_flags_trampoline<F: Fn(&SettingMacsec) + 'static>(
            this: *mut ffi::NMSettingMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mka-cak-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mka_cak_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "mka-ckn")]
    pub fn connect_mka_ckn_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mka_ckn_trampoline<F: Fn(&SettingMacsec) + 'static>(
            this: *mut ffi::NMSettingMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mka-ckn\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mka_ckn_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "mode")]
    pub fn connect_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mode_trampoline<F: Fn(&SettingMacsec) + 'static>(
            this: *mut ffi::NMSettingMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "parent")]
    pub fn connect_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<F: Fn(&SettingMacsec) + 'static>(
            this: *mut ffi::NMSettingMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parent_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "port")]
    pub fn connect_port_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_port_trampoline<F: Fn(&SettingMacsec) + 'static>(
            this: *mut ffi::NMSettingMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::port\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_port_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "send-sci")]
    pub fn connect_send_sci_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_send_sci_trampoline<F: Fn(&SettingMacsec) + 'static>(
            this: *mut ffi::NMSettingMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::send-sci\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_send_sci_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "validation")]
    pub fn connect_validation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_validation_trampoline<F: Fn(&SettingMacsec) + 'static>(
            this: *mut ffi::NMSettingMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::validation\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_validation_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
impl Default for SettingMacsec {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingMacsec {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingMacsec")
    }
}
