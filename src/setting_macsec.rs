// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::object::Cast;
use glib::object::IsA;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::Value;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib_sys;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use gobject_sys;
use nm_sys;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use std::mem::transmute;
use Setting;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use SettingMacsecMode;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use SettingMacsecValidation;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use SettingSecretFlags;

glib_wrapper! {
    pub struct SettingMacsec(Object<nm_sys::NMSettingMacsec, nm_sys::NMSettingMacsecClass, SettingMacsecClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_macsec_get_type(),
    }
}

impl SettingMacsec {
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn new() -> SettingMacsec {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_macsec_new()).unsafe_cast() }
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
impl Default for SettingMacsec {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_MACSEC: Option<&SettingMacsec> = None;

pub trait SettingMacsecExt: 'static {
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_encrypt(&self) -> bool;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mka_cak(&self) -> Option<GString>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mka_cak_flags(&self) -> SettingSecretFlags;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mka_ckn(&self) -> Option<GString>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mode(&self) -> SettingMacsecMode;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_parent(&self) -> Option<GString>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_port(&self) -> i32;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_send_sci(&self) -> bool;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_validation(&self) -> SettingMacsecValidation;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_encrypt(&self, encrypt: bool);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mka_cak(&self, mka_cak: Option<&str>);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mka_cak_flags(&self, mka_cak_flags: SettingSecretFlags);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mka_ckn(&self, mka_ckn: Option<&str>);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mode(&self, mode: i32);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_parent(&self, parent: Option<&str>);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_port(&self, port: i32);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_send_sci(&self, send_sci: bool);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_validation(&self, validation: i32);

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_encrypt_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mka_cak_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mka_cak_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mka_ckn_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_port_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_send_sci_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_validation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingMacsec>> SettingMacsecExt for O {
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_encrypt(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_macsec_get_encrypt(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mka_cak(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_macsec_get_mka_cak(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mka_cak_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(nm_sys::nm_setting_macsec_get_mka_cak_flags(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mka_ckn(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_macsec_get_mka_ckn(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_mode(&self) -> SettingMacsecMode {
        unsafe {
            from_glib(nm_sys::nm_setting_macsec_get_mode(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_parent(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_macsec_get_parent(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_port(&self) -> i32 {
        unsafe { nm_sys::nm_setting_macsec_get_port(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_send_sci(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_macsec_get_send_sci(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_validation(&self) -> SettingMacsecValidation {
        unsafe {
            from_glib(nm_sys::nm_setting_macsec_get_validation(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_encrypt(&self, encrypt: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"encrypt\0".as_ptr() as *const _,
                Value::from(&encrypt).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mka_cak(&self, mka_cak: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mka-cak\0".as_ptr() as *const _,
                Value::from(mka_cak).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mka_cak_flags(&self, mka_cak_flags: SettingSecretFlags) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mka-cak-flags\0".as_ptr() as *const _,
                Value::from(&mka_cak_flags).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mka_ckn(&self, mka_ckn: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mka-ckn\0".as_ptr() as *const _,
                Value::from(mka_ckn).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_mode(&self, mode: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mode\0".as_ptr() as *const _,
                Value::from(&mode).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_parent(&self, parent: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"parent\0".as_ptr() as *const _,
                Value::from(parent).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_port(&self, port: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"port\0".as_ptr() as *const _,
                Value::from(&port).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_send_sci(&self, send_sci: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"send-sci\0".as_ptr() as *const _,
                Value::from(&send_sci).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn set_property_validation(&self, validation: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"validation\0".as_ptr() as *const _,
                Value::from(&validation).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_encrypt_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_encrypt_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingMacsec>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingMacsec::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::encrypt\0".as_ptr() as *const _,
                Some(transmute(notify_encrypt_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mka_cak_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mka_cak_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingMacsec>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingMacsec::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mka-cak\0".as_ptr() as *const _,
                Some(transmute(notify_mka_cak_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mka_cak_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_mka_cak_flags_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingMacsec>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingMacsec::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mka-cak-flags\0".as_ptr() as *const _,
                Some(transmute(
                    notify_mka_cak_flags_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mka_ckn_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mka_ckn_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingMacsec>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingMacsec::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mka-ckn\0".as_ptr() as *const _,
                Some(transmute(notify_mka_ckn_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mode_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingMacsec>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingMacsec::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mode\0".as_ptr() as *const _,
                Some(transmute(notify_mode_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingMacsec>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingMacsec::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute(notify_parent_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_port_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_port_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingMacsec>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingMacsec::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::port\0".as_ptr() as *const _,
                Some(transmute(notify_port_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_send_sci_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_send_sci_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingMacsec>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingMacsec::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::send-sci\0".as_ptr() as *const _,
                Some(transmute(notify_send_sci_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_validation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_validation_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingMacsec>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingMacsec::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::validation\0".as_ptr() as *const _,
                Some(transmute(notify_validation_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingMacsec {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingMacsec")
    }
}
