// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::IPTunnelFlags;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use crate::IPTunnelMode;
use crate::Setting;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use glib::object::Cast;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use glib::ToValue;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMSettingIPTunnel")]
    pub struct SettingIPTunnel(Object<ffi::NMSettingIPTunnel, ffi::NMSettingIPTunnelClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_ip_tunnel_get_type(),
    }
}

impl SettingIPTunnel {
    /// Creates a new [`SettingIPTunnel`][crate::SettingIPTunnel] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingIPTunnel`][crate::SettingIPTunnel] object
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_new")]
    pub fn new() -> SettingIPTunnel {
        unsafe { Setting::from_glib_full(ffi::nm_setting_ip_tunnel_new()).unsafe_cast() }
    }

    /// Returns the `property::SettingIPTunnel::encapsulation-limit` property of the setting.
    ///
    /// # Returns
    ///
    /// the encapsulation limit value
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_get_encapsulation_limit")]
    #[doc(alias = "get_encapsulation_limit")]
    pub fn encapsulation_limit(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_tunnel_get_encapsulation_limit(self.to_glib_none().0) }
    }

    #[doc(alias = "nm_setting_ip_tunnel_get_flags")]
    #[doc(alias = "get_flags")]
    pub fn flags(&self) -> IPTunnelFlags {
        unsafe { from_glib(ffi::nm_setting_ip_tunnel_get_flags(self.to_glib_none().0)) }
    }

    /// Returns the `property::SettingIPTunnel::flow-label` property of the setting.
    ///
    /// # Returns
    ///
    /// the flow label value
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_get_flow_label")]
    #[doc(alias = "get_flow_label")]
    pub fn flow_label(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_tunnel_get_flow_label(self.to_glib_none().0) }
    }

    /// Returns the `property::SettingIPTunnel::input-key` property of the setting.
    ///
    /// # Returns
    ///
    /// the input key
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_get_input_key")]
    #[doc(alias = "get_input_key")]
    pub fn input_key(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_tunnel_get_input_key(
                self.to_glib_none().0,
            ))
        }
    }

    /// Returns the `property::SettingIPTunnel::local` property of the setting.
    ///
    /// # Returns
    ///
    /// the local endpoint
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_get_local")]
    #[doc(alias = "get_local")]
    pub fn local(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_ip_tunnel_get_local(self.to_glib_none().0)) }
    }

    /// Returns the `property::SettingIPTunnel::mode` property of the setting.
    ///
    /// # Returns
    ///
    /// the tunnel mode
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_get_mode")]
    #[doc(alias = "get_mode")]
    pub fn mode(&self) -> IPTunnelMode {
        unsafe { from_glib(ffi::nm_setting_ip_tunnel_get_mode(self.to_glib_none().0)) }
    }

    /// Returns the `property::SettingIPTunnel::mtu` property of the setting.
    ///
    /// # Returns
    ///
    /// the MTU
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_get_mtu")]
    #[doc(alias = "get_mtu")]
    pub fn mtu(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_tunnel_get_mtu(self.to_glib_none().0) }
    }

    /// Returns the `property::SettingIPTunnel::output-key` property of the setting.
    ///
    /// # Returns
    ///
    /// the output key
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_get_output_key")]
    #[doc(alias = "get_output_key")]
    pub fn output_key(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_ip_tunnel_get_output_key(
                self.to_glib_none().0,
            ))
        }
    }

    /// Returns the `property::SettingIPTunnel::parent` property of the setting
    ///
    /// # Returns
    ///
    /// the parent device
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_get_parent")]
    #[doc(alias = "get_parent")]
    pub fn parent(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_ip_tunnel_get_parent(self.to_glib_none().0)) }
    }

    /// Returns the `property::SettingIPTunnel::path-mtu-discovery` property of the setting.
    ///
    /// # Returns
    ///
    /// whether path MTU discovery is enabled
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_get_path_mtu_discovery")]
    #[doc(alias = "get_path_mtu_discovery")]
    pub fn is_path_mtu_discovery(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_ip_tunnel_get_path_mtu_discovery(
                self.to_glib_none().0,
            ))
        }
    }

    /// Returns the `property::SettingIPTunnel::remote` property of the setting.
    ///
    /// # Returns
    ///
    /// the remote endpoint
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_get_remote")]
    #[doc(alias = "get_remote")]
    pub fn remote(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_ip_tunnel_get_remote(self.to_glib_none().0)) }
    }

    /// Returns the `property::SettingIPTunnel::tos` property of the setting.
    ///
    /// # Returns
    ///
    /// the TOS value
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_get_tos")]
    #[doc(alias = "get_tos")]
    pub fn tos(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_tunnel_get_tos(self.to_glib_none().0) }
    }

    /// Returns the `property::SettingIPTunnel::ttl` property of the setting.
    ///
    /// # Returns
    ///
    /// the Time-to-live value
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_ip_tunnel_get_ttl")]
    #[doc(alias = "get_ttl")]
    pub fn ttl(&self) -> u32 {
        unsafe { ffi::nm_setting_ip_tunnel_get_ttl(self.to_glib_none().0) }
    }

    /// How many additional levels of encapsulation are permitted to be prepended
    /// to packets. This property applies only to IPv6 tunnels.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "encapsulation-limit")]
    pub fn set_encapsulation_limit(&self, encapsulation_limit: u32) {
        glib::ObjectExt::set_property(self, "encapsulation-limit", &encapsulation_limit)
    }

    /// Tunnel flags. Currently, the following values are supported:
    /// [`IPTunnelFlags::IP6_IGN_ENCAP_LIMIT`][crate::IPTunnelFlags::IP6_IGN_ENCAP_LIMIT], [`IPTunnelFlags::IP6_USE_ORIG_TCLASS`][crate::IPTunnelFlags::IP6_USE_ORIG_TCLASS],
    /// [`IPTunnelFlags::IP6_USE_ORIG_FLOWLABEL`][crate::IPTunnelFlags::IP6_USE_ORIG_FLOWLABEL], [`IPTunnelFlags::IP6_MIP6_DEV`][crate::IPTunnelFlags::IP6_MIP6_DEV],
    /// [`IPTunnelFlags::IP6_RCV_DSCP_COPY`][crate::IPTunnelFlags::IP6_RCV_DSCP_COPY], [`IPTunnelFlags::IP6_USE_ORIG_FWMARK`][crate::IPTunnelFlags::IP6_USE_ORIG_FWMARK].
    /// They are valid only for IPv6 tunnels.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    pub fn set_flags(&self, flags: u32) {
        glib::ObjectExt::set_property(self, "flags", &flags)
    }

    /// The flow label to assign to tunnel packets. This property applies only to
    /// IPv6 tunnels.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "flow-label")]
    pub fn set_flow_label(&self, flow_label: u32) {
        glib::ObjectExt::set_property(self, "flow-label", &flow_label)
    }

    /// The key used for tunnel input packets; the property is valid only for
    /// certain tunnel modes (GRE, IP6GRE). If empty, no key is used.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "input-key")]
    pub fn set_input_key(&self, input_key: Option<&str>) {
        glib::ObjectExt::set_property(self, "input-key", &input_key)
    }

    /// The local endpoint of the tunnel; the value can be empty, otherwise it
    /// must contain an IPv4 or IPv6 address.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_local(&self, local: Option<&str>) {
        glib::ObjectExt::set_property(self, "local", &local)
    }

    /// The tunneling mode, for example [`IPTunnelMode::Ipip`][crate::IPTunnelMode::Ipip] or
    /// [`IPTunnelMode::Gre`][crate::IPTunnelMode::Gre].
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_mode(&self, mode: u32) {
        glib::ObjectExt::set_property(self, "mode", &mode)
    }

    /// If non-zero, only transmit packets of the specified size or smaller,
    /// breaking larger packets up into multiple fragments.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_mtu(&self, mtu: u32) {
        glib::ObjectExt::set_property(self, "mtu", &mtu)
    }

    /// The key used for tunnel output packets; the property is valid only for
    /// certain tunnel modes (GRE, IP6GRE). If empty, no key is used.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "output-key")]
    pub fn set_output_key(&self, output_key: Option<&str>) {
        glib::ObjectExt::set_property(self, "output-key", &output_key)
    }

    /// If given, specifies the parent interface name or parent connection UUID
    /// the new device will be bound to so that tunneled packets will only be
    /// routed via that interface.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_parent(&self, parent: Option<&str>) {
        glib::ObjectExt::set_property(self, "parent", &parent)
    }

    /// Whether to enable Path MTU Discovery on this tunnel.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "path-mtu-discovery")]
    pub fn set_path_mtu_discovery(&self, path_mtu_discovery: bool) {
        glib::ObjectExt::set_property(self, "path-mtu-discovery", &path_mtu_discovery)
    }

    /// The remote endpoint of the tunnel; the value must contain an IPv4 or IPv6
    /// address.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_remote(&self, remote: Option<&str>) {
        glib::ObjectExt::set_property(self, "remote", &remote)
    }

    /// The type of service (IPv4) or traffic class (IPv6) field to be set on
    /// tunneled packets.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_tos(&self, tos: u32) {
        glib::ObjectExt::set_property(self, "tos", &tos)
    }

    /// The TTL to assign to tunneled packets. 0 is a special value meaning that
    /// packets inherit the TTL value.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_ttl(&self, ttl: u32) {
        glib::ObjectExt::set_property(self, "ttl", &ttl)
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "encapsulation-limit")]
    pub fn connect_encapsulation_limit_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_encapsulation_limit_trampoline<
            F: Fn(&SettingIPTunnel) + 'static,
        >(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::encapsulation-limit\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_encapsulation_limit_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "flags")]
    pub fn connect_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_flags_trampoline<F: Fn(&SettingIPTunnel) + 'static>(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "flow-label")]
    pub fn connect_flow_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_flow_label_trampoline<F: Fn(&SettingIPTunnel) + 'static>(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::flow-label\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_flow_label_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "input-key")]
    pub fn connect_input_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_input_key_trampoline<F: Fn(&SettingIPTunnel) + 'static>(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::input-key\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_input_key_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "local")]
    pub fn connect_local_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_local_trampoline<F: Fn(&SettingIPTunnel) + 'static>(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::local\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_local_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "mode")]
    pub fn connect_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mode_trampoline<F: Fn(&SettingIPTunnel) + 'static>(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "mtu")]
    pub fn connect_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mtu_trampoline<F: Fn(&SettingIPTunnel) + 'static>(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mtu\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mtu_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "output-key")]
    pub fn connect_output_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_output_key_trampoline<F: Fn(&SettingIPTunnel) + 'static>(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::output-key\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_output_key_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "parent")]
    pub fn connect_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<F: Fn(&SettingIPTunnel) + 'static>(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parent_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "path-mtu-discovery")]
    pub fn connect_path_mtu_discovery_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_path_mtu_discovery_trampoline<
            F: Fn(&SettingIPTunnel) + 'static,
        >(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::path-mtu-discovery\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_path_mtu_discovery_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "remote")]
    pub fn connect_remote_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_remote_trampoline<F: Fn(&SettingIPTunnel) + 'static>(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::remote\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_remote_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "tos")]
    pub fn connect_tos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tos_trampoline<F: Fn(&SettingIPTunnel) + 'static>(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tos\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tos_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "ttl")]
    pub fn connect_ttl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ttl_trampoline<F: Fn(&SettingIPTunnel) + 'static>(
            this: *mut ffi::NMSettingIPTunnel,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ttl\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ttl_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
impl Default for SettingIPTunnel {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingIPTunnel {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingIPTunnel")
    }
}
