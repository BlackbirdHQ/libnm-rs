// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::object::Cast;
use glib::object::IsA;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::Value;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib_sys;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use gobject_sys;
use nm_sys;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use std::mem::transmute;
use IPTunnelFlags;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use IPTunnelMode;
use Setting;

glib_wrapper! {
    pub struct SettingIPTunnel(Object<nm_sys::NMSettingIPTunnel, nm_sys::NMSettingIPTunnelClass, SettingIPTunnelClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_ip_tunnel_get_type(),
    }
}

impl SettingIPTunnel {
    /// Creates a new `SettingIPTunnel` object with default values.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the new empty `SettingIPTunnel` object
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn new() -> SettingIPTunnel {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_ip_tunnel_new()).unsafe_cast() }
    }
}

#[cfg(any(feature = "v1_2", feature = "dox"))]
impl Default for SettingIPTunnel {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_IP_TUNNEL: Option<&SettingIPTunnel> = None;

/// Trait containing all `SettingIPTunnel` methods.
///
/// # Implementors
///
/// [`SettingIPTunnel`](struct.SettingIPTunnel.html)
pub trait SettingIPTunnelExt: 'static {
    /// Returns the `SettingIPTunnel:encapsulation-limit` property of the setting.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the encapsulation limit value
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_encapsulation_limit(&self) -> u32;

    fn get_flags(&self) -> IPTunnelFlags;

    /// Returns the `SettingIPTunnel:flow-label` property of the setting.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the flow label value
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_flow_label(&self) -> u32;

    /// Returns the `SettingIPTunnel:input-key` property of the setting.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the input key
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_input_key(&self) -> Option<GString>;

    /// Returns the `SettingIPTunnel:local` property of the setting.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the local endpoint
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_local(&self) -> Option<GString>;

    /// Returns the `SettingIPTunnel:mode` property of the setting.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the tunnel mode
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_mode(&self) -> IPTunnelMode;

    /// Returns the `SettingIPTunnel:mtu` property of the setting.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the MTU
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_mtu(&self) -> u32;

    /// Returns the `SettingIPTunnel:output-key` property of the setting.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the output key
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_output_key(&self) -> Option<GString>;

    /// Returns the `SettingIPTunnel:parent` property of the setting
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the parent device
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_parent(&self) -> Option<GString>;

    /// Returns the `SettingIPTunnel:path-mtu-discovery` property of the setting.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// whether path MTU discovery is enabled
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_path_mtu_discovery(&self) -> bool;

    /// Returns the `SettingIPTunnel:remote` property of the setting.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the remote endpoint
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_remote(&self) -> Option<GString>;

    /// Returns the `SettingIPTunnel:tos` property of the setting.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the TOS value
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_tos(&self) -> u32;

    /// Returns the `SettingIPTunnel:ttl` property of the setting.
    ///
    /// Feature: `v1_2`
    ///
    ///
    /// # Returns
    ///
    /// the Time-to-live value
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_ttl(&self) -> u32;

    /// How many additional levels of encapsulation are permitted to be prepended
    /// to packets. This property applies only to IPv6 tunnels.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_encapsulation_limit(&self, encapsulation_limit: u32);

    /// Tunnel flags. Currently the following values are supported:
    /// `IPTunnelFlags::Ip6IgnEncapLimit`, `IPTunnelFlags::Ip6UseOrigTclass`,
    /// `IPTunnelFlags::Ip6UseOrigFlowlabel`, `IPTunnelFlags::Ip6Mip6Dev`,
    /// `IPTunnelFlags::Ip6RcvDscpCopy`, `IPTunnelFlags::Ip6UseOrigFwmark`.
    /// They are valid only for IPv6 tunnels.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_flags(&self, flags: u32);

    /// The flow label to assign to tunnel packets. This property applies only to
    /// IPv6 tunnels.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_flow_label(&self, flow_label: u32);

    /// The key used for tunnel input packets; the property is valid only for
    /// certain tunnel modes (GRE, IP6GRE). If empty, no key is used.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_input_key(&self, input_key: Option<&str>);

    /// The local endpoint of the tunnel; the value can be empty, otherwise it
    /// must contain an IPv4 or IPv6 address.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_local(&self, local: Option<&str>);

    /// The tunneling mode, for example `IPTunnelMode::Ipip` or
    /// `IPTunnelMode::Gre`.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_mode(&self, mode: u32);

    /// If non-zero, only transmit packets of the specified size or smaller,
    /// breaking larger packets up into multiple fragments.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_mtu(&self, mtu: u32);

    /// The key used for tunnel output packets; the property is valid only for
    /// certain tunnel modes (GRE, IP6GRE). If empty, no key is used.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_output_key(&self, output_key: Option<&str>);

    /// If given, specifies the parent interface name or parent connection UUID
    /// the new device will be bound to so that tunneled packets will only be
    /// routed via that interface.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_parent(&self, parent: Option<&str>);

    /// Whether to enable Path MTU Discovery on this tunnel.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_path_mtu_discovery(&self, path_mtu_discovery: bool);

    /// The remote endpoint of the tunnel; the value must contain an IPv4 or IPv6
    /// address.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_remote(&self, remote: Option<&str>);

    /// The type of service (IPv4) or traffic class (IPv6) field to be set on
    /// tunneled packets.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_tos(&self, tos: u32);

    /// The TTL to assign to tunneled packets. 0 is a special value meaning that
    /// packets inherit the TTL value.
    ///
    /// Feature: `v1_2`
    ///
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_ttl(&self, ttl: u32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_encapsulation_limit_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_flow_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_input_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_local_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_output_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_path_mtu_discovery_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_remote_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_tos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_ttl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingIPTunnel>> SettingIPTunnelExt for O {
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_encapsulation_limit(&self) -> u32 {
        unsafe {
            nm_sys::nm_setting_ip_tunnel_get_encapsulation_limit(self.as_ref().to_glib_none().0)
        }
    }

    fn get_flags(&self) -> IPTunnelFlags {
        unsafe {
            from_glib(nm_sys::nm_setting_ip_tunnel_get_flags(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_flow_label(&self) -> u32 {
        unsafe { nm_sys::nm_setting_ip_tunnel_get_flow_label(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_input_key(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_ip_tunnel_get_input_key(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_local(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_ip_tunnel_get_local(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_mode(&self) -> IPTunnelMode {
        unsafe {
            from_glib(nm_sys::nm_setting_ip_tunnel_get_mode(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_mtu(&self) -> u32 {
        unsafe { nm_sys::nm_setting_ip_tunnel_get_mtu(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_output_key(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_ip_tunnel_get_output_key(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_parent(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_ip_tunnel_get_parent(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_path_mtu_discovery(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_ip_tunnel_get_path_mtu_discovery(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_remote(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_ip_tunnel_get_remote(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_tos(&self) -> u32 {
        unsafe { nm_sys::nm_setting_ip_tunnel_get_tos(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_ttl(&self) -> u32 {
        unsafe { nm_sys::nm_setting_ip_tunnel_get_ttl(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_encapsulation_limit(&self, encapsulation_limit: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"encapsulation-limit\0".as_ptr() as *const _,
                Value::from(&encapsulation_limit).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_flags(&self, flags: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"flags\0".as_ptr() as *const _,
                Value::from(&flags).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_flow_label(&self, flow_label: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"flow-label\0".as_ptr() as *const _,
                Value::from(&flow_label).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_input_key(&self, input_key: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"input-key\0".as_ptr() as *const _,
                Value::from(input_key).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_local(&self, local: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"local\0".as_ptr() as *const _,
                Value::from(local).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_mode(&self, mode: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mode\0".as_ptr() as *const _,
                Value::from(&mode).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_mtu(&self, mtu: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mtu\0".as_ptr() as *const _,
                Value::from(&mtu).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_output_key(&self, output_key: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"output-key\0".as_ptr() as *const _,
                Value::from(output_key).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_parent(&self, parent: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"parent\0".as_ptr() as *const _,
                Value::from(parent).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_path_mtu_discovery(&self, path_mtu_discovery: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"path-mtu-discovery\0".as_ptr() as *const _,
                Value::from(&path_mtu_discovery).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_remote(&self, remote: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"remote\0".as_ptr() as *const _,
                Value::from(remote).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_tos(&self, tos: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"tos\0".as_ptr() as *const _,
                Value::from(&tos).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_ttl(&self, ttl: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"ttl\0".as_ptr() as *const _,
                Value::from(&ttl).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_encapsulation_limit_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_encapsulation_limit_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::encapsulation-limit\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_encapsulation_limit_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_flags_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_flags_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_flow_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_flow_label_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::flow-label\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_flow_label_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_input_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_input_key_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::input-key\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_input_key_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_local_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_local_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::local\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_local_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mode_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mode_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mtu_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mtu\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mtu_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_output_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_output_key_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::output-key\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_output_key_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parent_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_path_mtu_discovery_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_path_mtu_discovery_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::path-mtu-discovery\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_path_mtu_discovery_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_remote_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_remote_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::remote\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_remote_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_tos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tos_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tos\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tos_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_ttl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ttl_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingIPTunnel,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingIPTunnel>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingIPTunnel::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ttl\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ttl_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingIPTunnel {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingIPTunnel")
    }
}
