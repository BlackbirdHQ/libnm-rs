// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT
#![allow(deprecated)]

use crate::{Setting, SettingSecretFlags};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    /// GSM-based Mobile Broadband Settings
    ///
    /// ## Properties
    ///
    ///
    /// #### `apn`
    ///  The GPRS Access Point Name specifying the APN used when establishing a
    /// data session with the GSM-based network. The APN often determines how
    /// the user will be billed for their network usage and whether the user has
    /// access to the Internet or just a provider-specific walled-garden, so it
    /// is important to use the correct APN for the user's mobile broadband plan.
    /// The APN may only be composed of the characters a-z, 0-9, ., and - per GSM
    /// 03.60 Section 14.9.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `auto-config`
    ///  When [`true`], the settings such as APN, username, or password will
    /// default to values that match the network the modem will register
    /// to in the Mobile Broadband Provider database.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `device-id`
    ///  The device unique identifier (as given by the WWAN management service)
    /// which this connection applies to. If given, the connection will only
    /// apply to the specified device.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `home-only`
    ///  When [`true`], only connections to the home network will be allowed.
    /// Connections to roaming networks will not be made.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `mtu`
    ///  If non-zero, only transmit packets of the specified size or smaller,
    /// breaking larger packets up into multiple frames.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `network-id`
    ///  The Network ID (GSM LAI format, ie MCC-MNC) to force specific network
    /// registration. If the Network ID is specified, NetworkManager will
    /// attempt to force the device to register only on the specified network.
    /// This can be used to ensure that the device does not roam when direct
    /// roaming control of the device is not otherwise possible.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `number`
    ///  Legacy setting that used to help establishing PPP data sessions for
    /// GSM-based modems.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `password`
    ///  The password used to authenticate with the network, if required. Many
    /// providers do not require a password, or accept any password. But if a
    /// password is required, it is specified here.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `password-flags`
    ///  Flags indicating how to handle the [`password`][struct@crate::SettingGsm#password] property.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `pin`
    ///  If the SIM is locked with a PIN it must be unlocked before any other
    /// operations are requested. Specify the PIN here to allow operation of the
    /// device.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `pin-flags`
    ///  Flags indicating how to handle the [`pin`][struct@crate::SettingGsm#pin] property.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `sim-id`
    ///  The SIM card unique identifier (as given by the WWAN management service)
    /// which this connection applies to. If given, the connection will apply
    /// to any device also allowed by [`device-id`][struct@crate::SettingGsm#device-id] which contains a
    /// SIM card matching the given identifier.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `sim-operator-id`
    ///  A MCC/MNC string like "310260" or "21601" identifying the specific
    /// mobile network operator which this connection applies to. If given,
    /// the connection will apply to any device also allowed by
    /// [`device-id`][struct@crate::SettingGsm#device-id] and [`sim-id`][struct@crate::SettingGsm#sim-id] which contains a SIM
    /// card provisioned by the given operator.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `username`
    ///  The username used to authenticate with the network, if required. Many
    /// providers do not require a username, or accept any username. But if a
    /// username is required, it is specified here.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Setting</h4></summary>
    ///
    ///
    /// #### `name`
    ///  The setting's name, which uniquely identifies the setting within the
    /// connection. Each setting type has a name unique to that type, for
    /// example "ppp" or "802-11-wireless" or "802-3-ethernet".
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`SettingExt`][trait@crate::prelude::SettingExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMSettingGsm")]
    pub struct SettingGsm(Object<ffi::NMSettingGsm, ffi::NMSettingGsmClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_gsm_get_type(),
    }
}

impl SettingGsm {
    /// Creates a new [`SettingGsm`][crate::SettingGsm] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingGsm`][crate::SettingGsm] object
    #[doc(alias = "nm_setting_gsm_new")]
    pub fn new() -> SettingGsm {
        unsafe { Setting::from_glib_full(ffi::nm_setting_gsm_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the [`apn`][struct@crate::SettingGsm#apn] property of the setting
    #[doc(alias = "nm_setting_gsm_get_apn")]
    #[doc(alias = "get_apn")]
    pub fn apn(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_gsm_get_apn(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`auto-config`][struct@crate::SettingGsm#auto-config] property of the setting
    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "nm_setting_gsm_get_auto_config")]
    #[doc(alias = "get_auto_config")]
    pub fn is_auto_config(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_gsm_get_auto_config(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`device-id`][struct@crate::SettingGsm#device-id] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_gsm_get_device_id")]
    #[doc(alias = "get_device_id")]
    pub fn device_id(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_gsm_get_device_id(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`home-only`][struct@crate::SettingGsm#home-only] property of the setting
    #[doc(alias = "nm_setting_gsm_get_home_only")]
    #[doc(alias = "get_home_only")]
    pub fn is_home_only(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_gsm_get_home_only(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`mtu`][struct@crate::SettingGsm#mtu] property of the setting
    #[cfg(any(feature = "v1_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
    #[doc(alias = "nm_setting_gsm_get_mtu")]
    #[doc(alias = "get_mtu")]
    pub fn mtu(&self) -> u32 {
        unsafe { ffi::nm_setting_gsm_get_mtu(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`network-id`][struct@crate::SettingGsm#network-id] property of the setting
    #[doc(alias = "nm_setting_gsm_get_network_id")]
    #[doc(alias = "get_network_id")]
    pub fn network_id(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_gsm_get_network_id(self.to_glib_none().0)) }
    }

    ///
    /// # Deprecated since 1.16
    ///
    /// User-provided values for this setting are no longer used.
    ///
    /// # Returns
    ///
    /// the [`number`][struct@crate::SettingGsm#number] property of the setting
    #[cfg_attr(feature = "v1_16", deprecated = "Since 1.16")]
    #[allow(deprecated)]
    #[doc(alias = "nm_setting_gsm_get_number")]
    #[doc(alias = "get_number")]
    pub fn number(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_gsm_get_number(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`password`][struct@crate::SettingGsm#password] property of the setting
    #[doc(alias = "nm_setting_gsm_get_password")]
    #[doc(alias = "get_password")]
    pub fn password(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_gsm_get_password(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`SettingSecretFlags`][crate::SettingSecretFlags] pertaining to the [`password`][struct@crate::SettingGsm#password]
    #[doc(alias = "nm_setting_gsm_get_password_flags")]
    #[doc(alias = "get_password_flags")]
    pub fn password_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(ffi::nm_setting_gsm_get_password_flags(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`pin`][struct@crate::SettingGsm#pin] property of the setting
    #[doc(alias = "nm_setting_gsm_get_pin")]
    #[doc(alias = "get_pin")]
    pub fn pin(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_gsm_get_pin(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`SettingSecretFlags`][crate::SettingSecretFlags] pertaining to the [`pin`][struct@crate::SettingGsm#pin]
    #[doc(alias = "nm_setting_gsm_get_pin_flags")]
    #[doc(alias = "get_pin_flags")]
    pub fn pin_flags(&self) -> SettingSecretFlags {
        unsafe { from_glib(ffi::nm_setting_gsm_get_pin_flags(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`sim-id`][struct@crate::SettingGsm#sim-id] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_gsm_get_sim_id")]
    #[doc(alias = "get_sim_id")]
    pub fn sim_id(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_gsm_get_sim_id(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`sim-operator-id`][struct@crate::SettingGsm#sim-operator-id] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_gsm_get_sim_operator_id")]
    #[doc(alias = "get_sim_operator_id")]
    pub fn sim_operator_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_gsm_get_sim_operator_id(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the [`username`][struct@crate::SettingGsm#username] property of the setting
    #[doc(alias = "nm_setting_gsm_get_username")]
    #[doc(alias = "get_username")]
    pub fn username(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_gsm_get_username(self.to_glib_none().0)) }
    }

    /// The GPRS Access Point Name specifying the APN used when establishing a
    /// data session with the GSM-based network. The APN often determines how
    /// the user will be billed for their network usage and whether the user has
    /// access to the Internet or just a provider-specific walled-garden, so it
    /// is important to use the correct APN for the user's mobile broadband plan.
    /// The APN may only be composed of the characters a-z, 0-9, ., and - per GSM
    /// 03.60 Section 14.9.
    pub fn set_apn(&self, apn: Option<&str>) {
        glib::ObjectExt::set_property(self, "apn", &apn)
    }

    /// When [`true`], the settings such as APN, username, or password will
    /// default to values that match the network the modem will register
    /// to in the Mobile Broadband Provider database.
    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "auto-config")]
    pub fn set_auto_config(&self, auto_config: bool) {
        glib::ObjectExt::set_property(self, "auto-config", &auto_config)
    }

    /// The device unique identifier (as given by the WWAN management service)
    /// which this connection applies to. If given, the connection will only
    /// apply to the specified device.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "device-id")]
    pub fn set_device_id(&self, device_id: Option<&str>) {
        glib::ObjectExt::set_property(self, "device-id", &device_id)
    }

    /// When [`true`], only connections to the home network will be allowed.
    /// Connections to roaming networks will not be made.
    #[doc(alias = "home-only")]
    pub fn set_home_only(&self, home_only: bool) {
        glib::ObjectExt::set_property(self, "home-only", &home_only)
    }

    /// If non-zero, only transmit packets of the specified size or smaller,
    /// breaking larger packets up into multiple frames.
    #[cfg(any(feature = "v1_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
    pub fn set_mtu(&self, mtu: u32) {
        glib::ObjectExt::set_property(self, "mtu", &mtu)
    }

    /// The Network ID (GSM LAI format, ie MCC-MNC) to force specific network
    /// registration. If the Network ID is specified, NetworkManager will
    /// attempt to force the device to register only on the specified network.
    /// This can be used to ensure that the device does not roam when direct
    /// roaming control of the device is not otherwise possible.
    #[doc(alias = "network-id")]
    pub fn set_network_id(&self, network_id: Option<&str>) {
        glib::ObjectExt::set_property(self, "network-id", &network_id)
    }

    /// Legacy setting that used to help establishing PPP data sessions for
    /// GSM-based modems.
    ///
    /// # Deprecated since 1.16
    ///
    /// User-provided values for this setting are no longer used.
    #[cfg_attr(feature = "v1_16", deprecated = "Since 1.16")]
    pub fn set_number(&self, number: Option<&str>) {
        glib::ObjectExt::set_property(self, "number", &number)
    }

    /// The password used to authenticate with the network, if required. Many
    /// providers do not require a password, or accept any password. But if a
    /// password is required, it is specified here.
    pub fn set_password(&self, password: Option<&str>) {
        glib::ObjectExt::set_property(self, "password", &password)
    }

    /// Flags indicating how to handle the [`password`][struct@crate::SettingGsm#password] property.
    #[doc(alias = "password-flags")]
    pub fn set_password_flags(&self, password_flags: SettingSecretFlags) {
        glib::ObjectExt::set_property(self, "password-flags", &password_flags)
    }

    /// If the SIM is locked with a PIN it must be unlocked before any other
    /// operations are requested. Specify the PIN here to allow operation of the
    /// device.
    pub fn set_pin(&self, pin: Option<&str>) {
        glib::ObjectExt::set_property(self, "pin", &pin)
    }

    /// Flags indicating how to handle the [`pin`][struct@crate::SettingGsm#pin] property.
    #[doc(alias = "pin-flags")]
    pub fn set_pin_flags(&self, pin_flags: SettingSecretFlags) {
        glib::ObjectExt::set_property(self, "pin-flags", &pin_flags)
    }

    /// The SIM card unique identifier (as given by the WWAN management service)
    /// which this connection applies to. If given, the connection will apply
    /// to any device also allowed by [`device-id`][struct@crate::SettingGsm#device-id] which contains a
    /// SIM card matching the given identifier.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "sim-id")]
    pub fn set_sim_id(&self, sim_id: Option<&str>) {
        glib::ObjectExt::set_property(self, "sim-id", &sim_id)
    }

    /// A MCC/MNC string like "310260" or "21601" identifying the specific
    /// mobile network operator which this connection applies to. If given,
    /// the connection will apply to any device also allowed by
    /// [`device-id`][struct@crate::SettingGsm#device-id] and [`sim-id`][struct@crate::SettingGsm#sim-id] which contains a SIM
    /// card provisioned by the given operator.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "sim-operator-id")]
    pub fn set_sim_operator_id(&self, sim_operator_id: Option<&str>) {
        glib::ObjectExt::set_property(self, "sim-operator-id", &sim_operator_id)
    }

    /// The username used to authenticate with the network, if required. Many
    /// providers do not require a username, or accept any username. But if a
    /// username is required, it is specified here.
    pub fn set_username(&self, username: Option<&str>) {
        glib::ObjectExt::set_property(self, "username", &username)
    }

    #[doc(alias = "apn")]
    pub fn connect_apn_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_apn_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::apn\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_apn_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "auto-config")]
    pub fn connect_auto_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_auto_config_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::auto-config\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_auto_config_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "device-id")]
    pub fn connect_device_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_device_id_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::device-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_device_id_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "home-only")]
    pub fn connect_home_only_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_home_only_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::home-only\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_home_only_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
    #[doc(alias = "mtu")]
    pub fn connect_mtu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mtu_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mtu\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mtu_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "network-id")]
    pub fn connect_network_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_network_id_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::network-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_network_id_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg_attr(feature = "v1_16", deprecated = "Since 1.16")]
    #[doc(alias = "number")]
    pub fn connect_number_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_number_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::number\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_number_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "password")]
    pub fn connect_password_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_password_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::password\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_password_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "password-flags")]
    pub fn connect_password_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_password_flags_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::password-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_password_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "pin")]
    pub fn connect_pin_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pin_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::pin\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_pin_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "pin-flags")]
    pub fn connect_pin_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pin_flags_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::pin-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_pin_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "sim-id")]
    pub fn connect_sim_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sim_id_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::sim-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_sim_id_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "sim-operator-id")]
    pub fn connect_sim_operator_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sim_operator_id_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::sim-operator-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_sim_operator_id_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "username")]
    pub fn connect_username_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_username_trampoline<F: Fn(&SettingGsm) + 'static>(
            this: *mut ffi::NMSettingGsm,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::username\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_username_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for SettingGsm {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingGsm {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingGsm")
    }
}
