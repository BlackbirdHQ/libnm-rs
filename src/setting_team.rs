// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::Value;
use glib_sys;
use gobject_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use crate::Setting;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use crate::TeamLinkWatcher;

glib_wrapper! {
    pub struct SettingTeam(Object<nm_sys::NMSettingTeam, nm_sys::NMSettingTeamClass, SettingTeamClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_team_get_type(),
    }
}

impl SettingTeam {
    /// Creates a new `SettingTeam` object with default values.
    ///
    /// # Returns
    ///
    /// the new empty `SettingTeam` object
    pub fn new() -> SettingTeam {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_team_new()).unsafe_cast() }
    }
}

impl Default for SettingTeam {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_TEAM: Option<&SettingTeam> = None;

/// Trait containing all `SettingTeam` methods.
///
/// # Implementors
///
/// [`SettingTeam`](struct.SettingTeam.html)
pub trait SettingTeamExt: 'static {
    /// Appends a new link watcher to the setting.
    ///
    /// Feature: `v1_12`
    ///
    /// ## `link_watcher`
    /// the link watcher to add
    ///
    /// # Returns
    ///
    /// `true` if the link watcher is added; `false` if an identical link
    /// watcher was already there.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn add_link_watcher(&self, link_watcher: &TeamLinkWatcher) -> bool;

    /// Adds a new txhash element to the setting.
    ///
    /// Feature: `v1_12`
    ///
    /// ## `txhash`
    /// the element to add to txhash
    ///
    /// # Returns
    ///
    /// `true` if the txhash element was added; `false` if the element
    /// was already knnown.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn add_runner_tx_hash(&self, txhash: &str) -> bool;

    /// Removes all configured link watchers.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn clear_link_watchers(&self);

    ///
    /// # Returns
    ///
    /// the `SettingTeam:config` property of the setting
    fn get_config(&self) -> Option<GString>;

    ///
    /// Feature: `v1_12`
    ///
    /// ## `idx`
    /// index number of the link watcher to return
    ///
    /// # Returns
    ///
    /// the link watcher at index `idx`.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_link_watcher(&self, idx: u32) -> Option<TeamLinkWatcher>;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:mcast-rejoin-count` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_mcast_rejoin_count(&self) -> i32;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:mcast-rejoin-interval` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_mcast_rejoin_interval(&self) -> i32;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:notify-peers-count` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_notify_peers_count(&self) -> i32;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:notify-peers-interval` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_notify_peers_interval(&self) -> i32;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the number of configured link watchers
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_num_link_watchers(&self) -> u32;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the number of elements in txhash
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_num_runner_tx_hash(&self) -> u32;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:runner` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner(&self) -> Option<GString>;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:runner_active` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_active(&self) -> bool;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:runner-agg-select-policy` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_agg_select_policy(&self) -> Option<GString>;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:runner-fast-rate` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_fast_rate(&self) -> bool;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:runner-hwaddr-policy` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_hwaddr_policy(&self) -> Option<GString>;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:runner-min-ports` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_min_ports(&self) -> i32;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:runner-sys-prio` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_sys_prio(&self) -> i32;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:runner-tx-balancer` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_tx_balancer(&self) -> Option<GString>;

    ///
    /// Feature: `v1_12`
    ///
    ///
    /// # Returns
    ///
    /// the #`SettingTeam:runner-tx-balancer_interval` property of the setting
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_tx_balancer_interval(&self) -> i32;

    ///
    /// Feature: `v1_12`
    ///
    /// ## `idx`
    /// index number of the txhash element to return
    ///
    /// # Returns
    ///
    /// the txhash element at index `idx`
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_tx_hash(&self, idx: u32) -> Option<GString>;

    /// Removes the link watcher at index `idx`.
    ///
    /// Feature: `v1_12`
    ///
    /// ## `idx`
    /// index number of the link watcher to remove
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_link_watcher(&self, idx: u32);

    /// Removes the link watcher entry matching link_watcher.
    ///
    /// Feature: `v1_12`
    ///
    /// ## `link_watcher`
    /// the link watcher to remove
    ///
    /// # Returns
    ///
    /// `true` if the link watcher was found and removed, `false` otherwise.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_link_watcher_by_value(&self, link_watcher: &TeamLinkWatcher) -> bool;

    /// Removes the txhash element at index `idx`.
    ///
    /// Feature: `v1_12`
    ///
    /// ## `idx`
    /// index number of the element to remove from txhash
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_runner_tx_hash(&self, idx: u32);

    /// Removes the txhash element `txhash`
    ///
    /// Feature: `v1_12`
    ///
    /// ## `txhash`
    /// the txhash element to remove
    ///
    /// # Returns
    ///
    /// `true` if the txhash element was found and removed; `false` if it was not.
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_runner_tx_hash_by_value(&self, txhash: &str) -> bool;

    /// The JSON configuration for the team network interface. The property
    /// should contain raw JSON configuration data suitable for teamd, because
    /// the value is passed directly to teamd. If not specified, the default
    /// configuration is used. See man teamd.conf for the format details.
    fn set_property_config(&self, config: Option<&str>);

    /// Corresponds to the teamd mcast_rejoin.count.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_mcast_rejoin_count(&self, mcast_rejoin_count: i32);

    /// Corresponds to the teamd mcast_rejoin.interval.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_mcast_rejoin_interval(&self, mcast_rejoin_interval: i32);

    /// Corresponds to the teamd notify_peers.count.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_notify_peers_count(&self, notify_peers_count: i32);

    /// Corresponds to the teamd notify_peers.interval.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_notify_peers_interval(&self, notify_peers_interval: i32);

    /// Corresponds to the teamd runner.name.
    /// Permitted values are: "roundrobin", "broadcast", "activebackup",
    /// "loadbalance", "lacp", "random".
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner(&self, runner: Option<&str>);

    /// Corresponds to the teamd runner.active.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_active(&self, runner_active: bool);

    /// Corresponds to the teamd runner.agg_select_policy.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_agg_select_policy(&self, runner_agg_select_policy: Option<&str>);

    /// Corresponds to the teamd runner.fast_rate.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_fast_rate(&self, runner_fast_rate: bool);

    /// Corresponds to the teamd runner.hwaddr_policy.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_hwaddr_policy(&self, runner_hwaddr_policy: Option<&str>);

    /// Corresponds to the teamd runner.min_ports.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_min_ports(&self, runner_min_ports: i32);

    /// Corresponds to the teamd runner.sys_prio.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_sys_prio(&self, runner_sys_prio: i32);

    /// Corresponds to the teamd runner.tx_balancer.name.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_tx_balancer(&self, runner_tx_balancer: Option<&str>);

    /// Corresponds to the teamd runner.tx_balancer.interval.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_tx_balancer_interval(&self, runner_tx_balancer_interval: i32);

    /// Corresponds to the teamd runner.tx_hash.
    ///
    /// Feature: `v1_12`
    ///
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_tx_hash(&self, runner_tx_hash: &[&str]);

    fn connect_property_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_mcast_rejoin_count_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_mcast_rejoin_interval_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_notify_peers_count_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_notify_peers_interval_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_active_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_agg_select_policy_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_fast_rate_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_hwaddr_policy_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_min_ports_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_sys_prio_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_tx_balancer_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_tx_balancer_interval_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_tx_hash_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<SettingTeam>> SettingTeamExt for O {
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn add_link_watcher(&self, link_watcher: &TeamLinkWatcher) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_team_add_link_watcher(
                self.as_ref().to_glib_none().0,
                link_watcher.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn add_runner_tx_hash(&self, txhash: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_team_add_runner_tx_hash(
                self.as_ref().to_glib_none().0,
                txhash.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn clear_link_watchers(&self) {
        unsafe {
            nm_sys::nm_setting_team_clear_link_watchers(self.as_ref().to_glib_none().0);
        }
    }

    fn get_config(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_team_get_config(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_link_watcher(&self, idx: u32) -> Option<TeamLinkWatcher> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_team_get_link_watcher(
                self.as_ref().to_glib_none().0,
                idx,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_mcast_rejoin_count(&self) -> i32 {
        unsafe { nm_sys::nm_setting_team_get_mcast_rejoin_count(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_mcast_rejoin_interval(&self) -> i32 {
        unsafe { nm_sys::nm_setting_team_get_mcast_rejoin_interval(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_notify_peers_count(&self) -> i32 {
        unsafe { nm_sys::nm_setting_team_get_notify_peers_count(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_notify_peers_interval(&self) -> i32 {
        unsafe { nm_sys::nm_setting_team_get_notify_peers_interval(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_num_link_watchers(&self) -> u32 {
        unsafe { nm_sys::nm_setting_team_get_num_link_watchers(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_num_runner_tx_hash(&self) -> u32 {
        unsafe { nm_sys::nm_setting_team_get_num_runner_tx_hash(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_team_get_runner(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_active(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_team_get_runner_active(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_agg_select_policy(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_team_get_runner_agg_select_policy(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_fast_rate(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_team_get_runner_fast_rate(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_hwaddr_policy(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_team_get_runner_hwaddr_policy(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_min_ports(&self) -> i32 {
        unsafe { nm_sys::nm_setting_team_get_runner_min_ports(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_sys_prio(&self) -> i32 {
        unsafe { nm_sys::nm_setting_team_get_runner_sys_prio(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_tx_balancer(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_team_get_runner_tx_balancer(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_tx_balancer_interval(&self) -> i32 {
        unsafe {
            nm_sys::nm_setting_team_get_runner_tx_balancer_interval(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_runner_tx_hash(&self, idx: u32) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_team_get_runner_tx_hash(
                self.as_ref().to_glib_none().0,
                idx,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_link_watcher(&self, idx: u32) {
        unsafe {
            nm_sys::nm_setting_team_remove_link_watcher(self.as_ref().to_glib_none().0, idx);
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_link_watcher_by_value(&self, link_watcher: &TeamLinkWatcher) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_team_remove_link_watcher_by_value(
                self.as_ref().to_glib_none().0,
                link_watcher.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_runner_tx_hash(&self, idx: u32) {
        unsafe {
            nm_sys::nm_setting_team_remove_runner_tx_hash(self.as_ref().to_glib_none().0, idx);
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn remove_runner_tx_hash_by_value(&self, txhash: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_team_remove_runner_tx_hash_by_value(
                self.as_ref().to_glib_none().0,
                txhash.to_glib_none().0,
            ))
        }
    }

    fn set_property_config(&self, config: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"config\0".as_ptr() as *const _,
                Value::from(config).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_mcast_rejoin_count(&self, mcast_rejoin_count: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mcast-rejoin-count\0".as_ptr() as *const _,
                Value::from(&mcast_rejoin_count).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_mcast_rejoin_interval(&self, mcast_rejoin_interval: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mcast-rejoin-interval\0".as_ptr() as *const _,
                Value::from(&mcast_rejoin_interval).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_notify_peers_count(&self, notify_peers_count: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"notify-peers-count\0".as_ptr() as *const _,
                Value::from(&notify_peers_count).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_notify_peers_interval(&self, notify_peers_interval: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"notify-peers-interval\0".as_ptr() as *const _,
                Value::from(&notify_peers_interval).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner(&self, runner: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"runner\0".as_ptr() as *const _,
                Value::from(runner).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_active(&self, runner_active: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"runner-active\0".as_ptr() as *const _,
                Value::from(&runner_active).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_agg_select_policy(&self, runner_agg_select_policy: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"runner-agg-select-policy\0".as_ptr() as *const _,
                Value::from(runner_agg_select_policy).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_fast_rate(&self, runner_fast_rate: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"runner-fast-rate\0".as_ptr() as *const _,
                Value::from(&runner_fast_rate).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_hwaddr_policy(&self, runner_hwaddr_policy: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"runner-hwaddr-policy\0".as_ptr() as *const _,
                Value::from(runner_hwaddr_policy).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_min_ports(&self, runner_min_ports: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"runner-min-ports\0".as_ptr() as *const _,
                Value::from(&runner_min_ports).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_sys_prio(&self, runner_sys_prio: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"runner-sys-prio\0".as_ptr() as *const _,
                Value::from(&runner_sys_prio).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_tx_balancer(&self, runner_tx_balancer: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"runner-tx-balancer\0".as_ptr() as *const _,
                Value::from(runner_tx_balancer).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_tx_balancer_interval(&self, runner_tx_balancer_interval: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"runner-tx-balancer-interval\0".as_ptr() as *const _,
                Value::from(&runner_tx_balancer_interval).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_runner_tx_hash(&self, runner_tx_hash: &[&str]) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"runner-tx-hash\0".as_ptr() as *const _,
                Value::from(runner_tx_hash).to_glib_none().0,
            );
        }
    }

    fn connect_property_config_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_config_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::config\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_config_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_mcast_rejoin_count_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_mcast_rejoin_count_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mcast-rejoin-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mcast_rejoin_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_mcast_rejoin_interval_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_mcast_rejoin_interval_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mcast-rejoin-interval\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_mcast_rejoin_interval_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_notify_peers_count_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_notify_peers_count_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::notify-peers-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_notify_peers_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_notify_peers_interval_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_notify_peers_interval_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::notify-peers-interval\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_notify_peers_interval_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_runner_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::runner\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_runner_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_active_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_runner_active_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::runner-active\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_runner_active_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_agg_select_policy_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_runner_agg_select_policy_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::runner-agg-select-policy\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_runner_agg_select_policy_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_fast_rate_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_runner_fast_rate_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::runner-fast-rate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_runner_fast_rate_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_hwaddr_policy_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_runner_hwaddr_policy_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::runner-hwaddr-policy\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_runner_hwaddr_policy_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_min_ports_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_runner_min_ports_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::runner-min-ports\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_runner_min_ports_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_sys_prio_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_runner_sys_prio_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::runner-sys-prio\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_runner_sys_prio_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_tx_balancer_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_runner_tx_balancer_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::runner-tx-balancer\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_runner_tx_balancer_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_tx_balancer_interval_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_runner_tx_balancer_interval_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::runner-tx-balancer-interval\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_runner_tx_balancer_interval_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_runner_tx_hash_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_runner_tx_hash_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingTeam,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingTeam>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingTeam::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::runner-tx-hash\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_runner_tx_hash_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingTeam {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingTeam")
    }
}
