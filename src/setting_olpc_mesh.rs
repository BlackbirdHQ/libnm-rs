// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMSettingOlpcMesh")]
    pub struct SettingOlpcMesh(Object<ffi::NMSettingOlpcMesh, ffi::NMSettingOlpcMeshClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_olpc_mesh_get_type(),
    }
}

impl SettingOlpcMesh {
    /// Creates a new [`SettingOlpcMesh`][crate::SettingOlpcMesh] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingOlpcMesh`][crate::SettingOlpcMesh] object
    #[doc(alias = "nm_setting_olpc_mesh_new")]
    pub fn new() -> SettingOlpcMesh {
        unsafe { Setting::from_glib_full(ffi::nm_setting_olpc_mesh_new()).unsafe_cast() }
    }

    #[doc(alias = "nm_setting_olpc_mesh_get_channel")]
    #[doc(alias = "get_channel")]
    pub fn channel(&self) -> u32 {
        unsafe { ffi::nm_setting_olpc_mesh_get_channel(self.to_glib_none().0) }
    }

    #[doc(alias = "nm_setting_olpc_mesh_get_dhcp_anycast_address")]
    #[doc(alias = "get_dhcp_anycast_address")]
    pub fn dhcp_anycast_address(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_olpc_mesh_get_dhcp_anycast_address(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "nm_setting_olpc_mesh_get_ssid")]
    #[doc(alias = "get_ssid")]
    pub fn ssid(&self) -> Option<glib::Bytes> {
        unsafe { from_glib_none(ffi::nm_setting_olpc_mesh_get_ssid(self.to_glib_none().0)) }
    }

    /// Channel on which the mesh network to join is located.
    pub fn set_channel(&self, channel: u32) {
        glib::ObjectExt::set_property(self, "channel", &channel)
    }

    /// Anycast DHCP MAC address used when requesting an IP address via DHCP.
    /// The specific anycast address used determines which DHCP server class
    /// answers the request.
    ///
    /// This is currently only implemented by dhclient DHCP plugin.
    #[doc(alias = "dhcp-anycast-address")]
    pub fn set_dhcp_anycast_address(&self, dhcp_anycast_address: Option<&str>) {
        glib::ObjectExt::set_property(self, "dhcp-anycast-address", &dhcp_anycast_address)
    }

    /// SSID of the mesh network to join.
    pub fn set_ssid(&self, ssid: Option<&glib::Bytes>) {
        glib::ObjectExt::set_property(self, "ssid", &ssid)
    }

    #[doc(alias = "channel")]
    pub fn connect_channel_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_channel_trampoline<F: Fn(&SettingOlpcMesh) + 'static>(
            this: *mut ffi::NMSettingOlpcMesh,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::channel\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_channel_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "dhcp-anycast-address")]
    pub fn connect_dhcp_anycast_address_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_dhcp_anycast_address_trampoline<
            F: Fn(&SettingOlpcMesh) + 'static,
        >(
            this: *mut ffi::NMSettingOlpcMesh,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dhcp-anycast-address\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dhcp_anycast_address_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "ssid")]
    pub fn connect_ssid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ssid_trampoline<F: Fn(&SettingOlpcMesh) + 'static>(
            this: *mut ffi::NMSettingOlpcMesh,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ssid\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ssid_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for SettingOlpcMesh {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingOlpcMesh {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingOlpcMesh")
    }
}
