// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Connection;
use glib::{prelude::*, translate::*};
use std::{fmt, ptr};

glib::wrapper! {
    ///
    ///
    /// # Implements
    ///
    /// [`trait@glib::ObjectExt`], [`ConnectionExt`][trait@crate::prelude::ConnectionExt]
    #[doc(alias = "NMSimpleConnection")]
    pub struct SimpleConnection(Object<ffi::NMSimpleConnection, ffi::NMSimpleConnectionClass>) @implements Connection;

    match fn {
        type_ => || ffi::nm_simple_connection_get_type(),
    }
}

impl SimpleConnection {
    /// Creates a new [`SimpleConnection`][crate::SimpleConnection] object with no [`Setting`][crate::Setting] objects.
    ///
    /// # Returns
    ///
    /// the new empty [`Connection`][crate::Connection] object
    #[doc(alias = "nm_simple_connection_new")]
    pub fn new() -> SimpleConnection {
        unsafe { Connection::from_glib_full(ffi::nm_simple_connection_new()).unsafe_cast() }
    }

    /// Clones an [`Connection`][crate::Connection] as an [`SimpleConnection`][crate::SimpleConnection].
    /// ## `connection`
    /// the [`Connection`][crate::Connection] to clone
    ///
    /// # Returns
    ///
    /// a new [`Connection`][crate::Connection] containing the same settings
    /// and properties as the source [`Connection`][crate::Connection]
    #[doc(alias = "nm_simple_connection_new_clone")]
    pub fn new_clone(connection: &impl IsA<Connection>) -> Option<Connection> {
        unsafe {
            from_glib_full(ffi::nm_simple_connection_new_clone(
                connection.as_ref().to_glib_none().0,
            ))
        }
    }

    /// Creates a new [`SimpleConnection`][crate::SimpleConnection] from a hash table describing the
    /// connection and normalize the connection. See [`ConnectionExt::to_dbus()`][crate::prelude::ConnectionExt::to_dbus()] for a
    /// description of the expected hash table.
    /// ## `dict`
    /// a [`glib::Variant`][struct@crate::glib::Variant] of type `NM_VARIANT_TYPE_CONNECTION` describing the connection
    ///
    /// # Returns
    ///
    /// the new [`SimpleConnection`][crate::SimpleConnection] object, populated with
    /// settings created from the values in the hash table, or [`None`] if the
    /// connection failed to normalize.
    #[doc(alias = "nm_simple_connection_new_from_dbus")]
    pub fn new_from_dbus(dict: &glib::Variant) -> Result<Connection, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_simple_connection_new_from_dbus(dict.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl Default for SimpleConnection {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SimpleConnection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SimpleConnection")
    }
}
