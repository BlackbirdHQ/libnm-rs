// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::IsA;
use glib::translate::*;
use nm_sys;
use std::fmt;
use std::ptr;
use Connection;

glib_wrapper! {
    pub struct SimpleConnection(Object<nm_sys::NMSimpleConnection, nm_sys::NMSimpleConnectionClass, SimpleConnectionClass>) @implements Connection;

    match fn {
        get_type => || nm_sys::nm_simple_connection_get_type(),
    }
}

impl SimpleConnection {
    pub fn new() -> Option<Connection> {
        unsafe { from_glib_full(nm_sys::nm_simple_connection_new()) }
    }

    pub fn new_clone<P: IsA<Connection>>(connection: &P) -> Option<Connection> {
        unsafe {
            from_glib_full(nm_sys::nm_simple_connection_new_clone(
                connection.as_ref().to_glib_none().0,
            ))
        }
    }

    pub fn new_from_dbus(dict: &glib::Variant) -> Result<Connection, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_simple_connection_new_from_dbus(dict.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

pub const NONE_SIMPLE_CONNECTION: Option<&SimpleConnection> = None;

impl fmt::Display for SimpleConnection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SimpleConnection")
    }
}
