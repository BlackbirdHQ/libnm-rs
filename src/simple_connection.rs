// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use nm_sys;
use std::fmt;
use std::ptr;
use crate::Connection;

glib_wrapper! {
    pub struct SimpleConnection(Object<nm_sys::NMSimpleConnection, nm_sys::NMSimpleConnectionClass, SimpleConnectionClass>) @implements Connection;

    match fn {
        get_type => || nm_sys::nm_simple_connection_get_type(),
    }
}

impl SimpleConnection {
    /// Creates a new `SimpleConnection` object with no `Setting` objects.
    ///
    /// # Returns
    ///
    /// the new empty `Connection` object
    pub fn new() -> SimpleConnection {
        unsafe { Connection::from_glib_full(nm_sys::nm_simple_connection_new()).unsafe_cast() }
    }

    /// Clones an `Connection` as an `SimpleConnection`.
    /// ## `connection`
    /// the `Connection` to clone
    ///
    /// # Returns
    ///
    /// a new `Connection` containing the same settings
    /// and properties as the source `Connection`
    pub fn new_clone<P: IsA<Connection>>(connection: &P) -> Option<Connection> {
        unsafe {
            from_glib_full(nm_sys::nm_simple_connection_new_clone(
                connection.as_ref().to_glib_none().0,
            ))
        }
    }

    /// Creates a new `SimpleConnection` from a hash table describing the
    /// connection and normalize the connection. See `Connection::to_dbus` for a
    /// description of the expected hash table.
    /// ## `dict`
    /// a `glib::Variant` of type `NM_VARIANT_TYPE_CONNECTION` describing the connection
    ///
    /// # Returns
    ///
    /// the new `SimpleConnection` object, populated with
    /// settings created from the values in the hash table, or `None` if the
    /// connection failed to normalize.
    pub fn new_from_dbus(dict: &glib::Variant) -> Result<Connection, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = nm_sys::nm_simple_connection_new_from_dbus(dict.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl Default for SimpleConnection {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SIMPLE_CONNECTION: Option<&SimpleConnection> = None;

impl fmt::Display for SimpleConnection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SimpleConnection")
    }
}
