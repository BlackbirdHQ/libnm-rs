// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
use crate::Ternary;
use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMSettingHostname")]
    pub struct SettingHostname(Object<ffi::NMSettingHostname, ffi::NMSettingHostnameClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_hostname_get_type(),
    }
}

impl SettingHostname {
    /// Creates a new [`SettingHostname`][crate::SettingHostname] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingHostname`][crate::SettingHostname] object
    #[doc(alias = "nm_setting_hostname_new")]
    pub fn new() -> SettingHostname {
        unsafe { Setting::from_glib_full(ffi::nm_setting_hostname_new()).unsafe_cast() }
    }

    /// Returns the value contained in the `property::SettingHostname::from-dhcp`
    /// property.
    ///
    /// # Returns
    ///
    /// the 'from-dhcp' property value
    #[doc(alias = "nm_setting_hostname_get_from_dhcp")]
    #[doc(alias = "get_from_dhcp")]
    pub fn from_dhcp(&self) -> Ternary {
        unsafe {
            from_glib(ffi::nm_setting_hostname_get_from_dhcp(
                self.to_glib_none().0,
            ))
        }
    }

    /// Returns the value contained in the `property::SettingHostname::from-dns-lookup`
    /// property.
    ///
    /// # Returns
    ///
    /// the 'from-dns-lookup' property value
    #[doc(alias = "nm_setting_hostname_get_from_dns_lookup")]
    #[doc(alias = "get_from_dns_lookup")]
    pub fn from_dns_lookup(&self) -> Ternary {
        unsafe {
            from_glib(ffi::nm_setting_hostname_get_from_dns_lookup(
                self.to_glib_none().0,
            ))
        }
    }

    /// Returns the value contained in the `property::SettingHostname::only-from-default`
    /// property.
    ///
    /// # Returns
    ///
    /// the 'only-from-default' property value
    #[doc(alias = "nm_setting_hostname_get_only_from_default")]
    #[doc(alias = "get_only_from_default")]
    pub fn only_from_default(&self) -> Ternary {
        unsafe {
            from_glib(ffi::nm_setting_hostname_get_only_from_default(
                self.to_glib_none().0,
            ))
        }
    }

    /// Returns the value contained in the `property::SettingHostname::priority`
    /// property.
    ///
    /// # Returns
    ///
    /// the 'priority' property value
    #[doc(alias = "nm_setting_hostname_get_priority")]
    #[doc(alias = "get_priority")]
    pub fn priority(&self) -> i32 {
        unsafe { ffi::nm_setting_hostname_get_priority(self.to_glib_none().0) }
    }

    /// Whether the system hostname can be determined from DHCP on
    /// this connection.
    ///
    /// When set to [`Ternary::Default`][crate::Ternary::Default], the value from global configuration
    /// is used. If the property doesn't have a value in the global
    /// configuration, NetworkManager assumes the value to be [`Ternary::True`][crate::Ternary::True].
    #[cfg(any(feature = "v1_30", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_30")))]
    #[doc(alias = "from-dhcp")]
    pub fn set_from_dhcp(&self, from_dhcp: Ternary) {
        glib::ObjectExt::set_property(self, "from-dhcp", &from_dhcp)
    }

    /// Whether the system hostname can be determined from reverse
    /// DNS lookup of addresses on this device.
    ///
    /// When set to [`Ternary::Default`][crate::Ternary::Default], the value from global configuration
    /// is used. If the property doesn't have a value in the global
    /// configuration, NetworkManager assumes the value to be [`Ternary::True`][crate::Ternary::True].
    #[cfg(any(feature = "v1_30", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_30")))]
    #[doc(alias = "from-dns-lookup")]
    pub fn set_from_dns_lookup(&self, from_dns_lookup: Ternary) {
        glib::ObjectExt::set_property(self, "from-dns-lookup", &from_dns_lookup)
    }

    /// If set to [`Ternary::True`][crate::Ternary::True], NetworkManager attempts to get
    /// the hostname via DHCPv4/DHCPv6 or reverse DNS lookup on this
    /// device only when the device has the default route for the given
    /// address family (IPv4/IPv6).
    ///
    /// If set to [`Ternary::False`][crate::Ternary::False], the hostname can be set from this
    /// device even if it doesn't have the default route.
    ///
    /// When set to [`Ternary::Default`][crate::Ternary::Default], the value from global configuration
    /// is used. If the property doesn't have a value in the global
    /// configuration, NetworkManager assumes the value to be [`Ternary::False`][crate::Ternary::False].
    #[cfg(any(feature = "v1_30", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_30")))]
    #[doc(alias = "only-from-default")]
    pub fn set_only_from_default(&self, only_from_default: Ternary) {
        glib::ObjectExt::set_property(self, "only-from-default", &only_from_default)
    }

    /// The relative priority of this connection to determine the
    /// system hostname. A lower numerical value is better (higher
    /// priority). A connection with higher priority is considered
    /// before connections with lower priority.
    ///
    /// If the value is zero, it can be overridden by a global value
    /// from NetworkManager configuration. If the property doesn't have
    /// a value in the global configuration, the value is assumed to be
    /// 100.
    ///
    /// Negative values have the special effect of excluding other
    /// connections with a greater numerical priority value; so in
    /// presence of at least one negative priority, only connections
    /// with the lowest priority value will be used to determine the
    /// hostname.
    #[cfg(any(feature = "v1_30", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_30")))]
    pub fn set_priority(&self, priority: i32) {
        glib::ObjectExt::set_property(self, "priority", &priority)
    }

    #[cfg(any(feature = "v1_30", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_30")))]
    #[doc(alias = "from-dhcp")]
    pub fn connect_from_dhcp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_from_dhcp_trampoline<F: Fn(&SettingHostname) + 'static>(
            this: *mut ffi::NMSettingHostname,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::from-dhcp\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_from_dhcp_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_30", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_30")))]
    #[doc(alias = "from-dns-lookup")]
    pub fn connect_from_dns_lookup_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_from_dns_lookup_trampoline<
            F: Fn(&SettingHostname) + 'static,
        >(
            this: *mut ffi::NMSettingHostname,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::from-dns-lookup\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_from_dns_lookup_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_30", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_30")))]
    #[doc(alias = "only-from-default")]
    pub fn connect_only_from_default_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_only_from_default_trampoline<
            F: Fn(&SettingHostname) + 'static,
        >(
            this: *mut ffi::NMSettingHostname,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::only-from-default\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_only_from_default_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_30", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_30")))]
    #[doc(alias = "priority")]
    pub fn connect_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_trampoline<F: Fn(&SettingHostname) + 'static>(
            this: *mut ffi::NMSettingHostname,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::priority\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_priority_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_30", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_30")))]
impl Default for SettingHostname {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingHostname {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingHostname")
    }
}
