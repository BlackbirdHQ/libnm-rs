// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

#[cfg(any(feature = "v1_18", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
use crate::BridgeVlan;
use crate::Setting;
use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMSettingBridgePort")]
    pub struct SettingBridgePort(Object<ffi::NMSettingBridgePort, ffi::NMSettingBridgePortClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_bridge_port_get_type(),
    }
}

impl SettingBridgePort {
    /// Creates a new [`SettingBridgePort`][crate::SettingBridgePort] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingBridgePort`][crate::SettingBridgePort] object
    #[doc(alias = "nm_setting_bridge_port_new")]
    pub fn new() -> SettingBridgePort {
        unsafe { Setting::from_glib_full(ffi::nm_setting_bridge_port_new()).unsafe_cast() }
    }

    /// Appends a new vlan and associated information to the setting. The
    /// given vlan gets sealed and a reference to it is added.
    /// ## `vlan`
    /// the vlan to add
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_port_add_vlan")]
    pub fn add_vlan(&self, vlan: &BridgeVlan) {
        unsafe {
            ffi::nm_setting_bridge_port_add_vlan(self.to_glib_none().0, vlan.to_glib_none().0);
        }
    }

    /// Removes all configured VLANs.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_port_clear_vlans")]
    pub fn clear_vlans(&self) {
        unsafe {
            ffi::nm_setting_bridge_port_clear_vlans(self.to_glib_none().0);
        }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingBridgePort::hairpin-mode` property of the setting
    #[doc(alias = "nm_setting_bridge_port_get_hairpin_mode")]
    #[doc(alias = "get_hairpin_mode")]
    pub fn is_hairpin_mode(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_bridge_port_get_hairpin_mode(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the number of VLANs
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_port_get_num_vlans")]
    #[doc(alias = "get_num_vlans")]
    pub fn num_vlans(&self) -> u32 {
        unsafe { ffi::nm_setting_bridge_port_get_num_vlans(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingBridgePort::path-cost` property of the setting
    #[doc(alias = "nm_setting_bridge_port_get_path_cost")]
    #[doc(alias = "get_path_cost")]
    pub fn path_cost(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_port_get_path_cost(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingBridgePort::priority` property of the setting
    #[doc(alias = "nm_setting_bridge_port_get_priority")]
    #[doc(alias = "get_priority")]
    pub fn priority(&self) -> u16 {
        unsafe { ffi::nm_setting_bridge_port_get_priority(self.to_glib_none().0) }
    }

    /// ## `idx`
    /// index number of the VLAN to return
    ///
    /// # Returns
    ///
    /// the VLAN at index `idx`
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_port_get_vlan")]
    #[doc(alias = "get_vlan")]
    pub fn vlan(&self, idx: u32) -> Option<BridgeVlan> {
        unsafe {
            from_glib_none(ffi::nm_setting_bridge_port_get_vlan(
                self.to_glib_none().0,
                idx,
            ))
        }
    }

    /// Removes the vlan at index `idx`.
    /// ## `idx`
    /// index number of the VLAN.
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_port_remove_vlan")]
    pub fn remove_vlan(&self, idx: u32) {
        unsafe {
            ffi::nm_setting_bridge_port_remove_vlan(self.to_glib_none().0, idx);
        }
    }

    /// Remove the VLAN with range `vid_start` to `vid_end`.
    /// If `vid_end` is zero, it is assumed to be equal to `vid_start`
    /// and so the single-id VLAN with id `vid_start` is removed.
    /// ## `vid_start`
    /// the vlan start index
    /// ## `vid_end`
    /// the vlan end index
    ///
    /// # Returns
    ///
    /// [`true`] if the vlan was found and removed; [`false`] otherwise
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_18")))]
    #[doc(alias = "nm_setting_bridge_port_remove_vlan_by_vid")]
    pub fn remove_vlan_by_vid(&self, vid_start: u16, vid_end: u16) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_bridge_port_remove_vlan_by_vid(
                self.to_glib_none().0,
                vid_start,
                vid_end,
            ))
        }
    }

    /// Enables or disables "hairpin mode" for the port, which allows frames to
    /// be sent back out through the port the frame was received on.
    #[doc(alias = "hairpin-mode")]
    pub fn set_hairpin_mode(&self, hairpin_mode: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.as_ptr() as *mut glib::gobject_ffi::GObject,
                b"hairpin-mode\0".as_ptr() as *const _,
                hairpin_mode.to_value().to_glib_none().0,
            );
        }
    }

    /// The Spanning Tree Protocol (STP) port cost for destinations via this
    /// port.
    #[doc(alias = "path-cost")]
    pub fn set_path_cost(&self, path_cost: u32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.as_ptr() as *mut glib::gobject_ffi::GObject,
                b"path-cost\0".as_ptr() as *const _,
                path_cost.to_value().to_glib_none().0,
            );
        }
    }

    /// The Spanning Tree Protocol (STP) priority of this bridge port.
    pub fn set_priority(&self, priority: u32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.as_ptr() as *mut glib::gobject_ffi::GObject,
                b"priority\0".as_ptr() as *const _,
                priority.to_value().to_glib_none().0,
            );
        }
    }

    #[doc(alias = "hairpin-mode")]
    pub fn connect_hairpin_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hairpin_mode_trampoline<F: Fn(&SettingBridgePort) + 'static>(
            this: *mut ffi::NMSettingBridgePort,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hairpin-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_hairpin_mode_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "path-cost")]
    pub fn connect_path_cost_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_path_cost_trampoline<F: Fn(&SettingBridgePort) + 'static>(
            this: *mut ffi::NMSettingBridgePort,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::path-cost\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_path_cost_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "priority")]
    pub fn connect_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_trampoline<F: Fn(&SettingBridgePort) + 'static>(
            this: *mut ffi::NMSettingBridgePort,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::priority\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_priority_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for SettingBridgePort {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingBridgePort {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingBridgePort")
    }
}
