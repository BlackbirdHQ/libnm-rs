// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_sys;
use gobject_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
#[cfg(any(feature = "v1_18", feature = "dox"))]
use BridgeVlan;
use Setting;

glib_wrapper! {
    pub struct SettingBridgePort(Object<nm_sys::NMSettingBridgePort, nm_sys::NMSettingBridgePortClass, SettingBridgePortClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_bridge_port_get_type(),
    }
}

impl SettingBridgePort {
    pub fn new() -> SettingBridgePort {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_bridge_port_new()).unsafe_cast() }
    }
}

impl Default for SettingBridgePort {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_BRIDGE_PORT: Option<&SettingBridgePort> = None;

pub trait SettingBridgePortExt: 'static {
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    fn add_vlan(&self, vlan: &BridgeVlan);

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    fn clear_vlans(&self);

    fn get_hairpin_mode(&self) -> bool;

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    fn get_num_vlans(&self) -> u32;

    fn get_path_cost(&self) -> u16;

    fn get_priority(&self) -> u16;

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    fn get_vlan(&self, idx: u32) -> Option<BridgeVlan>;

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    fn remove_vlan(&self, idx: u32);

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    fn remove_vlan_by_vid(&self, vid_start: u16, vid_end: u16) -> bool;

    fn set_property_hairpin_mode(&self, hairpin_mode: bool);

    fn set_property_path_cost(&self, path_cost: u32);

    fn set_property_priority(&self, priority: u32);

    fn connect_property_hairpin_mode_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_path_cost_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingBridgePort>> SettingBridgePortExt for O {
    #[cfg(any(feature = "v1_18", feature = "dox"))]
    fn add_vlan(&self, vlan: &BridgeVlan) {
        unsafe {
            nm_sys::nm_setting_bridge_port_add_vlan(
                self.as_ref().to_glib_none().0,
                vlan.to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    fn clear_vlans(&self) {
        unsafe {
            nm_sys::nm_setting_bridge_port_clear_vlans(self.as_ref().to_glib_none().0);
        }
    }

    fn get_hairpin_mode(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_bridge_port_get_hairpin_mode(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    fn get_num_vlans(&self) -> u32 {
        unsafe { nm_sys::nm_setting_bridge_port_get_num_vlans(self.as_ref().to_glib_none().0) }
    }

    fn get_path_cost(&self) -> u16 {
        unsafe { nm_sys::nm_setting_bridge_port_get_path_cost(self.as_ref().to_glib_none().0) }
    }

    fn get_priority(&self) -> u16 {
        unsafe { nm_sys::nm_setting_bridge_port_get_priority(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    fn get_vlan(&self, idx: u32) -> Option<BridgeVlan> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_bridge_port_get_vlan(
                self.as_ref().to_glib_none().0,
                idx,
            ))
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    fn remove_vlan(&self, idx: u32) {
        unsafe {
            nm_sys::nm_setting_bridge_port_remove_vlan(self.as_ref().to_glib_none().0, idx);
        }
    }

    #[cfg(any(feature = "v1_18", feature = "dox"))]
    fn remove_vlan_by_vid(&self, vid_start: u16, vid_end: u16) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_bridge_port_remove_vlan_by_vid(
                self.as_ref().to_glib_none().0,
                vid_start,
                vid_end,
            ))
        }
    }

    fn set_property_hairpin_mode(&self, hairpin_mode: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"hairpin-mode\0".as_ptr() as *const _,
                Value::from(&hairpin_mode).to_glib_none().0,
            );
        }
    }

    fn set_property_path_cost(&self, path_cost: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"path-cost\0".as_ptr() as *const _,
                Value::from(&path_cost).to_glib_none().0,
            );
        }
    }

    fn set_property_priority(&self, priority: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"priority\0".as_ptr() as *const _,
                Value::from(&priority).to_glib_none().0,
            );
        }
    }

    fn connect_property_hairpin_mode_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_hairpin_mode_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingBridgePort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingBridgePort>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingBridgePort::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hairpin-mode\0".as_ptr() as *const _,
                Some(transmute(
                    notify_hairpin_mode_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_path_cost_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_path_cost_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingBridgePort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingBridgePort>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingBridgePort::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::path-cost\0".as_ptr() as *const _,
                Some(transmute(notify_path_cost_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_priority_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_priority_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingBridgePort,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingBridgePort>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingBridgePort::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::priority\0".as_ptr() as *const _,
                Some(transmute(notify_priority_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingBridgePort {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingBridgePort")
    }
}
