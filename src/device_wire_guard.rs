// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Device;
use crate::Object;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use glib;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use glib_sys;
use nm_sys;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use std::mem::transmute;

glib_wrapper! {
    pub struct DeviceWireGuard(Object<nm_sys::NMDeviceWireGuard, nm_sys::NMDeviceWireGuardClass, DeviceWireGuardClass>) @extends Device, Object;

    match fn {
        get_type => || nm_sys::nm_device_wireguard_get_type(),
    }
}

impl DeviceWireGuard {
    /// Gets the fwmark (firewall mark) for this interface.
    /// It can be used to set routing policy for outgoing encrypted packets.
    /// See: ip-rule(8)
    ///
    /// Feature: `v1_14`
    ///
    ///
    /// # Returns
    ///
    /// 0 if fwmark not in use, 32-bit fwmark value otherwise
    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn get_fwmark(&self) -> u32 {
        unsafe { nm_sys::nm_device_wireguard_get_fwmark(self.to_glib_none().0) }
    }

    /// Gets the local UDP port this interface listens on
    ///
    /// Feature: `v1_14`
    ///
    ///
    /// # Returns
    ///
    /// UDP listen port
    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn get_listen_port(&self) -> u16 {
        unsafe { nm_sys::nm_device_wireguard_get_listen_port(self.to_glib_none().0) }
    }

    /// Gets the public key for this interface
    ///
    /// Feature: `v1_14`
    ///
    ///
    /// # Returns
    ///
    /// the `glib::Bytes` containing the 32-byte public key
    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn get_public_key(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_none(nm_sys::nm_device_wireguard_get_public_key(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn connect_property_fwmark_notify<F: Fn(&DeviceWireGuard) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_fwmark_trampoline<F: Fn(&DeviceWireGuard) + 'static>(
            this: *mut nm_sys::NMDeviceWireGuard,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::fwmark\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_fwmark_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn connect_property_listen_port_notify<F: Fn(&DeviceWireGuard) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_listen_port_trampoline<F: Fn(&DeviceWireGuard) + 'static>(
            this: *mut nm_sys::NMDeviceWireGuard,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::listen-port\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_listen_port_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn connect_property_public_key_notify<F: Fn(&DeviceWireGuard) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_public_key_trampoline<F: Fn(&DeviceWireGuard) + 'static>(
            this: *mut nm_sys::NMDeviceWireGuard,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::public-key\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_public_key_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DeviceWireGuard {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DeviceWireGuard")
    }
}
