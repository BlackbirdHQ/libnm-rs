// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_14", feature = "dox"))]
use glib;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use glib::translate::*;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use glib::GString;
use nm_sys;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use std::mem;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use std::ptr;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use SriovVFVlanProtocol;

glib_wrapper! {
    #[derive(Debug, PartialOrd, Ord, Hash)]
    pub struct SriovVF(Shared<nm_sys::NMSriovVF>);

    match fn {
        ref => |ptr| nm_sys::nm_sriov_vf_ref(ptr),
        unref => |ptr| nm_sys::nm_sriov_vf_unref(ptr),
        get_type => || nm_sys::nm_sriov_vf_get_type(),
    }
}

impl SriovVF {
    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn new(index: u32) -> SriovVF {
        unsafe { from_glib_full(nm_sys::nm_sriov_vf_new(index)) }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn add_vlan(&self, vlan_id: u32) -> bool {
        unsafe { from_glib(nm_sys::nm_sriov_vf_add_vlan(self.to_glib_none().0, vlan_id)) }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn dup(&self) -> Option<SriovVF> {
        unsafe { from_glib_full(nm_sys::nm_sriov_vf_dup(self.to_glib_none().0)) }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn equal(&self, other: &SriovVF) -> bool {
        unsafe {
            from_glib(nm_sys::nm_sriov_vf_equal(
                self.to_glib_none().0,
                other.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn get_attribute(&self, name: &str) -> Option<glib::Variant> {
        unsafe {
            from_glib_none(nm_sys::nm_sriov_vf_get_attribute(
                self.to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn get_attribute_names(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(nm_sys::nm_sriov_vf_get_attribute_names(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn get_index(&self) -> u32 {
        unsafe { nm_sys::nm_sriov_vf_get_index(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn get_vlan_ids(&self) -> Vec<u32> {
        unsafe {
            let mut length = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(
                nm_sys::nm_sriov_vf_get_vlan_ids(self.to_glib_none().0, length.as_mut_ptr()),
                length.assume_init() as usize,
            );
            ret
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn get_vlan_protocol(&self, vlan_id: u32) -> SriovVFVlanProtocol {
        unsafe {
            from_glib(nm_sys::nm_sriov_vf_get_vlan_protocol(
                self.to_glib_none().0,
                vlan_id,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn get_vlan_qos(&self, vlan_id: u32) -> u32 {
        unsafe { nm_sys::nm_sriov_vf_get_vlan_qos(self.to_glib_none().0, vlan_id) }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn remove_vlan(&self, vlan_id: u32) -> bool {
        unsafe {
            from_glib(nm_sys::nm_sriov_vf_remove_vlan(
                self.to_glib_none().0,
                vlan_id,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn set_attribute(&self, name: &str, value: Option<&glib::Variant>) {
        unsafe {
            nm_sys::nm_sriov_vf_set_attribute(
                self.to_glib_none().0,
                name.to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn set_vlan_protocol(&self, vlan_id: u32, protocol: SriovVFVlanProtocol) {
        unsafe {
            nm_sys::nm_sriov_vf_set_vlan_protocol(
                self.to_glib_none().0,
                vlan_id,
                protocol.to_glib(),
            );
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn set_vlan_qos(&self, vlan_id: u32, qos: u32) {
        unsafe {
            nm_sys::nm_sriov_vf_set_vlan_qos(self.to_glib_none().0, vlan_id, qos);
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    pub fn attribute_validate(name: &str, value: &glib::Variant) -> Result<bool, glib::Error> {
        unsafe {
            let mut known = mem::MaybeUninit::uninit();
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_sriov_vf_attribute_validate(
                name.to_glib_none().0,
                value.to_glib_none().0,
                known.as_mut_ptr(),
                &mut error,
            );
            let known = known.assume_init();
            if error.is_null() {
                Ok(from_glib(known))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl PartialEq for SriovVF {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.equal(other)
    }
}

impl Eq for SriovVF {}
