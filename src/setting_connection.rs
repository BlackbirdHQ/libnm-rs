// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use ConnectionMultiConnect;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use Metered;
use Setting;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use SettingConnectionAutoconnectSlaves;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use SettingConnectionLldp;
#[cfg(any(feature = "v1_14", feature = "dox"))]
use SettingConnectionLlmnr;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use SettingConnectionMdns;

glib_wrapper! {
    pub struct SettingConnection(Object<nm_sys::NMSettingConnection, nm_sys::NMSettingConnectionClass, SettingConnectionClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_connection_get_type(),
    }
}

impl SettingConnection {
    pub fn new() -> SettingConnection {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_connection_new()).unsafe_cast() }
    }
}

impl Default for SettingConnection {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_CONNECTION: Option<&SettingConnection> = None;

pub trait SettingConnectionExt: 'static {
    fn add_permission(&self, ptype: &str, pitem: &str, detail: Option<&str>) -> bool;

    fn add_secondary(&self, sec_uuid: &str) -> bool;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_auth_retries(&self) -> i32;

    fn get_autoconnect(&self) -> bool;

    fn get_autoconnect_priority(&self) -> i32;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_autoconnect_retries(&self) -> i32;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_autoconnect_slaves(&self) -> SettingConnectionAutoconnectSlaves;

    fn get_connection_type(&self) -> Option<GString>;

    fn get_gateway_ping_timeout(&self) -> u32;

    fn get_id(&self) -> Option<GString>;

    fn get_interface_name(&self) -> Option<GString>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_lldp(&self) -> SettingConnectionLldp;

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn get_llmnr(&self) -> SettingConnectionLlmnr;

    fn get_master(&self) -> Option<GString>;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_mdns(&self) -> SettingConnectionMdns;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_metered(&self) -> Metered;

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn get_multi_connect(&self) -> ConnectionMultiConnect;

    fn get_num_permissions(&self) -> u32;

    fn get_num_secondaries(&self) -> u32;

    fn get_read_only(&self) -> bool;

    fn get_secondary(&self, idx: u32) -> Option<GString>;

    fn get_slave_type(&self) -> Option<GString>;

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn get_stable_id(&self) -> Option<GString>;

    fn get_timestamp(&self) -> u64;

    fn get_uuid(&self) -> Option<GString>;

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    fn get_wait_device_timeout(&self) -> i32;

    fn get_zone(&self) -> Option<GString>;

    fn is_slave_type(&self, type_: &str) -> bool;

    fn permissions_user_allowed(&self, uname: &str) -> bool;

    fn remove_permission(&self, idx: u32);

    fn remove_permission_by_value(&self, ptype: &str, pitem: &str, detail: Option<&str>) -> bool;

    fn remove_secondary(&self, idx: u32);

    fn remove_secondary_by_value(&self, sec_uuid: &str) -> bool;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn set_property_auth_retries(&self, auth_retries: i32);

    fn set_property_autoconnect(&self, autoconnect: bool);

    fn set_property_autoconnect_priority(&self, autoconnect_priority: i32);

    fn get_property_autoconnect_retries(&self) -> i32;

    fn set_property_autoconnect_retries(&self, autoconnect_retries: i32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_autoconnect_slaves(
        &self,
        autoconnect_slaves: SettingConnectionAutoconnectSlaves,
    );

    fn set_property_gateway_ping_timeout(&self, gateway_ping_timeout: u32);

    fn set_property_id(&self, id: Option<&str>);

    fn set_property_interface_name(&self, interface_name: Option<&str>);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_lldp(&self, lldp: i32);

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn set_property_llmnr(&self, llmnr: i32);

    fn set_property_master(&self, master: Option<&str>);

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_mdns(&self, mdns: i32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_metered(&self, metered: Metered);

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn set_property_multi_connect(&self, multi_connect: i32);

    fn get_property_permissions(&self) -> Vec<GString>;

    fn set_property_permissions(&self, permissions: &[&str]);

    fn set_property_read_only(&self, read_only: bool);

    fn get_property_secondaries(&self) -> Vec<GString>;

    fn set_property_secondaries(&self, secondaries: &[&str]);

    fn set_property_slave_type(&self, slave_type: Option<&str>);

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn set_property_stable_id(&self, stable_id: Option<&str>);

    fn set_property_timestamp(&self, timestamp: u64);

    fn get_property_type(&self) -> Option<GString>;

    fn set_property_type(&self, type_: Option<&str>);

    fn set_property_uuid(&self, uuid: Option<&str>);

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    fn set_property_wait_device_timeout(&self, wait_device_timeout: i32);

    fn set_property_zone(&self, zone: Option<&str>);

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn connect_property_auth_retries_notify<F: Fn(&Self) + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_autoconnect_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_autoconnect_priority_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_autoconnect_retries_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_autoconnect_slaves_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_gateway_ping_timeout_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_interface_name_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_lldp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn connect_property_llmnr_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_master_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_mdns_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_metered_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn connect_property_multi_connect_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_permissions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_read_only_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_secondaries_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_slave_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn connect_property_stable_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_timestamp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_uuid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    fn connect_property_wait_device_timeout_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_zone_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingConnection>> SettingConnectionExt for O {
    fn add_permission(&self, ptype: &str, pitem: &str, detail: Option<&str>) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_add_permission(
                self.as_ref().to_glib_none().0,
                ptype.to_glib_none().0,
                pitem.to_glib_none().0,
                detail.to_glib_none().0,
            ))
        }
    }

    fn add_secondary(&self, sec_uuid: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_add_secondary(
                self.as_ref().to_glib_none().0,
                sec_uuid.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_auth_retries(&self) -> i32 {
        unsafe { nm_sys::nm_setting_connection_get_auth_retries(self.as_ref().to_glib_none().0) }
    }

    fn get_autoconnect(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_get_autoconnect(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_autoconnect_priority(&self) -> i32 {
        unsafe {
            nm_sys::nm_setting_connection_get_autoconnect_priority(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_autoconnect_retries(&self) -> i32 {
        unsafe {
            nm_sys::nm_setting_connection_get_autoconnect_retries(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_autoconnect_slaves(&self) -> SettingConnectionAutoconnectSlaves {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_get_autoconnect_slaves(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_connection_type(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_connection_get_connection_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_gateway_ping_timeout(&self) -> u32 {
        unsafe {
            nm_sys::nm_setting_connection_get_gateway_ping_timeout(self.as_ref().to_glib_none().0)
        }
    }

    fn get_id(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_connection_get_id(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_interface_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_connection_get_interface_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_lldp(&self) -> SettingConnectionLldp {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_get_lldp(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn get_llmnr(&self) -> SettingConnectionLlmnr {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_get_llmnr(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_master(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_connection_get_master(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_mdns(&self) -> SettingConnectionMdns {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_get_mdns(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_metered(&self) -> Metered {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_get_metered(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn get_multi_connect(&self) -> ConnectionMultiConnect {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_get_multi_connect(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_num_permissions(&self) -> u32 {
        unsafe { nm_sys::nm_setting_connection_get_num_permissions(self.as_ref().to_glib_none().0) }
    }

    fn get_num_secondaries(&self) -> u32 {
        unsafe { nm_sys::nm_setting_connection_get_num_secondaries(self.as_ref().to_glib_none().0) }
    }

    fn get_read_only(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_get_read_only(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_secondary(&self, idx: u32) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_connection_get_secondary(
                self.as_ref().to_glib_none().0,
                idx,
            ))
        }
    }

    fn get_slave_type(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_connection_get_slave_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn get_stable_id(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_connection_get_stable_id(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_timestamp(&self) -> u64 {
        unsafe { nm_sys::nm_setting_connection_get_timestamp(self.as_ref().to_glib_none().0) }
    }

    fn get_uuid(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_connection_get_uuid(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    fn get_wait_device_timeout(&self) -> i32 {
        unsafe {
            nm_sys::nm_setting_connection_get_wait_device_timeout(self.as_ref().to_glib_none().0)
        }
    }

    fn get_zone(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_connection_get_zone(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_slave_type(&self, type_: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_is_slave_type(
                self.as_ref().to_glib_none().0,
                type_.to_glib_none().0,
            ))
        }
    }

    fn permissions_user_allowed(&self, uname: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_permissions_user_allowed(
                self.as_ref().to_glib_none().0,
                uname.to_glib_none().0,
            ))
        }
    }

    fn remove_permission(&self, idx: u32) {
        unsafe {
            nm_sys::nm_setting_connection_remove_permission(self.as_ref().to_glib_none().0, idx);
        }
    }

    fn remove_permission_by_value(&self, ptype: &str, pitem: &str, detail: Option<&str>) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_remove_permission_by_value(
                self.as_ref().to_glib_none().0,
                ptype.to_glib_none().0,
                pitem.to_glib_none().0,
                detail.to_glib_none().0,
            ))
        }
    }

    fn remove_secondary(&self, idx: u32) {
        unsafe {
            nm_sys::nm_setting_connection_remove_secondary(self.as_ref().to_glib_none().0, idx);
        }
    }

    fn remove_secondary_by_value(&self, sec_uuid: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_connection_remove_secondary_by_value(
                self.as_ref().to_glib_none().0,
                sec_uuid.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn set_property_auth_retries(&self, auth_retries: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"auth-retries\0".as_ptr() as *const _,
                Value::from(&auth_retries).to_glib_none().0,
            );
        }
    }

    fn set_property_autoconnect(&self, autoconnect: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"autoconnect\0".as_ptr() as *const _,
                Value::from(&autoconnect).to_glib_none().0,
            );
        }
    }

    fn set_property_autoconnect_priority(&self, autoconnect_priority: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"autoconnect-priority\0".as_ptr() as *const _,
                Value::from(&autoconnect_priority).to_glib_none().0,
            );
        }
    }

    fn get_property_autoconnect_retries(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"autoconnect-retries\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `autoconnect-retries` getter")
                .unwrap()
        }
    }

    fn set_property_autoconnect_retries(&self, autoconnect_retries: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"autoconnect-retries\0".as_ptr() as *const _,
                Value::from(&autoconnect_retries).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_autoconnect_slaves(
        &self,
        autoconnect_slaves: SettingConnectionAutoconnectSlaves,
    ) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"autoconnect-slaves\0".as_ptr() as *const _,
                Value::from(&autoconnect_slaves).to_glib_none().0,
            );
        }
    }

    fn set_property_gateway_ping_timeout(&self, gateway_ping_timeout: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"gateway-ping-timeout\0".as_ptr() as *const _,
                Value::from(&gateway_ping_timeout).to_glib_none().0,
            );
        }
    }

    fn set_property_id(&self, id: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"id\0".as_ptr() as *const _,
                Value::from(id).to_glib_none().0,
            );
        }
    }

    fn set_property_interface_name(&self, interface_name: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"interface-name\0".as_ptr() as *const _,
                Value::from(interface_name).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_lldp(&self, lldp: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"lldp\0".as_ptr() as *const _,
                Value::from(&lldp).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn set_property_llmnr(&self, llmnr: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"llmnr\0".as_ptr() as *const _,
                Value::from(&llmnr).to_glib_none().0,
            );
        }
    }

    fn set_property_master(&self, master: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"master\0".as_ptr() as *const _,
                Value::from(master).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn set_property_mdns(&self, mdns: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"mdns\0".as_ptr() as *const _,
                Value::from(&mdns).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_metered(&self, metered: Metered) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"metered\0".as_ptr() as *const _,
                Value::from(&metered).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn set_property_multi_connect(&self, multi_connect: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"multi-connect\0".as_ptr() as *const _,
                Value::from(&multi_connect).to_glib_none().0,
            );
        }
    }

    fn get_property_permissions(&self) -> Vec<GString> {
        unsafe {
            let mut value = Value::from_type(<Vec<GString> as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"permissions\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `permissions` getter")
                .unwrap()
        }
    }

    fn set_property_permissions(&self, permissions: &[&str]) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"permissions\0".as_ptr() as *const _,
                Value::from(permissions).to_glib_none().0,
            );
        }
    }

    fn set_property_read_only(&self, read_only: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"read-only\0".as_ptr() as *const _,
                Value::from(&read_only).to_glib_none().0,
            );
        }
    }

    fn get_property_secondaries(&self) -> Vec<GString> {
        unsafe {
            let mut value = Value::from_type(<Vec<GString> as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondaries\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `secondaries` getter")
                .unwrap()
        }
    }

    fn set_property_secondaries(&self, secondaries: &[&str]) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"secondaries\0".as_ptr() as *const _,
                Value::from(secondaries).to_glib_none().0,
            );
        }
    }

    fn set_property_slave_type(&self, slave_type: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"slave-type\0".as_ptr() as *const _,
                Value::from(slave_type).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn set_property_stable_id(&self, stable_id: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"stable-id\0".as_ptr() as *const _,
                Value::from(stable_id).to_glib_none().0,
            );
        }
    }

    fn set_property_timestamp(&self, timestamp: u64) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"timestamp\0".as_ptr() as *const _,
                Value::from(&timestamp).to_glib_none().0,
            );
        }
    }

    fn get_property_type(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"type\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `type` getter")
        }
    }

    fn set_property_type(&self, type_: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"type\0".as_ptr() as *const _,
                Value::from(type_).to_glib_none().0,
            );
        }
    }

    fn set_property_uuid(&self, uuid: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"uuid\0".as_ptr() as *const _,
                Value::from(uuid).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    fn set_property_wait_device_timeout(&self, wait_device_timeout: i32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"wait-device-timeout\0".as_ptr() as *const _,
                Value::from(&wait_device_timeout).to_glib_none().0,
            );
        }
    }

    fn set_property_zone(&self, zone: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"zone\0".as_ptr() as *const _,
                Value::from(zone).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn connect_property_auth_retries_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_auth_retries_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::auth-retries\0".as_ptr() as *const _,
                Some(transmute(
                    notify_auth_retries_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_autoconnect_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_autoconnect_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::autoconnect\0".as_ptr() as *const _,
                Some(transmute(notify_autoconnect_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_autoconnect_priority_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_autoconnect_priority_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::autoconnect-priority\0".as_ptr() as *const _,
                Some(transmute(
                    notify_autoconnect_priority_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_autoconnect_retries_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_autoconnect_retries_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::autoconnect-retries\0".as_ptr() as *const _,
                Some(transmute(
                    notify_autoconnect_retries_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_autoconnect_slaves_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_autoconnect_slaves_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::autoconnect-slaves\0".as_ptr() as *const _,
                Some(transmute(
                    notify_autoconnect_slaves_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_gateway_ping_timeout_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_gateway_ping_timeout_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::gateway-ping-timeout\0".as_ptr() as *const _,
                Some(transmute(
                    notify_gateway_ping_timeout_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::id\0".as_ptr() as *const _,
                Some(transmute(notify_id_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_interface_name_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_interface_name_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::interface-name\0".as_ptr() as *const _,
                Some(transmute(
                    notify_interface_name_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_lldp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_lldp_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::lldp\0".as_ptr() as *const _,
                Some(transmute(notify_lldp_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn connect_property_llmnr_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_llmnr_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::llmnr\0".as_ptr() as *const _,
                Some(transmute(notify_llmnr_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_master_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_master_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::master\0".as_ptr() as *const _,
                Some(transmute(notify_master_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn connect_property_mdns_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mdns_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::mdns\0".as_ptr() as *const _,
                Some(transmute(notify_mdns_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_metered_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_metered_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::metered\0".as_ptr() as *const _,
                Some(transmute(notify_metered_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    fn connect_property_multi_connect_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_multi_connect_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::multi-connect\0".as_ptr() as *const _,
                Some(transmute(
                    notify_multi_connect_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_permissions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_permissions_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::permissions\0".as_ptr() as *const _,
                Some(transmute(notify_permissions_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_read_only_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_read_only_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::read-only\0".as_ptr() as *const _,
                Some(transmute(notify_read_only_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_secondaries_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondaries_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondaries\0".as_ptr() as *const _,
                Some(transmute(notify_secondaries_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_slave_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_slave_type_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::slave-type\0".as_ptr() as *const _,
                Some(transmute(notify_slave_type_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    fn connect_property_stable_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_stable_id_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::stable-id\0".as_ptr() as *const _,
                Some(transmute(notify_stable_id_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_timestamp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_timestamp_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::timestamp\0".as_ptr() as *const _,
                Some(transmute(notify_timestamp_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::type\0".as_ptr() as *const _,
                Some(transmute(notify_type_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_uuid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uuid_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::uuid\0".as_ptr() as *const _,
                Some(transmute(notify_uuid_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    fn connect_property_wait_device_timeout_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_wait_device_timeout_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::wait-device-timeout\0".as_ptr() as *const _,
                Some(transmute(
                    notify_wait_device_timeout_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_zone_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_zone_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingConnection>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingConnection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::zone\0".as_ptr() as *const _,
                Some(transmute(notify_zone_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingConnection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingConnection")
    }
}
