// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use glib_sys;
use nm_sys;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use std::mem::transmute;
use crate::Device;
use crate::Object;

glib_wrapper! {
    pub struct DeviceMacsec(Object<nm_sys::NMDeviceMacsec, nm_sys::NMDeviceMacsecClass, DeviceMacsecClass>) @extends Device, Object;

    match fn {
        get_type => || nm_sys::nm_device_macsec_get_type(),
    }
}

impl DeviceMacsec {
    /// Gets the set of cryptographic algorithms in use
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// the set of cryptographic algorithms in use
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_cipher_suite(&self) -> u64 {
        unsafe { nm_sys::nm_device_macsec_get_cipher_suite(self.to_glib_none().0) }
    }

    /// Gets the value of the Association Number (0..3) for the Security
    /// Association in use.
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// the current Security Association
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_encoding_sa(&self) -> u8 {
        unsafe { nm_sys::nm_device_macsec_get_encoding_sa(self.to_glib_none().0) }
    }

    /// Gets whether encryption of transmitted frames is enabled
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// whether encryption is enabled
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_encrypt(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_device_macsec_get_encrypt(self.to_glib_none().0)) }
    }

    /// Gets whether the ES (End station) bit is enabled in SecTAG for
    /// transmitted frames
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// whether the ES (End station) bit is enabled
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_es(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_device_macsec_get_es(self.to_glib_none().0)) }
    }

    /// Gets the length of ICV (Integrity Check Value)
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// the length of ICV
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_icv_length(&self) -> u8 {
        unsafe { nm_sys::nm_device_macsec_get_icv_length(self.to_glib_none().0) }
    }

    /// Gets whether the SCI is always included in SecTAG for transmitted
    /// frames
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// whether the SCI is always included
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_include_sci(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_device_macsec_get_include_sci(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// the device's parent device
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_parent(&self) -> Option<Device> {
        unsafe { from_glib_none(nm_sys::nm_device_macsec_get_parent(self.to_glib_none().0)) }
    }

    /// Gets whether protection of transmitted frames is enabled
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// whether protection is enabled
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_protect(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_device_macsec_get_protect(self.to_glib_none().0)) }
    }

    /// Gets whether replay protection is enabled
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// whether replay protection is enabled
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_replay_protect(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_device_macsec_get_replay_protect(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets whether the SCB (Single Copy Broadcast) bit is enabled in
    /// SecTAG for transmitted frames
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// whether the SCB (Single Copy Broadcast) bit is enabled
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_scb(&self) -> bool {
        unsafe { from_glib(nm_sys::nm_device_macsec_get_scb(self.to_glib_none().0)) }
    }

    /// Gets the Secure Channel Identifier in use
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// the SCI
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_sci(&self) -> u64 {
        unsafe { nm_sys::nm_device_macsec_get_sci(self.to_glib_none().0) }
    }

    /// Gets the validation mode for incoming packets (strict, check,
    /// disabled)
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// the validation mode
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_validation(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_device_macsec_get_validation(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets the size of the replay window
    ///
    /// Feature: `v1_6`
    ///
    ///
    /// # Returns
    ///
    /// size of the replay window
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn get_window(&self) -> u32 {
        unsafe { nm_sys::nm_device_macsec_get_window(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_cipher_suite_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_cipher_suite_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::cipher-suite\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_cipher_suite_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_encoding_sa_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_encoding_sa_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::encoding-sa\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_encoding_sa_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_encrypt_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_encrypt_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::encrypt\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_encrypt_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_es_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_es_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::es\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_es_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_icv_length_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_icv_length_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icv-length\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_icv_length_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_include_sci_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_include_sci_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::include-sci\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_include_sci_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_parent_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parent_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_protect_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_protect_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::protect\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_protect_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_replay_protect_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_replay_protect_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::replay-protect\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_replay_protect_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_scb_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_scb_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::scb\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_scb_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_sci_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_sci_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::sci\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_sci_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_validation_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_validation_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::validation\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_validation_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    pub fn connect_property_window_notify<F: Fn(&DeviceMacsec) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_window_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut nm_sys::NMDeviceMacsec,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_window_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DeviceMacsec {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DeviceMacsec")
    }
}
