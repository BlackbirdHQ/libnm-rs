// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT
#![allow(deprecated)]

use crate::{Device, Object};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    ///
    ///
    /// ## Properties
    ///
    ///
    /// #### `cipher-suite`
    ///  The set of cryptographic algorithms in use.
    ///
    /// Readable
    ///
    ///
    /// #### `encoding-sa`
    ///  The value of the Association Number (0..3) for the Security
    /// Association in use.
    ///
    /// Readable
    ///
    ///
    /// #### `encrypt`
    ///  Whether encryption of transmitted frames is enabled.
    ///
    /// Readable
    ///
    ///
    /// #### `es`
    ///  Whether the ES (End station) bit is enabled in SecTAG for
    /// transmitted frames.
    ///
    /// Readable
    ///
    ///
    /// #### `icv-length`
    ///  The length of ICV (Integrity Check Value).
    ///
    /// Readable
    ///
    ///
    /// #### `include-sci`
    ///  Whether the SCI is always included in SecTAG for transmitted
    /// frames.
    ///
    /// Readable
    ///
    ///
    /// #### `parent`
    ///  The devices's parent device.
    ///
    /// Readable
    ///
    ///
    /// #### `protect`
    ///  Whether protection of transmitted frames is enabled.
    ///
    /// Readable
    ///
    ///
    /// #### `replay-protect`
    ///  Whether replay protection is enabled.
    ///
    /// Readable
    ///
    ///
    /// #### `scb`
    ///  Whether the SCB (Single Copy Broadcast) bit is enabled in
    /// SecTAG for transmitted frames.
    ///
    /// Readable
    ///
    ///
    /// #### `sci`
    ///  The Secure Channel Identifier in use.
    ///
    /// Readable
    ///
    ///
    /// #### `validation`
    ///  The validation mode for incoming packets (strict, check,
    /// disabled).
    ///
    /// Readable
    ///
    ///
    /// #### `window`
    ///  The size of the replay window.
    ///
    /// Readable
    /// <details><summary><h4>Device</h4></summary>
    ///
    ///
    /// #### `active-connection`
    ///  The [`ActiveConnection`][crate::ActiveConnection] object that "owns" this device during activation.
    ///
    /// Readable
    ///
    ///
    /// #### `autoconnect`
    ///  Whether the device can auto-activate a connection.
    ///
    /// The property setter is a synchronous D-Bus call. This is deprecated since 1.22.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `available-connections`
    ///  The available connections of the device
    ///
    /// Readable
    ///
    ///
    /// #### `capabilities`
    ///  The capabilities of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `device-type`
    ///  The numeric type of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `dhcp4-config`
    ///  The IPv4 [`DhcpConfig`][crate::DhcpConfig] of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `dhcp6-config`
    ///  The IPv6 [`DhcpConfig`][crate::DhcpConfig] of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `driver`
    ///  The driver of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `driver-version`
    ///  The version of the device driver.
    ///
    /// Readable
    ///
    ///
    /// #### `firmware-missing`
    ///  When [`true`] indicates the device is likely missing firmware required
    /// for its operation.
    ///
    /// Readable
    ///
    ///
    /// #### `firmware-version`
    ///  The firmware version of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `hw-address`
    ///  The hardware address of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `interface`
    ///  The interface of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `interface-flags`
    ///  The interface flags.
    ///
    /// Readable
    ///
    ///
    /// #### `ip-interface`
    ///  The IP interface of the device which should be used for all IP-related
    /// operations like addressing and routing.
    ///
    /// Readable
    ///
    ///
    /// #### `ip4-config`
    ///  The `NMIP4Config` of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `ip4-connectivity`
    ///  The IPv4 connectivity state of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `ip6-config`
    ///  The IPv6 [`IPConfig`][crate::IPConfig] of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `ip6-connectivity`
    ///  The IPv6 connectivity state of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `lldp-neighbors`
    ///  The LLDP neighbors.
    ///
    /// Readable
    ///
    ///
    /// #### `managed`
    ///  Whether the device is managed by NetworkManager.
    ///
    /// Readable
    ///
    ///
    /// #### `metered`
    ///  Whether the device is metered.
    ///
    /// Readable
    ///
    ///
    /// #### `mtu`
    ///  The MTU of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `nm-plugin-missing`
    ///  When [`true`] indicates that the NetworkManager plugin for the device
    /// is not installed.
    ///
    /// Readable
    ///
    ///
    /// #### `path`
    ///  The device path as exposed by the udev property ID_PATH.
    ///
    /// The string is backslash escaped (C escaping) for invalid
    /// characters. The escaping can be reverted with `g_strcompress()`,
    /// however the result may not be valid UTF-8.
    ///
    /// Readable
    ///
    ///
    /// #### `physical-port-id`
    ///  The physical port ID of the device. (See
    /// [`DeviceExt::physical_port_id()`][crate::prelude::DeviceExt::physical_port_id()].)
    ///
    /// Readable
    ///
    ///
    /// #### `ports`
    ///  The port devices of the controller device. For devices that cannot be
    /// controllers this is likely to be always empty.
    ///
    /// Readable
    ///
    ///
    /// #### `product`
    ///  The product string of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `real`
    ///  Whether the device is real or is a placeholder device that could
    /// be created automatically by NetworkManager if one of its
    /// [`available-connections`][struct@crate::Device#available-connections] was activated.
    ///
    /// Readable
    ///
    ///
    /// #### `state`
    ///  The state of the device.
    ///
    /// Readable
    ///
    ///
    /// #### `state-reason`
    ///  The reason for the device state.
    ///
    /// Readable
    ///
    ///
    /// #### `udi`
    ///  An operating-system specific device hardware identifier; this is not
    /// unique to a specific hardware device across reboots or hotplugs. It
    /// is an opaque string which for some device types (Bluetooth, Modem)
    /// contains an identifier provided by the underlying hardware service daemon
    /// such as Bluez or ModemManager, and clients can use this property to
    /// request more information about the device from those services.
    ///
    /// Readable
    ///
    ///
    /// #### `vendor`
    ///  The vendor string of the device.
    ///
    /// Readable
    /// </details>
    /// <details><summary><h4>Object</h4></summary>
    ///
    ///
    /// #### `client`
    ///  The NMClient instance as returned by `nm_object_get_client()`.
    ///
    /// When an NMObject gets removed from the NMClient cache,
    /// the NMObject:path property stays unchanged, but this client
    /// instance gets reset to [`None`]. You can use this property to
    /// track removal of the object from the cache.
    ///
    /// Readable
    ///
    ///
    /// #### `path`
    ///  The D-Bus object path.
    ///
    /// The D-Bus path of an object instance never changes, even if the object
    /// gets removed from the cache. To see whether the object is still in the
    /// cache, check NMObject:client.
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`DeviceExt`][trait@crate::prelude::DeviceExt], [`ObjectExt`][trait@crate::prelude::ObjectExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMDeviceMacsec")]
    pub struct DeviceMacsec(Object<ffi::NMDeviceMacsec, ffi::NMDeviceMacsecClass>) @extends Device, Object;

    match fn {
        type_ => || ffi::nm_device_macsec_get_type(),
    }
}

impl DeviceMacsec {
    /// Gets the set of cryptographic algorithms in use
    ///
    /// # Returns
    ///
    /// the set of cryptographic algorithms in use
    #[doc(alias = "nm_device_macsec_get_cipher_suite")]
    #[doc(alias = "get_cipher_suite")]
    pub fn cipher_suite(&self) -> u64 {
        unsafe { ffi::nm_device_macsec_get_cipher_suite(self.to_glib_none().0) }
    }

    /// Gets the value of the Association Number (0..3) for the Security
    /// Association in use.
    ///
    /// # Returns
    ///
    /// the current Security Association
    #[doc(alias = "nm_device_macsec_get_encoding_sa")]
    #[doc(alias = "get_encoding_sa")]
    pub fn encoding_sa(&self) -> u8 {
        unsafe { ffi::nm_device_macsec_get_encoding_sa(self.to_glib_none().0) }
    }

    /// Gets whether encryption of transmitted frames is enabled
    ///
    /// # Returns
    ///
    /// whether encryption is enabled
    #[doc(alias = "nm_device_macsec_get_encrypt")]
    #[doc(alias = "get_encrypt")]
    pub fn is_encrypt(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_macsec_get_encrypt(self.to_glib_none().0)) }
    }

    /// Gets whether the ES (End station) bit is enabled in SecTAG for
    /// transmitted frames
    ///
    /// # Returns
    ///
    /// whether the ES (End station) bit is enabled
    #[doc(alias = "nm_device_macsec_get_es")]
    #[doc(alias = "get_es")]
    pub fn is_es(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_macsec_get_es(self.to_glib_none().0)) }
    }

    /// Gets the hardware (MAC) address of the [`DeviceMacsec`][crate::DeviceMacsec]
    ///
    /// # Deprecated since 1.24
    ///
    /// Use [`DeviceExt::hw_address()`][crate::prelude::DeviceExt::hw_address()] instead.
    ///
    /// # Returns
    ///
    /// the hardware address. This is the internal string used by the
    /// device, and must not be modified.
    #[cfg_attr(feature = "v1_24", deprecated = "Since 1.24")]
    #[allow(deprecated)]
    #[doc(alias = "nm_device_macsec_get_hw_address")]
    #[doc(alias = "get_hw_address")]
    pub fn hw_address(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_device_macsec_get_hw_address(self.to_glib_none().0)) }
    }

    /// Gets the length of ICV (Integrity Check Value)
    ///
    /// # Returns
    ///
    /// the length of ICV
    #[doc(alias = "nm_device_macsec_get_icv_length")]
    #[doc(alias = "get_icv_length")]
    pub fn icv_length(&self) -> u8 {
        unsafe { ffi::nm_device_macsec_get_icv_length(self.to_glib_none().0) }
    }

    /// Gets whether the SCI is always included in SecTAG for transmitted
    /// frames
    ///
    /// # Returns
    ///
    /// whether the SCI is always included
    #[doc(alias = "nm_device_macsec_get_include_sci")]
    #[doc(alias = "get_include_sci")]
    pub fn is_include_sci(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_macsec_get_include_sci(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the device's parent device
    #[cfg(any(feature = "v1_42", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_42")))]
    #[doc(alias = "nm_device_macsec_get_parent")]
    #[doc(alias = "get_parent")]
    pub fn parent(&self) -> Option<Device> {
        unsafe { from_glib_none(ffi::nm_device_macsec_get_parent(self.to_glib_none().0)) }
    }

    /// Gets whether protection of transmitted frames is enabled
    ///
    /// # Returns
    ///
    /// whether protection is enabled
    #[doc(alias = "nm_device_macsec_get_protect")]
    #[doc(alias = "get_protect")]
    pub fn is_protect(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_macsec_get_protect(self.to_glib_none().0)) }
    }

    /// Gets whether replay protection is enabled
    ///
    /// # Returns
    ///
    /// whether replay protection is enabled
    #[doc(alias = "nm_device_macsec_get_replay_protect")]
    #[doc(alias = "get_replay_protect")]
    pub fn is_replay_protect(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_device_macsec_get_replay_protect(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets whether the SCB (Single Copy Broadcast) bit is enabled in
    /// SecTAG for transmitted frames
    ///
    /// # Returns
    ///
    /// whether the SCB (Single Copy Broadcast) bit is enabled
    #[doc(alias = "nm_device_macsec_get_scb")]
    #[doc(alias = "get_scb")]
    pub fn is_scb(&self) -> bool {
        unsafe { from_glib(ffi::nm_device_macsec_get_scb(self.to_glib_none().0)) }
    }

    /// Gets the Secure Channel Identifier in use
    ///
    /// # Returns
    ///
    /// the SCI
    #[doc(alias = "nm_device_macsec_get_sci")]
    #[doc(alias = "get_sci")]
    pub fn sci(&self) -> u64 {
        unsafe { ffi::nm_device_macsec_get_sci(self.to_glib_none().0) }
    }

    /// Gets the validation mode for incoming packets (strict, check,
    /// disabled)
    ///
    /// # Returns
    ///
    /// the validation mode
    #[doc(alias = "nm_device_macsec_get_validation")]
    #[doc(alias = "get_validation")]
    pub fn validation(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_device_macsec_get_validation(self.to_glib_none().0)) }
    }

    /// Gets the size of the replay window
    ///
    /// # Returns
    ///
    /// size of the replay window
    #[doc(alias = "nm_device_macsec_get_window")]
    #[doc(alias = "get_window")]
    pub fn window(&self) -> u32 {
        unsafe { ffi::nm_device_macsec_get_window(self.to_glib_none().0) }
    }

    /// The devices's parent device.
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn get_property_parent(&self) -> Option<Device> {
        glib::ObjectExt::property(self, "parent")
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "cipher-suite")]
    pub fn connect_cipher_suite_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cipher_suite_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::cipher-suite\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_cipher_suite_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "encoding-sa")]
    pub fn connect_encoding_sa_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_encoding_sa_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::encoding-sa\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_encoding_sa_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "encrypt")]
    pub fn connect_encrypt_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_encrypt_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::encrypt\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_encrypt_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "es")]
    pub fn connect_es_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_es_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::es\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_es_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "icv-length")]
    pub fn connect_icv_length_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icv_length_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::icv-length\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_icv_length_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "include-sci")]
    pub fn connect_include_sci_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_include_sci_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::include-sci\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_include_sci_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "parent")]
    pub fn connect_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parent_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "protect")]
    pub fn connect_protect_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_protect_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::protect\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_protect_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "replay-protect")]
    pub fn connect_replay_protect_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_replay_protect_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::replay-protect\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_replay_protect_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "scb")]
    pub fn connect_scb_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scb_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::scb\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_scb_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "sci")]
    pub fn connect_sci_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sci_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::sci\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_sci_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "validation")]
    pub fn connect_validation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_validation_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::validation\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_validation_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "window")]
    pub fn connect_window_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_window_trampoline<F: Fn(&DeviceMacsec) + 'static>(
            this: *mut ffi::NMDeviceMacsec,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::window\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_window_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DeviceMacsec {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DeviceMacsec")
    }
}
