// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_16", feature = "dox"))]
use gio;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use gio_sys;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib::object::IsA;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use glib_sys;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use gobject_sys;
use nm_sys;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use std::mem::transmute;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use std::pin::Pin;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use std::ptr;
use Device;
use Object;
#[cfg(any(feature = "v1_16", feature = "dox"))]
use WifiP2PPeer;

glib_wrapper! {
    pub struct DeviceWifiP2P(Object<nm_sys::NMDeviceWifiP2P, nm_sys::NMDeviceWifiP2PClass, DeviceWifiP2PClass>) @extends Device, Object;

    match fn {
        get_type => || nm_sys::nm_device_wifi_p2p_get_type(),
    }
}

impl DeviceWifiP2P {
    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn get_peer_by_path(&self, path: &str) -> Option<WifiP2PPeer> {
        unsafe {
            from_glib_none(nm_sys::nm_device_wifi_p2p_get_peer_by_path(
                self.to_glib_none().0,
                path.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn get_peers(&self) -> Vec<WifiP2PPeer> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(nm_sys::nm_device_wifi_p2p_get_peers(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn start_find<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        options: Option<&glib::Variant>,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn start_find_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_device_wifi_p2p_start_find_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = start_find_trampoline::<Q>;
        unsafe {
            nm_sys::nm_device_wifi_p2p_start_find(
                self.to_glib_none().0,
                options.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn start_find_future(
        &self,
        options: Option<&glib::Variant>,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let options = options.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.start_find(
                options.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn stop_find<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn stop_find_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_device_wifi_p2p_stop_find_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = stop_find_trampoline::<Q>;
        unsafe {
            nm_sys::nm_device_wifi_p2p_stop_find(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn stop_find_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.stop_find(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn connect_peer_added<F: Fn(&DeviceWifiP2P, &glib::Object) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn peer_added_trampoline<
            F: Fn(&DeviceWifiP2P, &glib::Object) + 'static,
        >(
            this: *mut nm_sys::NMDeviceWifiP2P,
            peer: *mut gobject_sys::GObject,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(peer))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"peer-added\0".as_ptr() as *const _,
                Some(transmute(peer_added_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn connect_peer_removed<F: Fn(&DeviceWifiP2P, &glib::Object) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn peer_removed_trampoline<
            F: Fn(&DeviceWifiP2P, &glib::Object) + 'static,
        >(
            this: *mut nm_sys::NMDeviceWifiP2P,
            peer: *mut gobject_sys::GObject,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(peer))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"peer-removed\0".as_ptr() as *const _,
                Some(transmute(peer_removed_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn connect_property_hw_address_notify<F: Fn(&DeviceWifiP2P) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_hw_address_trampoline<F: Fn(&DeviceWifiP2P) + 'static>(
            this: *mut nm_sys::NMDeviceWifiP2P,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::hw-address\0".as_ptr() as *const _,
                Some(transmute(notify_hw_address_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_16", feature = "dox"))]
    pub fn connect_property_peers_notify<F: Fn(&DeviceWifiP2P) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_peers_trampoline<F: Fn(&DeviceWifiP2P) + 'static>(
            this: *mut nm_sys::NMDeviceWifiP2P,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::peers\0".as_ptr() as *const _,
                Some(transmute(notify_peers_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DeviceWifiP2P {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DeviceWifiP2P")
    }
}
