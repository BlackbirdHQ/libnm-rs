// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::fmt;
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use std::{boxed::Box as Box_, mem::transmute};

glib::wrapper! {
    /// VXLAN Settings
    ///
    /// ## Properties
    ///
    ///
    /// #### `ageing`
    ///  Specifies the lifetime in seconds of FDB entries learnt by the kernel.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `destination-port`
    ///  Specifies the UDP destination port to communicate to the remote VXLAN
    /// tunnel endpoint.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `id`
    ///  Specifies the VXLAN Network Identifier (or VXLAN Segment Identifier) to
    /// use.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `l2-miss`
    ///  Specifies whether netlink LL ADDR miss notifications are generated.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `l3-miss`
    ///  Specifies whether netlink IP ADDR miss notifications are generated.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `learning`
    ///  Specifies whether unknown source link layer addresses and IP addresses
    /// are entered into the VXLAN device forwarding database.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `limit`
    ///  Specifies the maximum number of FDB entries. A value of zero means that
    /// the kernel will store unlimited entries.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `local`
    ///  If given, specifies the source IP address to use in outgoing packets.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `parent`
    ///  If given, specifies the parent interface name or parent connection UUID.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `proxy`
    ///  Specifies whether ARP proxy is turned on.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `remote`
    ///  Specifies the unicast destination IP address to use in outgoing packets
    /// when the destination link layer address is not known in the VXLAN device
    /// forwarding database, or the multicast IP address to join.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `rsc`
    ///  Specifies whether route short circuit is turned on.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `source-port-max`
    ///  Specifies the maximum UDP source port to communicate to the remote VXLAN
    /// tunnel endpoint.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `source-port-min`
    ///  Specifies the minimum UDP source port to communicate to the remote VXLAN
    /// tunnel endpoint.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `tos`
    ///  Specifies the TOS value to use in outgoing packets.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `ttl`
    ///  Specifies the time-to-live value to use in outgoing packets.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Setting</h4></summary>
    ///
    ///
    /// #### `name`
    ///  The setting's name, which uniquely identifies the setting within the
    /// connection. Each setting type has a name unique to that type, for
    /// example "ppp" or "802-11-wireless" or "802-3-ethernet".
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`SettingExt`][trait@crate::prelude::SettingExt], [`trait@glib::ObjectExt`]
    #[doc(alias = "NMSettingVxlan")]
    pub struct SettingVxlan(Object<ffi::NMSettingVxlan, ffi::NMSettingVxlanClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_vxlan_get_type(),
    }
}

impl SettingVxlan {
    /// Creates a new [`SettingVxlan`][crate::SettingVxlan] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingVxlan`][crate::SettingVxlan] object
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_new")]
    pub fn new() -> SettingVxlan {
        unsafe { Setting::from_glib_full(ffi::nm_setting_vxlan_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the [`ageing`][struct@crate::SettingVxlan#ageing] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_ageing")]
    #[doc(alias = "get_ageing")]
    pub fn ageing(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_ageing(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`destination-port`][struct@crate::SettingVxlan#destination-port] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_destination_port")]
    #[doc(alias = "get_destination_port")]
    pub fn destination_port(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_destination_port(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`id`][struct@crate::SettingVxlan#id] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_id")]
    #[doc(alias = "get_id")]
    pub fn id(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_id(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`l2_miss`][struct@crate::SettingVxlan#l2_miss] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_l2_miss")]
    #[doc(alias = "get_l2_miss")]
    pub fn is_l2_miss(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_vxlan_get_l2_miss(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`l3_miss`][struct@crate::SettingVxlan#l3_miss] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_l3_miss")]
    #[doc(alias = "get_l3_miss")]
    pub fn is_l3_miss(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_vxlan_get_l3_miss(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`learning`][struct@crate::SettingVxlan#learning] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_learning")]
    #[doc(alias = "get_learning")]
    pub fn is_learning(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_vxlan_get_learning(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`limit`][struct@crate::SettingVxlan#limit] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_limit")]
    #[doc(alias = "get_limit")]
    pub fn limit(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_limit(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`local`][struct@crate::SettingVxlan#local] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_local")]
    #[doc(alias = "get_local")]
    pub fn local(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_vxlan_get_local(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`parent`][struct@crate::SettingVxlan#parent] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_parent")]
    #[doc(alias = "get_parent")]
    pub fn parent(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_vxlan_get_parent(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`proxy`][struct@crate::SettingVxlan#proxy] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_proxy")]
    #[doc(alias = "get_proxy")]
    pub fn is_proxy(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_vxlan_get_proxy(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`remote`][struct@crate::SettingVxlan#remote] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_remote")]
    #[doc(alias = "get_remote")]
    pub fn remote(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_vxlan_get_remote(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`rsc`][struct@crate::SettingVxlan#rsc] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_rsc")]
    #[doc(alias = "get_rsc")]
    pub fn is_rsc(&self) -> bool {
        unsafe { from_glib(ffi::nm_setting_vxlan_get_rsc(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`source-port-max`][struct@crate::SettingVxlan#source-port-max] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_source_port_max")]
    #[doc(alias = "get_source_port_max")]
    pub fn source_port_max(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_source_port_max(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`source-port-min`][struct@crate::SettingVxlan#source-port-min] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_source_port_min")]
    #[doc(alias = "get_source_port_min")]
    pub fn source_port_min(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_source_port_min(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`tos`][struct@crate::SettingVxlan#tos] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_tos")]
    #[doc(alias = "get_tos")]
    pub fn tos(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_tos(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the [`ttl`][struct@crate::SettingVxlan#ttl] property of the setting
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_setting_vxlan_get_ttl")]
    #[doc(alias = "get_ttl")]
    pub fn ttl(&self) -> u32 {
        unsafe { ffi::nm_setting_vxlan_get_ttl(self.to_glib_none().0) }
    }

    /// Specifies the lifetime in seconds of FDB entries learnt by the kernel.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_ageing(&self, ageing: u32) {
        glib::ObjectExt::set_property(self, "ageing", &ageing)
    }

    /// Specifies the UDP destination port to communicate to the remote VXLAN
    /// tunnel endpoint.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "destination-port")]
    pub fn set_destination_port(&self, destination_port: u32) {
        glib::ObjectExt::set_property(self, "destination-port", &destination_port)
    }

    /// Specifies the VXLAN Network Identifier (or VXLAN Segment Identifier) to
    /// use.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_id(&self, id: u32) {
        glib::ObjectExt::set_property(self, "id", &id)
    }

    /// Specifies whether netlink LL ADDR miss notifications are generated.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "l2-miss")]
    pub fn set_l2_miss(&self, l2_miss: bool) {
        glib::ObjectExt::set_property(self, "l2-miss", &l2_miss)
    }

    /// Specifies whether netlink IP ADDR miss notifications are generated.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "l3-miss")]
    pub fn set_l3_miss(&self, l3_miss: bool) {
        glib::ObjectExt::set_property(self, "l3-miss", &l3_miss)
    }

    /// Specifies whether unknown source link layer addresses and IP addresses
    /// are entered into the VXLAN device forwarding database.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_learning(&self, learning: bool) {
        glib::ObjectExt::set_property(self, "learning", &learning)
    }

    /// Specifies the maximum number of FDB entries. A value of zero means that
    /// the kernel will store unlimited entries.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_limit(&self, limit: u32) {
        glib::ObjectExt::set_property(self, "limit", &limit)
    }

    /// If given, specifies the source IP address to use in outgoing packets.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_local(&self, local: Option<&str>) {
        glib::ObjectExt::set_property(self, "local", &local)
    }

    /// If given, specifies the parent interface name or parent connection UUID.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_parent(&self, parent: Option<&str>) {
        glib::ObjectExt::set_property(self, "parent", &parent)
    }

    /// Specifies whether ARP proxy is turned on.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_proxy(&self, proxy: bool) {
        glib::ObjectExt::set_property(self, "proxy", &proxy)
    }

    /// Specifies the unicast destination IP address to use in outgoing packets
    /// when the destination link layer address is not known in the VXLAN device
    /// forwarding database, or the multicast IP address to join.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_remote(&self, remote: Option<&str>) {
        glib::ObjectExt::set_property(self, "remote", &remote)
    }

    /// Specifies whether route short circuit is turned on.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_rsc(&self, rsc: bool) {
        glib::ObjectExt::set_property(self, "rsc", &rsc)
    }

    /// Specifies the maximum UDP source port to communicate to the remote VXLAN
    /// tunnel endpoint.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "source-port-max")]
    pub fn set_source_port_max(&self, source_port_max: u32) {
        glib::ObjectExt::set_property(self, "source-port-max", &source_port_max)
    }

    /// Specifies the minimum UDP source port to communicate to the remote VXLAN
    /// tunnel endpoint.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "source-port-min")]
    pub fn set_source_port_min(&self, source_port_min: u32) {
        glib::ObjectExt::set_property(self, "source-port-min", &source_port_min)
    }

    /// Specifies the TOS value to use in outgoing packets.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_tos(&self, tos: u32) {
        glib::ObjectExt::set_property(self, "tos", &tos)
    }

    /// Specifies the time-to-live value to use in outgoing packets.
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn set_ttl(&self, ttl: u32) {
        glib::ObjectExt::set_property(self, "ttl", &ttl)
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "ageing")]
    pub fn connect_ageing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ageing_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ageing\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ageing_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "destination-port")]
    pub fn connect_destination_port_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_destination_port_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::destination-port\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_destination_port_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "id")]
    pub fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_id_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "l2-miss")]
    pub fn connect_l2_miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_l2_miss_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::l2-miss\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_l2_miss_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "l3-miss")]
    pub fn connect_l3_miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_l3_miss_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::l3-miss\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_l3_miss_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "learning")]
    pub fn connect_learning_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_learning_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::learning\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_learning_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "limit")]
    pub fn connect_limit_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_limit_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::limit\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_limit_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "local")]
    pub fn connect_local_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_local_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::local\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_local_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "parent")]
    pub fn connect_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parent_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "proxy")]
    pub fn connect_proxy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_proxy_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::proxy\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_proxy_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "remote")]
    pub fn connect_remote_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_remote_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::remote\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_remote_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "rsc")]
    pub fn connect_rsc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rsc_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::rsc\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_rsc_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "source-port-max")]
    pub fn connect_source_port_max_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_source_port_max_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::source-port-max\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_source_port_max_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "source-port-min")]
    pub fn connect_source_port_min_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_source_port_min_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::source-port-min\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_source_port_min_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "tos")]
    pub fn connect_tos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tos_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tos\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tos_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "ttl")]
    pub fn connect_ttl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ttl_trampoline<F: Fn(&SettingVxlan) + 'static>(
            this: *mut ffi::NMSettingVxlan,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ttl\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ttl_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
impl Default for SettingVxlan {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingVxlan {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingVxlan")
    }
}
