// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::object::Cast;
use glib::object::IsA;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib::Value;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use glib_sys;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use gobject_sys;
use nm_sys;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use std::mem::transmute;
use Setting;

glib_wrapper! {
    pub struct SettingVxlan(Object<nm_sys::NMSettingVxlan, nm_sys::NMSettingVxlanClass, SettingVxlanClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_vxlan_get_type(),
    }
}

impl SettingVxlan {
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    pub fn new() -> SettingVxlan {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_vxlan_new()).unsafe_cast() }
    }
}

#[cfg(any(feature = "v1_2", feature = "dox"))]
impl Default for SettingVxlan {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_VXLAN: Option<&SettingVxlan> = None;

pub trait SettingVxlanExt: 'static {
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_ageing(&self) -> u32;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_destination_port(&self) -> u32;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_id(&self) -> u32;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_l2_miss(&self) -> bool;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_l3_miss(&self) -> bool;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_learning(&self) -> bool;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_limit(&self) -> u32;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_local(&self) -> Option<GString>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_parent(&self) -> Option<GString>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_proxy(&self) -> bool;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_remote(&self) -> Option<GString>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_rsc(&self) -> bool;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_source_port_max(&self) -> u32;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_source_port_min(&self) -> u32;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_tos(&self) -> u32;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_ttl(&self) -> u32;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_ageing(&self, ageing: u32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_destination_port(&self, destination_port: u32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_id(&self, id: u32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_l2_miss(&self, l2_miss: bool);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_l3_miss(&self, l3_miss: bool);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_learning(&self, learning: bool);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_limit(&self, limit: u32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_local(&self, local: Option<&str>);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_parent(&self, parent: Option<&str>);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_proxy(&self, proxy: bool);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_remote(&self, remote: Option<&str>);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_rsc(&self, rsc: bool);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_source_port_max(&self, source_port_max: u32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_source_port_min(&self, source_port_min: u32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_tos(&self, tos: u32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_ttl(&self, ttl: u32);

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_ageing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_destination_port_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_l2_miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_l3_miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_learning_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_limit_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_local_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_proxy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_remote_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_rsc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_source_port_max_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_source_port_min_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_tos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_ttl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingVxlan>> SettingVxlanExt for O {
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_ageing(&self) -> u32 {
        unsafe { nm_sys::nm_setting_vxlan_get_ageing(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_destination_port(&self) -> u32 {
        unsafe { nm_sys::nm_setting_vxlan_get_destination_port(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_id(&self) -> u32 {
        unsafe { nm_sys::nm_setting_vxlan_get_id(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_l2_miss(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_vxlan_get_l2_miss(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_l3_miss(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_vxlan_get_l3_miss(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_learning(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_vxlan_get_learning(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_limit(&self) -> u32 {
        unsafe { nm_sys::nm_setting_vxlan_get_limit(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_local(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_vxlan_get_local(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_parent(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_vxlan_get_parent(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_proxy(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_vxlan_get_proxy(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_remote(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_vxlan_get_remote(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_rsc(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_vxlan_get_rsc(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_source_port_max(&self) -> u32 {
        unsafe { nm_sys::nm_setting_vxlan_get_source_port_max(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_source_port_min(&self) -> u32 {
        unsafe { nm_sys::nm_setting_vxlan_get_source_port_min(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_tos(&self) -> u32 {
        unsafe { nm_sys::nm_setting_vxlan_get_tos(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_ttl(&self) -> u32 {
        unsafe { nm_sys::nm_setting_vxlan_get_ttl(self.as_ref().to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_ageing(&self, ageing: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"ageing\0".as_ptr() as *const _,
                Value::from(&ageing).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_destination_port(&self, destination_port: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"destination-port\0".as_ptr() as *const _,
                Value::from(&destination_port).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_id(&self, id: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"id\0".as_ptr() as *const _,
                Value::from(&id).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_l2_miss(&self, l2_miss: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"l2-miss\0".as_ptr() as *const _,
                Value::from(&l2_miss).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_l3_miss(&self, l3_miss: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"l3-miss\0".as_ptr() as *const _,
                Value::from(&l3_miss).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_learning(&self, learning: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"learning\0".as_ptr() as *const _,
                Value::from(&learning).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_limit(&self, limit: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"limit\0".as_ptr() as *const _,
                Value::from(&limit).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_local(&self, local: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"local\0".as_ptr() as *const _,
                Value::from(local).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_parent(&self, parent: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"parent\0".as_ptr() as *const _,
                Value::from(parent).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_proxy(&self, proxy: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"proxy\0".as_ptr() as *const _,
                Value::from(&proxy).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_remote(&self, remote: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"remote\0".as_ptr() as *const _,
                Value::from(remote).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_rsc(&self, rsc: bool) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"rsc\0".as_ptr() as *const _,
                Value::from(&rsc).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_source_port_max(&self, source_port_max: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"source-port-max\0".as_ptr() as *const _,
                Value::from(&source_port_max).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_source_port_min(&self, source_port_min: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"source-port-min\0".as_ptr() as *const _,
                Value::from(&source_port_min).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_tos(&self, tos: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"tos\0".as_ptr() as *const _,
                Value::from(&tos).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn set_property_ttl(&self, ttl: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"ttl\0".as_ptr() as *const _,
                Value::from(&ttl).to_glib_none().0,
            );
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_ageing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ageing_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ageing\0".as_ptr() as *const _,
                Some(transmute(notify_ageing_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_destination_port_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_destination_port_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::destination-port\0".as_ptr() as *const _,
                Some(transmute(
                    notify_destination_port_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::id\0".as_ptr() as *const _,
                Some(transmute(notify_id_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_l2_miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_l2_miss_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::l2-miss\0".as_ptr() as *const _,
                Some(transmute(notify_l2_miss_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_l3_miss_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_l3_miss_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::l3-miss\0".as_ptr() as *const _,
                Some(transmute(notify_l3_miss_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_learning_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_learning_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::learning\0".as_ptr() as *const _,
                Some(transmute(notify_learning_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_limit_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_limit_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::limit\0".as_ptr() as *const _,
                Some(transmute(notify_limit_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_local_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_local_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::local\0".as_ptr() as *const _,
                Some(transmute(notify_local_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute(notify_parent_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_proxy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_proxy_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::proxy\0".as_ptr() as *const _,
                Some(transmute(notify_proxy_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_remote_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_remote_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::remote\0".as_ptr() as *const _,
                Some(transmute(notify_remote_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_rsc_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rsc_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::rsc\0".as_ptr() as *const _,
                Some(transmute(notify_rsc_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_source_port_max_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_source_port_max_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::source-port-max\0".as_ptr() as *const _,
                Some(transmute(
                    notify_source_port_max_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_source_port_min_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_source_port_min_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::source-port-min\0".as_ptr() as *const _,
                Some(transmute(
                    notify_source_port_min_trampoline::<Self, F> as usize,
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_tos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tos_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tos\0".as_ptr() as *const _,
                Some(transmute(notify_tos_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_ttl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ttl_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingVxlan,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingVxlan>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingVxlan::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ttl\0".as_ptr() as *const _,
                Some(transmute(notify_ttl_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingVxlan {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingVxlan")
    }
}
