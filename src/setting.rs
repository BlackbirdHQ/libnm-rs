// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;
use Connection;
use SettingCompareFlags;
use SettingSecretFlags;

glib_wrapper! {
    pub struct Setting(Object<nm_sys::NMSetting, nm_sys::NMSettingClass, SettingClass>);

    match fn {
        get_type => || nm_sys::nm_setting_get_type(),
    }
}

impl Setting {
    pub fn lookup_type(name: &str) -> glib::types::Type {
        unsafe { from_glib(nm_sys::nm_setting_lookup_type(name.to_glib_none().0)) }
    }
}

pub const NONE_SETTING: Option<&Setting> = None;

pub trait SettingExt: 'static {
    fn compare<P: IsA<Setting>>(&self, b: &P, flags: SettingCompareFlags) -> bool;

    //fn diff<P: IsA<Setting>>(&self, b: &P, flags: SettingCompareFlags, invert_results: bool, results: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 7 }) -> bool;

    fn duplicate(&self) -> Option<Setting>;

    //fn enumerate_values(&self, func: /*Unimplemented*/FnMut(&Setting, &str, /*Ignored*/glib::Value, /*Ignored*/glib::ParamFlags), user_data: /*Unimplemented*/Option<Fundamental: Pointer>);

    fn get_dbus_property_type(&self, property_name: &str) -> Option<glib::VariantType>;

    fn get_name(&self) -> Option<GString>;

    fn set_secret_flags(
        &self,
        secret_name: &str,
        flags: SettingSecretFlags,
    ) -> Result<(), glib::Error>;

    fn to_string(&self) -> GString;

    fn verify<P: IsA<Connection>>(&self, connection: Option<&P>) -> Result<(), glib::Error>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn verify_secrets<P: IsA<Connection>>(&self, connection: Option<&P>)
        -> Result<(), glib::Error>;

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Setting>> SettingExt for O {
    fn compare<P: IsA<Setting>>(&self, b: &P, flags: SettingCompareFlags) -> bool {
        unsafe {
            from_glib(nm_sys::nm_setting_compare(
                self.as_ref().to_glib_none().0,
                b.as_ref().to_glib_none().0,
                flags.to_glib(),
            ))
        }
    }

    //fn diff<P: IsA<Setting>>(&self, b: &P, flags: SettingCompareFlags, invert_results: bool, results: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 7 }) -> bool {
    //    unsafe { TODO: call nm_sys:nm_setting_diff() }
    //}

    fn duplicate(&self) -> Option<Setting> {
        unsafe { from_glib_full(nm_sys::nm_setting_duplicate(self.as_ref().to_glib_none().0)) }
    }

    //fn enumerate_values(&self, func: /*Unimplemented*/FnMut(&Setting, &str, /*Ignored*/glib::Value, /*Ignored*/glib::ParamFlags), user_data: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call nm_sys:nm_setting_enumerate_values() }
    //}

    fn get_dbus_property_type(&self, property_name: &str) -> Option<glib::VariantType> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_get_dbus_property_type(
                self.as_ref().to_glib_none().0,
                property_name.to_glib_none().0,
            ))
        }
    }

    fn get_name(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_setting_get_name(self.as_ref().to_glib_none().0)) }
    }

    fn set_secret_flags(
        &self,
        secret_name: &str,
        flags: SettingSecretFlags,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_setting_set_secret_flags(
                self.as_ref().to_glib_none().0,
                secret_name.to_glib_none().0,
                flags.to_glib(),
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn to_string(&self) -> GString {
        unsafe { from_glib_full(nm_sys::nm_setting_to_string(self.as_ref().to_glib_none().0)) }
    }

    fn verify<P: IsA<Connection>>(&self, connection: Option<&P>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_setting_verify(
                self.as_ref().to_glib_none().0,
                connection.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn verify_secrets<P: IsA<Connection>>(
        &self,
        connection: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_setting_verify_secrets(
                self.as_ref().to_glib_none().0,
                connection.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSetting,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Setting>,
        {
            let f: &F = &*(f as *const F);
            f(&Setting::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Setting {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Setting")
    }
}
