// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
#[cfg(any(feature = "v1_24", feature = "dox"))]
use Client;

glib_wrapper! {
    pub struct Object(Object<nm_sys::NMObject, nm_sys::NMObjectClass, ObjectClass>);

    match fn {
        get_type => || nm_sys::nm_object_get_type(),
    }
}

pub const NONE_OBJECT: Option<&Object> = None;

/// Trait containing all `Object` methods.
///
/// # Implementors
///
/// [`AccessPoint`](struct.AccessPoint.html), [`ActiveConnection`](struct.ActiveConnection.html), [`Checkpoint`](struct.Checkpoint.html), [`Device`](struct.Device.html), [`DhcpConfig`](struct.DhcpConfig.html), [`IPConfig`](struct.IPConfig.html), [`Object`](struct.Object.html), [`RemoteConnection`](struct.RemoteConnection.html), [`WifiP2PPeer`](struct.WifiP2PPeer.html), [`WimaxNsp`](struct.WimaxNsp.html)
pub trait ObjectExt: 'static {
    /// Returns the `Client` instance in which object is cached.
    /// Also, if the object got removed from the client cached,
    /// this returns `None`. So it can be used to check whether the
    /// object is still alive.
    ///
    /// Feature: `v1_24`
    ///
    ///
    /// # Returns
    ///
    /// the `Client` cache in which the
    /// object can be found, or `None` if the object is no longer
    /// cached.
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    fn get_client(&self) -> Option<Client>;

    /// Gets the DBus path of the `Object`.
    ///
    /// # Returns
    ///
    /// the object's path. This is the internal string used by the
    /// object, and must not be modified.
    ///
    /// Note that the D-Bus path of an NMObject never changes, even
    /// if the instance gets removed from the cache. To find out
    /// whether the object is still alive/cached, check `ObjectExt::get_client`.
    fn get_path(&self) -> Option<GString>;

    fn connect_property_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Object>> ObjectExt for O {
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    fn get_client(&self) -> Option<Client> {
        unsafe { from_glib_none(nm_sys::nm_object_get_client(self.as_ref().to_glib_none().0)) }
    }

    fn get_path(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_object_get_path(self.as_ref().to_glib_none().0)) }
    }

    fn connect_property_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_path_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMObject,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Object>,
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::path\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_path_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Object {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Object")
    }
}
