// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Device;
use crate::Object;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMCheckpoint")]
    pub struct Checkpoint(Object<ffi::NMCheckpoint, ffi::NMCheckpointClass>) @extends Object;

    match fn {
        type_ => || ffi::nm_checkpoint_get_type(),
    }
}

impl Checkpoint {
    /// Gets the timestamp (in CLOCK_BOOTTIME milliseconds) of checkpoint creation.
    ///
    /// Use [`utils_get_timestamp_msec()`][crate::utils_get_timestamp_msec()] to obtain current time value suitable for
    /// comparing to this value.
    ///
    /// # Returns
    ///
    /// the timestamp of checkpoint creation.
    #[doc(alias = "nm_checkpoint_get_created")]
    #[doc(alias = "get_created")]
    pub fn created(&self) -> i64 {
        unsafe { ffi::nm_checkpoint_get_created(self.to_glib_none().0) }
    }

    /// The devices that are part of this checkpoint.
    ///
    /// # Returns
    ///
    /// the devices list.
    #[doc(alias = "nm_checkpoint_get_devices")]
    #[doc(alias = "get_devices")]
    pub fn devices(&self) -> Vec<Device> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::nm_checkpoint_get_devices(
                self.to_glib_none().0,
            ))
        }
    }

    /// Gets the timeout in seconds for automatic rollback.
    ///
    /// # Returns
    ///
    /// the rollback timeout.
    #[doc(alias = "nm_checkpoint_get_rollback_timeout")]
    #[doc(alias = "get_rollback_timeout")]
    pub fn rollback_timeout(&self) -> u32 {
        unsafe { ffi::nm_checkpoint_get_rollback_timeout(self.to_glib_none().0) }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "created")]
    pub fn connect_created_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_created_trampoline<F: Fn(&Checkpoint) + 'static>(
            this: *mut ffi::NMCheckpoint,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::created\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_created_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "devices")]
    pub fn connect_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_devices_trampoline<F: Fn(&Checkpoint) + 'static>(
            this: *mut ffi::NMCheckpoint,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::devices\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_devices_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "rollback-timeout")]
    pub fn connect_rollback_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rollback_timeout_trampoline<F: Fn(&Checkpoint) + 'static>(
            this: *mut ffi::NMCheckpoint,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::rollback-timeout\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_rollback_timeout_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Checkpoint {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Checkpoint")
    }
}
