// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
use crate::SriovVF;
use crate::Ternary;
use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMSettingSriov")]
    pub struct SettingSriov(Object<ffi::NMSettingSriov, ffi::NMSettingSriovClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_sriov_get_type(),
    }
}

impl SettingSriov {
    /// Creates a new [`SettingSriov`][crate::SettingSriov] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingSriov`][crate::SettingSriov] object
    #[doc(alias = "nm_setting_sriov_new")]
    pub fn new() -> SettingSriov {
        unsafe { Setting::from_glib_full(ffi::nm_setting_sriov_new()).unsafe_cast() }
    }

    /// Appends a new VF and associated information to the setting. The
    /// given VF is duplicated internally and is not changed by this function.
    /// ## `vf`
    /// the VF to add
    #[doc(alias = "nm_setting_sriov_add_vf")]
    pub fn add_vf(&self, vf: &SriovVF) {
        unsafe {
            ffi::nm_setting_sriov_add_vf(self.to_glib_none().0, vf.to_glib_none().0);
        }
    }

    /// Removes all configured VFs.
    #[doc(alias = "nm_setting_sriov_clear_vfs")]
    pub fn clear_vfs(&self) {
        unsafe {
            ffi::nm_setting_sriov_clear_vfs(self.to_glib_none().0);
        }
    }

    /// Returns the value contained in the `property::SettingSriov::autoprobe-drivers`
    /// property.
    ///
    /// # Returns
    ///
    /// the autoprobe-drivers property value
    #[doc(alias = "nm_setting_sriov_get_autoprobe_drivers")]
    #[doc(alias = "get_autoprobe_drivers")]
    pub fn autoprobe_drivers(&self) -> Ternary {
        unsafe {
            from_glib(ffi::nm_setting_sriov_get_autoprobe_drivers(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the number of configured VFs
    #[doc(alias = "nm_setting_sriov_get_num_vfs")]
    #[doc(alias = "get_num_vfs")]
    pub fn num_vfs(&self) -> u32 {
        unsafe { ffi::nm_setting_sriov_get_num_vfs(self.to_glib_none().0) }
    }

    /// Returns the value contained in the `property::SettingSriov::total-vfs`
    /// property.
    ///
    /// # Returns
    ///
    /// the total number of SR-IOV virtual functions to create
    #[doc(alias = "nm_setting_sriov_get_total_vfs")]
    #[doc(alias = "get_total_vfs")]
    pub fn total_vfs(&self) -> u32 {
        unsafe { ffi::nm_setting_sriov_get_total_vfs(self.to_glib_none().0) }
    }

    /// ## `idx`
    /// index number of the VF to return
    ///
    /// # Returns
    ///
    /// the VF at index `idx`
    #[doc(alias = "nm_setting_sriov_get_vf")]
    #[doc(alias = "get_vf")]
    pub fn vf(&self, idx: u32) -> Option<SriovVF> {
        unsafe { from_glib_none(ffi::nm_setting_sriov_get_vf(self.to_glib_none().0, idx)) }
    }

    /// Removes the VF at index `idx`.
    /// ## `idx`
    /// index number of the VF
    #[doc(alias = "nm_setting_sriov_remove_vf")]
    pub fn remove_vf(&self, idx: u32) {
        unsafe {
            ffi::nm_setting_sriov_remove_vf(self.to_glib_none().0, idx);
        }
    }

    /// Removes the VF with VF index `index`.
    /// ## `index`
    /// the VF index of the VF to remove
    ///
    /// # Returns
    ///
    /// [`true`] if the VF was found and removed; [`false`] if it was not
    #[doc(alias = "nm_setting_sriov_remove_vf_by_index")]
    pub fn remove_vf_by_index(&self, index: u32) -> bool {
        unsafe {
            from_glib(ffi::nm_setting_sriov_remove_vf_by_index(
                self.to_glib_none().0,
                index,
            ))
        }
    }

    /// Whether to autoprobe virtual functions by a compatible driver.
    ///
    /// If set to [`Ternary::True`][crate::Ternary::True], the kernel will try to bind VFs to
    /// a compatible driver and if this succeeds a new network
    /// interface will be instantiated for each VF.
    ///
    /// If set to [`Ternary::False`][crate::Ternary::False], VFs will not be claimed and no
    /// network interfaces will be created for them.
    ///
    /// When set to [`Ternary::Default`][crate::Ternary::Default], the global default is used; in
    /// case the global default is unspecified it is assumed to be
    /// [`Ternary::True`][crate::Ternary::True].
    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    #[doc(alias = "autoprobe-drivers")]
    pub fn set_autoprobe_drivers(&self, autoprobe_drivers: Ternary) {
        glib::ObjectExt::set_property(self, "autoprobe-drivers", &autoprobe_drivers)
    }

    /// The total number of virtual functions to create.
    ///
    /// Note that when the sriov setting is present NetworkManager
    /// enforces the number of virtual functions on the interface
    /// (also when it is zero) during activation and resets it
    /// upon deactivation. To prevent any changes to SR-IOV
    /// parameters don't add a sriov setting to the connection.
    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    #[doc(alias = "total-vfs")]
    pub fn set_total_vfs(&self, total_vfs: u32) {
        glib::ObjectExt::set_property(self, "total-vfs", &total_vfs)
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    #[doc(alias = "autoprobe-drivers")]
    pub fn connect_autoprobe_drivers_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_autoprobe_drivers_trampoline<F: Fn(&SettingSriov) + 'static>(
            this: *mut ffi::NMSettingSriov,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::autoprobe-drivers\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_autoprobe_drivers_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    #[doc(alias = "total-vfs")]
    pub fn connect_total_vfs_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_total_vfs_trampoline<F: Fn(&SettingSriov) + 'static>(
            this: *mut ffi::NMSettingSriov,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::total-vfs\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_total_vfs_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_14", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
impl Default for SettingSriov {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingSriov {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingSriov")
    }
}
