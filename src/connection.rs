// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

#[cfg(any(feature = "v1_8", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
use crate::SettingDummy;
#[cfg(any(feature = "v1_12", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
use crate::SettingTCConfig;
use crate::{
    ConnectionSerializationFlags, Setting, Setting8021x, SettingAdsl, SettingBluetooth,
    SettingBond, SettingBridge, SettingBridgePort, SettingCdma, SettingCompareFlags,
    SettingConnection, SettingDcb, SettingGeneric, SettingGsm, SettingIP4Config, SettingIP6Config,
    SettingInfiniband, SettingOlpcMesh, SettingPpp, SettingPppoe, SettingSerial, SettingTeam,
    SettingTeamPort, SettingVlan, SettingVpn, SettingWimax, SettingWired, SettingWireless,
    SettingWirelessSecurity,
};
#[cfg(any(feature = "v1_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
use crate::{SettingIPTunnel, SettingMacvlan, SettingVxlan};
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use crate::{SettingMacsec, SettingProxy};
#[cfg(any(feature = "v1_14", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
use crate::{SettingOvsBridge, SettingOvsInterface, SettingOvsPatch, SettingOvsPort, SettingTun};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
use std::mem;
use std::{boxed::Box as Box_, fmt, mem::transmute, ptr};

glib::wrapper! {
    /// NMConnection is the interface implemented by [`RemoteConnection`][crate::RemoteConnection] on the
    /// client side, and `NMSettingsConnection` on the daemon side.
    ///
    /// ## Signals
    ///
    ///
    /// #### `changed`
    ///  The ::changed signal is emitted when any property (including secrets)
    /// of any setting of the connection is modified, or when settings are
    /// added or removed.
    ///
    ///
    ///
    ///
    /// #### `secrets-cleared`
    ///  The ::secrets-cleared signal is emitted when the secrets of a connection
    /// are cleared.
    ///
    ///
    ///
    ///
    /// #### `secrets-updated`
    ///  The ::secrets-updated signal is emitted when the secrets of a setting
    /// have been changed.
    ///
    ///
    ///
    /// # Implements
    ///
    /// [`ConnectionExt`][trait@crate::prelude::ConnectionExt]
    #[doc(alias = "NMConnection")]
    pub struct Connection(Interface<ffi::NMConnection, ffi::NMConnectionInterface>);

    match fn {
        type_ => || ffi::nm_connection_get_type(),
    }
}

impl Connection {
    pub const NONE: Option<&'static Connection> = None;
}

/// Trait containing all [`struct@Connection`] methods.
///
/// # Implementors
///
/// [`Connection`][struct@crate::Connection], [`RemoteConnection`][struct@crate::RemoteConnection], [`SimpleConnection`][struct@crate::SimpleConnection]
pub trait ConnectionExt: 'static {
    /// Adds a [`Setting`][crate::Setting] to the connection, replacing any previous [`Setting`][crate::Setting] of the
    /// same name which has previously been added to the [`Connection`][crate::Connection]. The
    /// connection takes ownership of the [`Setting`][crate::Setting] object and does not increase
    /// the setting object's reference count.
    /// ## `setting`
    /// the [`Setting`][crate::Setting] to add to the connection object
    #[doc(alias = "nm_connection_add_setting")]
    fn add_setting(&self, setting: impl IsA<Setting>);

    #[doc(alias = "nm_connection_clear_secrets")]
    fn clear_secrets(&self);

    #[doc(alias = "nm_connection_clear_settings")]
    fn clear_settings(&self);

    #[doc(alias = "nm_connection_compare")]
    fn compare(&self, b: &impl IsA<Connection>, flags: SettingCompareFlags) -> bool;

    //#[doc(alias = "nm_connection_diff")]
    //fn diff(&self, b: &impl IsA<Connection>, flags: SettingCompareFlags, out_settings: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 41 }) -> bool;

    #[doc(alias = "nm_connection_dump")]
    fn dump(&self);

    //#[doc(alias = "nm_connection_for_each_setting_value")]
    //fn for_each_setting_value(&self, func: /*Unimplemented*/FnMut(&Setting, &str, /*Ignored*/glib::Value, /*Ignored*/glib::ParamFlags), user_data: /*Unimplemented*/Option<Basic: Pointer>);

    #[doc(alias = "nm_connection_get_connection_type")]
    #[doc(alias = "get_connection_type")]
    fn connection_type(&self) -> Option<glib::GString>;

    #[doc(alias = "nm_connection_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> Option<glib::GString>;

    #[doc(alias = "nm_connection_get_interface_name")]
    #[doc(alias = "get_interface_name")]
    fn interface_name(&self) -> Option<glib::GString>;

    #[doc(alias = "nm_connection_get_path")]
    #[doc(alias = "get_path")]
    fn path(&self) -> Option<glib::GString>;

    #[doc(alias = "nm_connection_get_setting")]
    #[doc(alias = "get_setting")]
    fn setting(&self, setting_type: glib::types::Type) -> Option<Setting>;

    #[doc(alias = "nm_connection_get_setting_802_1x")]
    #[doc(alias = "get_setting_802_1x")]
    fn setting_802_1x(&self) -> Option<Setting8021x>;

    #[doc(alias = "nm_connection_get_setting_adsl")]
    #[doc(alias = "get_setting_adsl")]
    fn setting_adsl(&self) -> Option<SettingAdsl>;

    #[doc(alias = "nm_connection_get_setting_bluetooth")]
    #[doc(alias = "get_setting_bluetooth")]
    fn setting_bluetooth(&self) -> Option<SettingBluetooth>;

    #[doc(alias = "nm_connection_get_setting_bond")]
    #[doc(alias = "get_setting_bond")]
    fn setting_bond(&self) -> Option<SettingBond>;

    #[doc(alias = "nm_connection_get_setting_bridge")]
    #[doc(alias = "get_setting_bridge")]
    fn setting_bridge(&self) -> Option<SettingBridge>;

    #[doc(alias = "nm_connection_get_setting_bridge_port")]
    #[doc(alias = "get_setting_bridge_port")]
    fn setting_bridge_port(&self) -> Option<SettingBridgePort>;

    #[doc(alias = "nm_connection_get_setting_by_name")]
    #[doc(alias = "get_setting_by_name")]
    fn setting_by_name(&self, name: &str) -> Option<Setting>;

    #[doc(alias = "nm_connection_get_setting_cdma")]
    #[doc(alias = "get_setting_cdma")]
    fn setting_cdma(&self) -> Option<SettingCdma>;

    #[doc(alias = "nm_connection_get_setting_connection")]
    #[doc(alias = "get_setting_connection")]
    fn setting_connection(&self) -> Option<SettingConnection>;

    #[doc(alias = "nm_connection_get_setting_dcb")]
    #[doc(alias = "get_setting_dcb")]
    fn setting_dcb(&self) -> Option<SettingDcb>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
    #[doc(alias = "nm_connection_get_setting_dummy")]
    #[doc(alias = "get_setting_dummy")]
    fn setting_dummy(&self) -> Option<SettingDummy>;

    #[doc(alias = "nm_connection_get_setting_generic")]
    #[doc(alias = "get_setting_generic")]
    fn setting_generic(&self) -> Option<SettingGeneric>;

    #[doc(alias = "nm_connection_get_setting_gsm")]
    #[doc(alias = "get_setting_gsm")]
    fn setting_gsm(&self) -> Option<SettingGsm>;

    #[doc(alias = "nm_connection_get_setting_infiniband")]
    #[doc(alias = "get_setting_infiniband")]
    fn setting_infiniband(&self) -> Option<SettingInfiniband>;

    #[doc(alias = "nm_connection_get_setting_ip4_config")]
    #[doc(alias = "get_setting_ip4_config")]
    fn setting_ip4_config(&self) -> Option<SettingIP4Config>;

    #[doc(alias = "nm_connection_get_setting_ip6_config")]
    #[doc(alias = "get_setting_ip6_config")]
    fn setting_ip6_config(&self) -> Option<SettingIP6Config>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_connection_get_setting_ip_tunnel")]
    #[doc(alias = "get_setting_ip_tunnel")]
    fn setting_ip_tunnel(&self) -> Option<SettingIPTunnel>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_connection_get_setting_macsec")]
    #[doc(alias = "get_setting_macsec")]
    fn setting_macsec(&self) -> Option<SettingMacsec>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_connection_get_setting_macvlan")]
    #[doc(alias = "get_setting_macvlan")]
    fn setting_macvlan(&self) -> Option<SettingMacvlan>;

    #[doc(alias = "nm_connection_get_setting_olpc_mesh")]
    #[doc(alias = "get_setting_olpc_mesh")]
    fn setting_olpc_mesh(&self) -> Option<SettingOlpcMesh>;

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    #[doc(alias = "nm_connection_get_setting_ovs_bridge")]
    #[doc(alias = "get_setting_ovs_bridge")]
    fn setting_ovs_bridge(&self) -> Option<SettingOvsBridge>;

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    #[doc(alias = "nm_connection_get_setting_ovs_interface")]
    #[doc(alias = "get_setting_ovs_interface")]
    fn setting_ovs_interface(&self) -> Option<SettingOvsInterface>;

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    #[doc(alias = "nm_connection_get_setting_ovs_patch")]
    #[doc(alias = "get_setting_ovs_patch")]
    fn setting_ovs_patch(&self) -> Option<SettingOvsPatch>;

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    #[doc(alias = "nm_connection_get_setting_ovs_port")]
    #[doc(alias = "get_setting_ovs_port")]
    fn setting_ovs_port(&self) -> Option<SettingOvsPort>;

    #[doc(alias = "nm_connection_get_setting_ppp")]
    #[doc(alias = "get_setting_ppp")]
    fn setting_ppp(&self) -> Option<SettingPpp>;

    #[doc(alias = "nm_connection_get_setting_pppoe")]
    #[doc(alias = "get_setting_pppoe")]
    fn setting_pppoe(&self) -> Option<SettingPppoe>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_connection_get_setting_proxy")]
    #[doc(alias = "get_setting_proxy")]
    fn setting_proxy(&self) -> Option<SettingProxy>;

    #[doc(alias = "nm_connection_get_setting_serial")]
    #[doc(alias = "get_setting_serial")]
    fn setting_serial(&self) -> Option<SettingSerial>;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "nm_connection_get_setting_tc_config")]
    #[doc(alias = "get_setting_tc_config")]
    fn setting_tc_config(&self) -> Option<SettingTCConfig>;

    #[doc(alias = "nm_connection_get_setting_team")]
    #[doc(alias = "get_setting_team")]
    fn setting_team(&self) -> Option<SettingTeam>;

    #[doc(alias = "nm_connection_get_setting_team_port")]
    #[doc(alias = "get_setting_team_port")]
    fn setting_team_port(&self) -> Option<SettingTeamPort>;

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    #[doc(alias = "nm_connection_get_setting_tun")]
    #[doc(alias = "get_setting_tun")]
    fn setting_tun(&self) -> Option<SettingTun>;

    #[doc(alias = "nm_connection_get_setting_vlan")]
    #[doc(alias = "get_setting_vlan")]
    fn setting_vlan(&self) -> Option<SettingVlan>;

    #[doc(alias = "nm_connection_get_setting_vpn")]
    #[doc(alias = "get_setting_vpn")]
    fn setting_vpn(&self) -> Option<SettingVpn>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_connection_get_setting_vxlan")]
    #[doc(alias = "get_setting_vxlan")]
    fn setting_vxlan(&self) -> Option<SettingVxlan>;

    #[doc(alias = "nm_connection_get_setting_wimax")]
    #[doc(alias = "get_setting_wimax")]
    fn setting_wimax(&self) -> Option<SettingWimax>;

    #[doc(alias = "nm_connection_get_setting_wired")]
    #[doc(alias = "get_setting_wired")]
    fn setting_wired(&self) -> Option<SettingWired>;

    #[doc(alias = "nm_connection_get_setting_wireless")]
    #[doc(alias = "get_setting_wireless")]
    fn setting_wireless(&self) -> Option<SettingWireless>;

    #[doc(alias = "nm_connection_get_setting_wireless_security")]
    #[doc(alias = "get_setting_wireless_security")]
    fn setting_wireless_security(&self) -> Option<SettingWirelessSecurity>;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "nm_connection_get_settings")]
    #[doc(alias = "get_settings")]
    fn settings(&self) -> Vec<Setting>;

    #[doc(alias = "nm_connection_get_uuid")]
    #[doc(alias = "get_uuid")]
    fn uuid(&self) -> Option<glib::GString>;

    #[doc(alias = "nm_connection_get_virtual_device_description")]
    #[doc(alias = "get_virtual_device_description")]
    fn virtual_device_description(&self) -> Option<glib::GString>;

    #[doc(alias = "nm_connection_is_type")]
    fn is_type(&self, type_: &str) -> bool;

    #[doc(alias = "nm_connection_is_virtual")]
    fn is_virtual(&self) -> bool;

    #[doc(alias = "nm_connection_need_secrets")]
    fn need_secrets(&self) -> (glib::GString, Vec<glib::GString>);

    //#[doc(alias = "nm_connection_normalize")]
    //fn normalize(&self, parameters: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 25 }) -> Result<bool, glib::Error>;

    #[doc(alias = "nm_connection_remove_setting")]
    fn remove_setting(&self, setting_type: glib::types::Type);

    #[doc(alias = "nm_connection_replace_settings")]
    fn replace_settings(&self, new_settings: &glib::Variant) -> Result<(), glib::Error>;

    #[doc(alias = "nm_connection_replace_settings_from_connection")]
    fn replace_settings_from_connection(&self, new_connection: &impl IsA<Connection>);

    #[doc(alias = "nm_connection_set_path")]
    fn set_path(&self, path: &str);

    #[doc(alias = "nm_connection_to_dbus")]
    fn to_dbus(&self, flags: ConnectionSerializationFlags) -> Option<glib::Variant>;

    #[doc(alias = "nm_connection_update_secrets")]
    fn update_secrets(
        &self,
        setting_name: &str,
        secrets: &glib::Variant,
    ) -> Result<(), glib::Error>;

    #[doc(alias = "nm_connection_verify")]
    fn verify(&self) -> Result<(), glib::Error>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "nm_connection_verify_secrets")]
    fn verify_secrets(&self) -> Result<(), glib::Error>;

    #[doc(alias = "changed")]
    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "secrets-cleared")]
    fn connect_secrets_cleared<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "secrets-updated")]
    fn connect_secrets_updated<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Connection>> ConnectionExt for O {
    fn add_setting(&self, setting: impl IsA<Setting>) {
        unsafe {
            ffi::nm_connection_add_setting(
                self.as_ref().to_glib_none().0,
                setting.upcast().into_glib_ptr(),
            );
        }
    }

    fn clear_secrets(&self) {
        unsafe {
            ffi::nm_connection_clear_secrets(self.as_ref().to_glib_none().0);
        }
    }

    fn clear_settings(&self) {
        unsafe {
            ffi::nm_connection_clear_settings(self.as_ref().to_glib_none().0);
        }
    }

    fn compare(&self, b: &impl IsA<Connection>, flags: SettingCompareFlags) -> bool {
        unsafe {
            from_glib(ffi::nm_connection_compare(
                self.as_ref().to_glib_none().0,
                b.as_ref().to_glib_none().0,
                flags.into_glib(),
            ))
        }
    }

    //fn diff(&self, b: &impl IsA<Connection>, flags: SettingCompareFlags, out_settings: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 41 }) -> bool {
    //    unsafe { TODO: call ffi:nm_connection_diff() }
    //}

    fn dump(&self) {
        unsafe {
            ffi::nm_connection_dump(self.as_ref().to_glib_none().0);
        }
    }

    //fn for_each_setting_value(&self, func: /*Unimplemented*/FnMut(&Setting, &str, /*Ignored*/glib::Value, /*Ignored*/glib::ParamFlags), user_data: /*Unimplemented*/Option<Basic: Pointer>) {
    //    unsafe { TODO: call ffi:nm_connection_for_each_setting_value() }
    //}

    fn connection_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_connection_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn id(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_connection_get_id(self.as_ref().to_glib_none().0)) }
    }

    fn interface_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_interface_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn path(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_connection_get_path(self.as_ref().to_glib_none().0)) }
    }

    fn setting(&self, setting_type: glib::types::Type) -> Option<Setting> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting(
                self.as_ref().to_glib_none().0,
                setting_type.into_glib(),
            ))
        }
    }

    fn setting_802_1x(&self) -> Option<Setting8021x> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_802_1x(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_adsl(&self) -> Option<SettingAdsl> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_adsl(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_bluetooth(&self) -> Option<SettingBluetooth> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_bluetooth(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_bond(&self) -> Option<SettingBond> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_bond(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_bridge(&self) -> Option<SettingBridge> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_bridge(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_bridge_port(&self) -> Option<SettingBridgePort> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_bridge_port(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_by_name(&self, name: &str) -> Option<Setting> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_by_name(
                self.as_ref().to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }

    fn setting_cdma(&self) -> Option<SettingCdma> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_cdma(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_connection(&self) -> Option<SettingConnection> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_connection(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_dcb(&self) -> Option<SettingDcb> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_dcb(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
    fn setting_dummy(&self) -> Option<SettingDummy> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_dummy(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_generic(&self) -> Option<SettingGeneric> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_generic(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_gsm(&self) -> Option<SettingGsm> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_gsm(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_infiniband(&self) -> Option<SettingInfiniband> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_infiniband(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_ip4_config(&self) -> Option<SettingIP4Config> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ip4_config(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_ip6_config(&self) -> Option<SettingIP6Config> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ip6_config(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn setting_ip_tunnel(&self) -> Option<SettingIPTunnel> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ip_tunnel(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    fn setting_macsec(&self) -> Option<SettingMacsec> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_macsec(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn setting_macvlan(&self) -> Option<SettingMacvlan> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_macvlan(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_olpc_mesh(&self) -> Option<SettingOlpcMesh> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_olpc_mesh(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    fn setting_ovs_bridge(&self) -> Option<SettingOvsBridge> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ovs_bridge(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    fn setting_ovs_interface(&self) -> Option<SettingOvsInterface> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ovs_interface(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    fn setting_ovs_patch(&self) -> Option<SettingOvsPatch> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ovs_patch(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    fn setting_ovs_port(&self) -> Option<SettingOvsPort> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ovs_port(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_ppp(&self) -> Option<SettingPpp> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_ppp(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_pppoe(&self) -> Option<SettingPppoe> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_pppoe(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    fn setting_proxy(&self) -> Option<SettingProxy> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_proxy(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_serial(&self) -> Option<SettingSerial> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_serial(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    fn setting_tc_config(&self) -> Option<SettingTCConfig> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_tc_config(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_team(&self) -> Option<SettingTeam> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_team(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_team_port(&self) -> Option<SettingTeamPort> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_team_port(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_14")))]
    fn setting_tun(&self) -> Option<SettingTun> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_tun(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_vlan(&self) -> Option<SettingVlan> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_vlan(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_vpn(&self) -> Option<SettingVpn> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_vpn(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn setting_vxlan(&self) -> Option<SettingVxlan> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_vxlan(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_wimax(&self) -> Option<SettingWimax> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_wimax(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_wired(&self) -> Option<SettingWired> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_wired(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_wireless(&self) -> Option<SettingWireless> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_wireless(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn setting_wireless_security(&self) -> Option<SettingWirelessSecurity> {
        unsafe {
            from_glib_none(ffi::nm_connection_get_setting_wireless_security(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn settings(&self) -> Vec<Setting> {
        unsafe {
            let mut out_length = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_container_num(
                ffi::nm_connection_get_settings(
                    self.as_ref().to_glib_none().0,
                    out_length.as_mut_ptr(),
                ),
                out_length.assume_init() as _,
            );
            ret
        }
    }

    fn uuid(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_connection_get_uuid(self.as_ref().to_glib_none().0)) }
    }

    fn virtual_device_description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::nm_connection_get_virtual_device_description(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_type(&self, type_: &str) -> bool {
        unsafe {
            from_glib(ffi::nm_connection_is_type(
                self.as_ref().to_glib_none().0,
                type_.to_glib_none().0,
            ))
        }
    }

    fn is_virtual(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_connection_is_virtual(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn need_secrets(&self) -> (glib::GString, Vec<glib::GString>) {
        unsafe {
            let mut hints = ptr::null_mut();
            let ret = from_glib_none(ffi::nm_connection_need_secrets(
                self.as_ref().to_glib_none().0,
                &mut hints,
            ));
            (ret, FromGlibPtrContainer::from_glib_container(hints))
        }
    }

    //fn normalize(&self, parameters: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 25 }) -> Result<bool, glib::Error> {
    //    unsafe { TODO: call ffi:nm_connection_normalize() }
    //}

    fn remove_setting(&self, setting_type: glib::types::Type) {
        unsafe {
            ffi::nm_connection_remove_setting(
                self.as_ref().to_glib_none().0,
                setting_type.into_glib(),
            );
        }
    }

    fn replace_settings(&self, new_settings: &glib::Variant) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::nm_connection_replace_settings(
                self.as_ref().to_glib_none().0,
                new_settings.to_glib_none().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn replace_settings_from_connection(&self, new_connection: &impl IsA<Connection>) {
        unsafe {
            ffi::nm_connection_replace_settings_from_connection(
                self.as_ref().to_glib_none().0,
                new_connection.as_ref().to_glib_none().0,
            );
        }
    }

    fn set_path(&self, path: &str) {
        unsafe {
            ffi::nm_connection_set_path(self.as_ref().to_glib_none().0, path.to_glib_none().0);
        }
    }

    fn to_dbus(&self, flags: ConnectionSerializationFlags) -> Option<glib::Variant> {
        unsafe {
            from_glib_none(ffi::nm_connection_to_dbus(
                self.as_ref().to_glib_none().0,
                flags.into_glib(),
            ))
        }
    }

    fn update_secrets(
        &self,
        setting_name: &str,
        secrets: &glib::Variant,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::nm_connection_update_secrets(
                self.as_ref().to_glib_none().0,
                setting_name.to_glib_none().0,
                secrets.to_glib_none().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn verify(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::nm_connection_verify(self.as_ref().to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    fn verify_secrets(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok =
                ffi::nm_connection_verify_secrets(self.as_ref().to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<P: IsA<Connection>, F: Fn(&P) + 'static>(
            this: *mut ffi::NMConnection,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Connection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_secrets_cleared<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn secrets_cleared_trampoline<P: IsA<Connection>, F: Fn(&P) + 'static>(
            this: *mut ffi::NMConnection,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Connection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"secrets-cleared\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    secrets_cleared_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_secrets_updated<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn secrets_updated_trampoline<
            P: IsA<Connection>,
            F: Fn(&P, &str) + 'static,
        >(
            this: *mut ffi::NMConnection,
            setting_name: *mut libc::c_char,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                Connection::from_glib_borrow(this).unsafe_cast_ref(),
                &glib::GString::from_glib_borrow(setting_name),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"secrets-updated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    secrets_updated_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Connection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Connection")
    }
}
