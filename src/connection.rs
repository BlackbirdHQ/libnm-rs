// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use libc;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use std::mem;
use std::mem::transmute;
use std::ptr;
use ConnectionSerializationFlags;
use Setting;
use Setting8021x;
use SettingAdsl;
use SettingBluetooth;
use SettingBond;
use SettingBridge;
use SettingBridgePort;
use SettingCdma;
use SettingCompareFlags;
use SettingConnection;
use SettingDcb;
#[cfg(any(feature = "v1_8", feature = "dox"))]
use SettingDummy;
use SettingGeneric;
use SettingGsm;
use SettingIP4Config;
use SettingIP6Config;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use SettingIPTunnel;
use SettingInfiniband;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use SettingMacsec;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use SettingMacvlan;
use SettingOlpcMesh;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use SettingOvsBridge;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use SettingOvsInterface;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use SettingOvsPatch;
#[cfg(any(feature = "v1_10", feature = "dox"))]
use SettingOvsPort;
use SettingPpp;
use SettingPppoe;
#[cfg(any(feature = "v1_6", feature = "dox"))]
use SettingProxy;
use SettingSerial;
#[cfg(any(feature = "v1_12", feature = "dox"))]
use SettingTCConfig;
use SettingTeam;
use SettingTeamPort;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use SettingTun;
use SettingVlan;
use SettingVpn;
#[cfg(any(feature = "v1_2", feature = "dox"))]
use SettingVxlan;
use SettingWimax;
use SettingWired;
use SettingWireless;
use SettingWirelessSecurity;

glib_wrapper! {
    pub struct Connection(Interface<nm_sys::NMConnection>);

    match fn {
        get_type => || nm_sys::nm_connection_get_type(),
    }
}

pub const NONE_CONNECTION: Option<&Connection> = None;

pub trait ConnectionExt: 'static {
    fn add_setting<P: IsA<Setting>>(&self, setting: &P);

    fn clear_secrets(&self);

    fn clear_settings(&self);

    fn compare<P: IsA<Connection>>(&self, b: &P, flags: SettingCompareFlags) -> bool;

    //fn diff<P: IsA<Connection>>(&self, b: &P, flags: SettingCompareFlags, out_settings: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 40 }) -> bool;

    fn dump(&self);

    //fn for_each_setting_value(&self, func: /*Unimplemented*/FnMut(&Setting, &str, /*Ignored*/glib::Value, /*Ignored*/glib::ParamFlags), user_data: /*Unimplemented*/Option<Fundamental: Pointer>);

    fn get_connection_type(&self) -> Option<GString>;

    fn get_id(&self) -> Option<GString>;

    fn get_interface_name(&self) -> Option<GString>;

    fn get_path(&self) -> Option<GString>;

    fn get_setting(&self, setting_type: glib::types::Type) -> Option<Setting>;

    fn get_setting_802_1x(&self) -> Option<Setting8021x>;

    fn get_setting_adsl(&self) -> Option<SettingAdsl>;

    fn get_setting_bluetooth(&self) -> Option<SettingBluetooth>;

    fn get_setting_bond(&self) -> Option<SettingBond>;

    fn get_setting_bridge(&self) -> Option<SettingBridge>;

    fn get_setting_bridge_port(&self) -> Option<SettingBridgePort>;

    fn get_setting_by_name(&self, name: &str) -> Option<Setting>;

    fn get_setting_cdma(&self) -> Option<SettingCdma>;

    fn get_setting_connection(&self) -> Option<SettingConnection>;

    fn get_setting_dcb(&self) -> Option<SettingDcb>;

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_setting_dummy(&self) -> Option<SettingDummy>;

    fn get_setting_generic(&self) -> Option<SettingGeneric>;

    fn get_setting_gsm(&self) -> Option<SettingGsm>;

    fn get_setting_infiniband(&self) -> Option<SettingInfiniband>;

    fn get_setting_ip4_config(&self) -> Option<SettingIP4Config>;

    fn get_setting_ip6_config(&self) -> Option<SettingIP6Config>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_setting_ip_tunnel(&self) -> Option<SettingIPTunnel>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_setting_macsec(&self) -> Option<SettingMacsec>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_setting_macvlan(&self) -> Option<SettingMacvlan>;

    fn get_setting_olpc_mesh(&self) -> Option<SettingOlpcMesh>;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_bridge(&self) -> Option<SettingOvsBridge>;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_interface(&self) -> Option<SettingOvsInterface>;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_patch(&self) -> Option<SettingOvsPatch>;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_port(&self) -> Option<SettingOvsPort>;

    fn get_setting_ppp(&self) -> Option<SettingPpp>;

    fn get_setting_pppoe(&self) -> Option<SettingPppoe>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_setting_proxy(&self) -> Option<SettingProxy>;

    fn get_setting_serial(&self) -> Option<SettingSerial>;

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_setting_tc_config(&self) -> Option<SettingTCConfig>;

    fn get_setting_team(&self) -> Option<SettingTeam>;

    fn get_setting_team_port(&self) -> Option<SettingTeamPort>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_setting_tun(&self) -> Option<SettingTun>;

    fn get_setting_vlan(&self) -> Option<SettingVlan>;

    fn get_setting_vpn(&self) -> Option<SettingVpn>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_setting_vxlan(&self) -> Option<SettingVxlan>;

    fn get_setting_wimax(&self) -> Option<SettingWimax>;

    fn get_setting_wired(&self) -> Option<SettingWired>;

    fn get_setting_wireless(&self) -> Option<SettingWireless>;

    fn get_setting_wireless_security(&self) -> Option<SettingWirelessSecurity>;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_settings(&self) -> Vec<Setting>;

    fn get_uuid(&self) -> Option<GString>;

    fn get_virtual_device_description(&self) -> Option<GString>;

    fn is_type(&self, type_: &str) -> bool;

    fn is_virtual(&self) -> bool;

    fn need_secrets(&self) -> (GString, Vec<GString>);

    //fn normalize(&self, parameters: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 25 }) -> Result<bool, glib::Error>;

    fn remove_setting(&self, setting_type: glib::types::Type);

    fn replace_settings(&self, new_settings: &glib::Variant) -> Result<(), glib::Error>;

    fn replace_settings_from_connection<P: IsA<Connection>>(&self, new_connection: &P);

    fn set_path(&self, path: &str);

    fn to_dbus(&self, flags: ConnectionSerializationFlags) -> Option<glib::Variant>;

    fn update_secrets(
        &self,
        setting_name: &str,
        secrets: &glib::Variant,
    ) -> Result<(), glib::Error>;

    fn verify(&self) -> Result<(), glib::Error>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn verify_secrets(&self) -> Result<(), glib::Error>;

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_secrets_cleared<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_secrets_updated<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Connection>> ConnectionExt for O {
    fn add_setting<P: IsA<Setting>>(&self, setting: &P) {
        unsafe {
            nm_sys::nm_connection_add_setting(
                self.as_ref().to_glib_none().0,
                setting.as_ref().to_glib_full(),
            );
        }
    }

    fn clear_secrets(&self) {
        unsafe {
            nm_sys::nm_connection_clear_secrets(self.as_ref().to_glib_none().0);
        }
    }

    fn clear_settings(&self) {
        unsafe {
            nm_sys::nm_connection_clear_settings(self.as_ref().to_glib_none().0);
        }
    }

    fn compare<P: IsA<Connection>>(&self, b: &P, flags: SettingCompareFlags) -> bool {
        unsafe {
            from_glib(nm_sys::nm_connection_compare(
                self.as_ref().to_glib_none().0,
                b.as_ref().to_glib_none().0,
                flags.to_glib(),
            ))
        }
    }

    //fn diff<P: IsA<Connection>>(&self, b: &P, flags: SettingCompareFlags, out_settings: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 40 }) -> bool {
    //    unsafe { TODO: call nm_sys:nm_connection_diff() }
    //}

    fn dump(&self) {
        unsafe {
            nm_sys::nm_connection_dump(self.as_ref().to_glib_none().0);
        }
    }

    //fn for_each_setting_value(&self, func: /*Unimplemented*/FnMut(&Setting, &str, /*Ignored*/glib::Value, /*Ignored*/glib::ParamFlags), user_data: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call nm_sys:nm_connection_for_each_setting_value() }
    //}

    fn get_connection_type(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_connection_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_id(&self) -> Option<GString> {
        unsafe { from_glib_none(nm_sys::nm_connection_get_id(self.as_ref().to_glib_none().0)) }
    }

    fn get_interface_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_interface_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_path(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_path(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting(&self, setting_type: glib::types::Type) -> Option<Setting> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting(
                self.as_ref().to_glib_none().0,
                setting_type.to_glib(),
            ))
        }
    }

    fn get_setting_802_1x(&self) -> Option<Setting8021x> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_802_1x(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_adsl(&self) -> Option<SettingAdsl> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_adsl(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_bluetooth(&self) -> Option<SettingBluetooth> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_bluetooth(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_bond(&self) -> Option<SettingBond> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_bond(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_bridge(&self) -> Option<SettingBridge> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_bridge(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_bridge_port(&self) -> Option<SettingBridgePort> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_bridge_port(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_by_name(&self, name: &str) -> Option<Setting> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_by_name(
                self.as_ref().to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }

    fn get_setting_cdma(&self) -> Option<SettingCdma> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_cdma(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_connection(&self) -> Option<SettingConnection> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_connection(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_dcb(&self) -> Option<SettingDcb> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_dcb(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_8", feature = "dox"))]
    fn get_setting_dummy(&self) -> Option<SettingDummy> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_dummy(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_generic(&self) -> Option<SettingGeneric> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_generic(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_gsm(&self) -> Option<SettingGsm> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_gsm(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_infiniband(&self) -> Option<SettingInfiniband> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_infiniband(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_ip4_config(&self) -> Option<SettingIP4Config> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_ip4_config(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_ip6_config(&self) -> Option<SettingIP6Config> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_ip6_config(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_setting_ip_tunnel(&self) -> Option<SettingIPTunnel> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_ip_tunnel(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_setting_macsec(&self) -> Option<SettingMacsec> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_macsec(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_setting_macvlan(&self) -> Option<SettingMacvlan> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_macvlan(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_olpc_mesh(&self) -> Option<SettingOlpcMesh> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_olpc_mesh(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_bridge(&self) -> Option<SettingOvsBridge> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_ovs_bridge(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_interface(&self) -> Option<SettingOvsInterface> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_ovs_interface(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_patch(&self) -> Option<SettingOvsPatch> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_ovs_patch(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_setting_ovs_port(&self) -> Option<SettingOvsPort> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_ovs_port(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_ppp(&self) -> Option<SettingPpp> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_ppp(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_pppoe(&self) -> Option<SettingPppoe> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_pppoe(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_setting_proxy(&self) -> Option<SettingProxy> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_proxy(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_serial(&self) -> Option<SettingSerial> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_serial(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    fn get_setting_tc_config(&self) -> Option<SettingTCConfig> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_tc_config(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_team(&self) -> Option<SettingTeam> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_team(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_team_port(&self) -> Option<SettingTeamPort> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_team_port(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_setting_tun(&self) -> Option<SettingTun> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_tun(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_vlan(&self) -> Option<SettingVlan> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_vlan(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_vpn(&self) -> Option<SettingVpn> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_vpn(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_setting_vxlan(&self) -> Option<SettingVxlan> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_vxlan(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_wimax(&self) -> Option<SettingWimax> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_wimax(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_wired(&self) -> Option<SettingWired> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_wired(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_wireless(&self) -> Option<SettingWireless> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_wireless(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_setting_wireless_security(&self) -> Option<SettingWirelessSecurity> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_setting_wireless_security(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    fn get_settings(&self) -> Vec<Setting> {
        unsafe {
            let mut out_length = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_container_num(
                nm_sys::nm_connection_get_settings(
                    self.as_ref().to_glib_none().0,
                    out_length.as_mut_ptr(),
                ),
                out_length.assume_init() as usize,
            );
            ret
        }
    }

    fn get_uuid(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_get_uuid(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_virtual_device_description(&self) -> Option<GString> {
        unsafe {
            from_glib_full(nm_sys::nm_connection_get_virtual_device_description(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_type(&self, type_: &str) -> bool {
        unsafe {
            from_glib(nm_sys::nm_connection_is_type(
                self.as_ref().to_glib_none().0,
                type_.to_glib_none().0,
            ))
        }
    }

    fn is_virtual(&self) -> bool {
        unsafe {
            from_glib(nm_sys::nm_connection_is_virtual(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn need_secrets(&self) -> (GString, Vec<GString>) {
        unsafe {
            let mut hints = ptr::null_mut();
            let ret = from_glib_none(nm_sys::nm_connection_need_secrets(
                self.as_ref().to_glib_none().0,
                &mut hints,
            ));
            (ret, FromGlibPtrContainer::from_glib_container(hints))
        }
    }

    //fn normalize(&self, parameters: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 25 }) -> Result<bool, glib::Error> {
    //    unsafe { TODO: call nm_sys:nm_connection_normalize() }
    //}

    fn remove_setting(&self, setting_type: glib::types::Type) {
        unsafe {
            nm_sys::nm_connection_remove_setting(
                self.as_ref().to_glib_none().0,
                setting_type.to_glib(),
            );
        }
    }

    fn replace_settings(&self, new_settings: &glib::Variant) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_connection_replace_settings(
                self.as_ref().to_glib_none().0,
                new_settings.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn replace_settings_from_connection<P: IsA<Connection>>(&self, new_connection: &P) {
        unsafe {
            nm_sys::nm_connection_replace_settings_from_connection(
                self.as_ref().to_glib_none().0,
                new_connection.as_ref().to_glib_none().0,
            );
        }
    }

    fn set_path(&self, path: &str) {
        unsafe {
            nm_sys::nm_connection_set_path(self.as_ref().to_glib_none().0, path.to_glib_none().0);
        }
    }

    fn to_dbus(&self, flags: ConnectionSerializationFlags) -> Option<glib::Variant> {
        unsafe {
            from_glib_none(nm_sys::nm_connection_to_dbus(
                self.as_ref().to_glib_none().0,
                flags.to_glib(),
            ))
        }
    }

    fn update_secrets(
        &self,
        setting_name: &str,
        secrets: &glib::Variant,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_connection_update_secrets(
                self.as_ref().to_glib_none().0,
                setting_name.to_glib_none().0,
                secrets.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn verify(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = nm_sys::nm_connection_verify(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn verify_secrets(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ =
                nm_sys::nm_connection_verify_secrets(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMConnection,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Connection>,
        {
            let f: &F = &*(f as *const F);
            f(&Connection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"changed\0".as_ptr() as *const _,
                Some(transmute(changed_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_secrets_cleared<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn secrets_cleared_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMConnection,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Connection>,
        {
            let f: &F = &*(f as *const F);
            f(&Connection::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"secrets-cleared\0".as_ptr() as *const _,
                Some(transmute(secrets_cleared_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_secrets_updated<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn secrets_updated_trampoline<P, F: Fn(&P, &str) + 'static>(
            this: *mut nm_sys::NMConnection,
            setting_name: *mut libc::c_char,
            f: glib_sys::gpointer,
        ) where
            P: IsA<Connection>,
        {
            let f: &F = &*(f as *const F);
            f(
                &Connection::from_glib_borrow(this).unsafe_cast(),
                &GString::from_glib_borrow(setting_name),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"secrets-updated\0".as_ptr() as *const _,
                Some(transmute(secrets_updated_trampoline::<Self, F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Connection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Connection")
    }
}
