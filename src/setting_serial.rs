// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::Value;
use glib_sys;
use gobject_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Setting;
use SettingSerialParity;

glib_wrapper! {
    pub struct SettingSerial(Object<nm_sys::NMSettingSerial, nm_sys::NMSettingSerialClass, SettingSerialClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_serial_get_type(),
    }
}

impl SettingSerial {
    /// Creates a new `SettingSerial` object with default values.
    ///
    /// # Returns
    ///
    /// the new empty `SettingSerial` object
    pub fn new() -> SettingSerial {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_serial_new()).unsafe_cast() }
    }
}

impl Default for SettingSerial {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_SERIAL: Option<&SettingSerial> = None;

/// Trait containing all `SettingSerial` methods.
///
/// # Implementors
///
/// [`SettingSerial`](struct.SettingSerial.html)
pub trait SettingSerialExt: 'static {
    ///
    /// # Returns
    ///
    /// the `SettingSerial:baud` property of the setting
    fn get_baud(&self) -> u32;

    ///
    /// # Returns
    ///
    /// the `SettingSerial:bits` property of the setting
    fn get_bits(&self) -> u32;

    ///
    /// # Returns
    ///
    /// the `SettingSerial:parity` property of the setting
    fn get_parity(&self) -> SettingSerialParity;

    ///
    /// # Returns
    ///
    /// the `SettingSerial:send-delay` property of the setting
    fn get_send_delay(&self) -> u64;

    ///
    /// # Returns
    ///
    /// the `SettingSerial:stopbits` property of the setting
    fn get_stopbits(&self) -> u32;

    /// Speed to use for communication over the serial port. Note that this
    /// value usually has no effect for mobile broadband modems as they generally
    /// ignore speed settings and use the highest available speed.
    fn set_property_baud(&self, baud: u32);

    /// Byte-width of the serial communication. The 8 in "8n1" for example.
    fn set_property_bits(&self, bits: u32);

    /// Parity setting of the serial port.
    fn set_property_parity(&self, parity: SettingSerialParity);

    /// Time to delay between each byte sent to the modem, in microseconds.
    fn set_property_send_delay(&self, send_delay: u64);

    /// Number of stop bits for communication on the serial port. Either 1 or 2.
    /// The 1 in "8n1" for example.
    fn set_property_stopbits(&self, stopbits: u32);

    fn connect_property_baud_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_bits_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_parity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_send_delay_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_stopbits_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingSerial>> SettingSerialExt for O {
    fn get_baud(&self) -> u32 {
        unsafe { nm_sys::nm_setting_serial_get_baud(self.as_ref().to_glib_none().0) }
    }

    fn get_bits(&self) -> u32 {
        unsafe { nm_sys::nm_setting_serial_get_bits(self.as_ref().to_glib_none().0) }
    }

    fn get_parity(&self) -> SettingSerialParity {
        unsafe {
            from_glib(nm_sys::nm_setting_serial_get_parity(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_send_delay(&self) -> u64 {
        unsafe { nm_sys::nm_setting_serial_get_send_delay(self.as_ref().to_glib_none().0) }
    }

    fn get_stopbits(&self) -> u32 {
        unsafe { nm_sys::nm_setting_serial_get_stopbits(self.as_ref().to_glib_none().0) }
    }

    fn set_property_baud(&self, baud: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"baud\0".as_ptr() as *const _,
                Value::from(&baud).to_glib_none().0,
            );
        }
    }

    fn set_property_bits(&self, bits: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"bits\0".as_ptr() as *const _,
                Value::from(&bits).to_glib_none().0,
            );
        }
    }

    fn set_property_parity(&self, parity: SettingSerialParity) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"parity\0".as_ptr() as *const _,
                Value::from(&parity).to_glib_none().0,
            );
        }
    }

    fn set_property_send_delay(&self, send_delay: u64) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"send-delay\0".as_ptr() as *const _,
                Value::from(&send_delay).to_glib_none().0,
            );
        }
    }

    fn set_property_stopbits(&self, stopbits: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"stopbits\0".as_ptr() as *const _,
                Value::from(&stopbits).to_glib_none().0,
            );
        }
    }

    fn connect_property_baud_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_baud_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingSerial,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingSerial>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingSerial::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::baud\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_baud_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_bits_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bits_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingSerial,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingSerial>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingSerial::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::bits\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_bits_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_parity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parity_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingSerial,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingSerial>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingSerial::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parity\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parity_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_send_delay_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_send_delay_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingSerial,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingSerial>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingSerial::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::send-delay\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_send_delay_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_stopbits_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_stopbits_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingSerial,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingSerial>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingSerial::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::stopbits\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_stopbits_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingSerial {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingSerial")
    }
}
