// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
use crate::SettingSerialParity;
use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMSettingSerial")]
    pub struct SettingSerial(Object<ffi::NMSettingSerial, ffi::NMSettingSerialClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_serial_get_type(),
    }
}

impl SettingSerial {
    /// Creates a new [`SettingSerial`][crate::SettingSerial] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingSerial`][crate::SettingSerial] object
    #[doc(alias = "nm_setting_serial_new")]
    pub fn new() -> SettingSerial {
        unsafe { Setting::from_glib_full(ffi::nm_setting_serial_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingSerial::baud` property of the setting
    #[doc(alias = "nm_setting_serial_get_baud")]
    #[doc(alias = "get_baud")]
    pub fn baud(&self) -> u32 {
        unsafe { ffi::nm_setting_serial_get_baud(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingSerial::bits` property of the setting
    #[doc(alias = "nm_setting_serial_get_bits")]
    #[doc(alias = "get_bits")]
    pub fn bits(&self) -> u32 {
        unsafe { ffi::nm_setting_serial_get_bits(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingSerial::parity` property of the setting
    #[doc(alias = "nm_setting_serial_get_parity")]
    #[doc(alias = "get_parity")]
    pub fn parity(&self) -> SettingSerialParity {
        unsafe { from_glib(ffi::nm_setting_serial_get_parity(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingSerial::send-delay` property of the setting
    #[doc(alias = "nm_setting_serial_get_send_delay")]
    #[doc(alias = "get_send_delay")]
    pub fn send_delay(&self) -> u64 {
        unsafe { ffi::nm_setting_serial_get_send_delay(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingSerial::stopbits` property of the setting
    #[doc(alias = "nm_setting_serial_get_stopbits")]
    #[doc(alias = "get_stopbits")]
    pub fn stopbits(&self) -> u32 {
        unsafe { ffi::nm_setting_serial_get_stopbits(self.to_glib_none().0) }
    }

    /// Speed to use for communication over the serial port. Note that this
    /// value usually has no effect for mobile broadband modems as they generally
    /// ignore speed settings and use the highest available speed.
    pub fn set_baud(&self, baud: u32) {
        glib::ObjectExt::set_property(self, "baud", &baud)
    }

    /// Byte-width of the serial communication. The 8 in "8n1" for example.
    pub fn set_bits(&self, bits: u32) {
        glib::ObjectExt::set_property(self, "bits", &bits)
    }

    /// Parity setting of the serial port.
    pub fn set_parity(&self, parity: SettingSerialParity) {
        glib::ObjectExt::set_property(self, "parity", &parity)
    }

    /// Time to delay between each byte sent to the modem, in microseconds.
    #[doc(alias = "send-delay")]
    pub fn set_send_delay(&self, send_delay: u64) {
        glib::ObjectExt::set_property(self, "send-delay", &send_delay)
    }

    /// Number of stop bits for communication on the serial port. Either 1 or 2.
    /// The 1 in "8n1" for example.
    pub fn set_stopbits(&self, stopbits: u32) {
        glib::ObjectExt::set_property(self, "stopbits", &stopbits)
    }

    #[doc(alias = "baud")]
    pub fn connect_baud_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_baud_trampoline<F: Fn(&SettingSerial) + 'static>(
            this: *mut ffi::NMSettingSerial,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::baud\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_baud_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "bits")]
    pub fn connect_bits_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bits_trampoline<F: Fn(&SettingSerial) + 'static>(
            this: *mut ffi::NMSettingSerial,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::bits\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_bits_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "parity")]
    pub fn connect_parity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parity_trampoline<F: Fn(&SettingSerial) + 'static>(
            this: *mut ffi::NMSettingSerial,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parity\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parity_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "send-delay")]
    pub fn connect_send_delay_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_send_delay_trampoline<F: Fn(&SettingSerial) + 'static>(
            this: *mut ffi::NMSettingSerial,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::send-delay\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_send_delay_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "stopbits")]
    pub fn connect_stopbits_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_stopbits_trampoline<F: Fn(&SettingSerial) + 'static>(
            this: *mut ffi::NMSettingSerial,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::stopbits\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_stopbits_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for SettingSerial {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingSerial {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingSerial")
    }
}
