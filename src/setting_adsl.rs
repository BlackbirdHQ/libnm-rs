// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Setting;
use crate::SettingSecretFlags;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::Value;
use glib_sys;
use gobject_sys;
use nm_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct SettingAdsl(Object<nm_sys::NMSettingAdsl, nm_sys::NMSettingAdslClass, SettingAdslClass>) @extends Setting;

    match fn {
        get_type => || nm_sys::nm_setting_adsl_get_type(),
    }
}

impl SettingAdsl {
    /// Creates a new `SettingAdsl` object with default values.
    ///
    /// # Returns
    ///
    /// the new empty `SettingAdsl` object
    pub fn new() -> SettingAdsl {
        unsafe { Setting::from_glib_full(nm_sys::nm_setting_adsl_new()).unsafe_cast() }
    }
}

impl Default for SettingAdsl {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTING_ADSL: Option<&SettingAdsl> = None;

/// Trait containing all `SettingAdsl` methods.
///
/// # Implementors
///
/// [`SettingAdsl`](struct.SettingAdsl.html)
pub trait SettingAdslExt: 'static {
    ///
    /// # Returns
    ///
    /// the `SettingAdsl:encapsulation` property of the setting
    fn get_encapsulation(&self) -> Option<GString>;

    ///
    /// # Returns
    ///
    /// the `SettingAdsl:password` property of the setting
    fn get_password(&self) -> Option<GString>;

    ///
    /// # Returns
    ///
    /// the `SettingSecretFlags` pertaining to the `SettingAdsl:password`
    fn get_password_flags(&self) -> SettingSecretFlags;

    ///
    /// # Returns
    ///
    /// the `SettingAdsl:protocol` property of the setting
    fn get_protocol(&self) -> Option<GString>;

    ///
    /// # Returns
    ///
    /// the `SettingAdsl:username` property of the setting
    fn get_username(&self) -> Option<GString>;

    ///
    /// # Returns
    ///
    /// the `SettingAdsl:vci` property of the setting
    fn get_vci(&self) -> u32;

    ///
    /// # Returns
    ///
    /// the `SettingAdsl:vpi` property of the setting
    fn get_vpi(&self) -> u32;

    /// Encapsulation of ADSL connection. Can be "vcmux" or "llc".
    fn set_property_encapsulation(&self, encapsulation: Option<&str>);

    /// Password used to authenticate with the ADSL service.
    fn set_property_password(&self, password: Option<&str>);

    /// Flags indicating how to handle the `SettingAdsl:password` property.
    fn set_property_password_flags(&self, password_flags: SettingSecretFlags);

    /// ADSL connection protocol. Can be "pppoa", "pppoe" or "ipoatm".
    fn set_property_protocol(&self, protocol: Option<&str>);

    /// Username used to authenticate with the ADSL service.
    fn set_property_username(&self, username: Option<&str>);

    /// VCI of ADSL connection
    fn set_property_vci(&self, vci: u32);

    /// VPI of ADSL connection
    fn set_property_vpi(&self, vpi: u32);

    fn connect_property_encapsulation_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_password_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_protocol_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_username_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vci_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vpi_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SettingAdsl>> SettingAdslExt for O {
    fn get_encapsulation(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_adsl_get_encapsulation(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_password(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_adsl_get_password(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_password_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(nm_sys::nm_setting_adsl_get_password_flags(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_protocol(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_adsl_get_protocol(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_username(&self) -> Option<GString> {
        unsafe {
            from_glib_none(nm_sys::nm_setting_adsl_get_username(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_vci(&self) -> u32 {
        unsafe { nm_sys::nm_setting_adsl_get_vci(self.as_ref().to_glib_none().0) }
    }

    fn get_vpi(&self) -> u32 {
        unsafe { nm_sys::nm_setting_adsl_get_vpi(self.as_ref().to_glib_none().0) }
    }

    fn set_property_encapsulation(&self, encapsulation: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"encapsulation\0".as_ptr() as *const _,
                Value::from(encapsulation).to_glib_none().0,
            );
        }
    }

    fn set_property_password(&self, password: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"password\0".as_ptr() as *const _,
                Value::from(password).to_glib_none().0,
            );
        }
    }

    fn set_property_password_flags(&self, password_flags: SettingSecretFlags) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"password-flags\0".as_ptr() as *const _,
                Value::from(&password_flags).to_glib_none().0,
            );
        }
    }

    fn set_property_protocol(&self, protocol: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"protocol\0".as_ptr() as *const _,
                Value::from(protocol).to_glib_none().0,
            );
        }
    }

    fn set_property_username(&self, username: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"username\0".as_ptr() as *const _,
                Value::from(username).to_glib_none().0,
            );
        }
    }

    fn set_property_vci(&self, vci: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"vci\0".as_ptr() as *const _,
                Value::from(&vci).to_glib_none().0,
            );
        }
    }

    fn set_property_vpi(&self, vpi: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"vpi\0".as_ptr() as *const _,
                Value::from(&vpi).to_glib_none().0,
            );
        }
    }

    fn connect_property_encapsulation_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_encapsulation_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingAdsl,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingAdsl>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingAdsl::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::encapsulation\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_encapsulation_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_password_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_password_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingAdsl,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingAdsl>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingAdsl::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::password\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_password_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_password_flags_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_password_flags_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingAdsl,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingAdsl>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingAdsl::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::password-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_password_flags_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_protocol_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_protocol_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingAdsl,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingAdsl>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingAdsl::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::protocol\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_protocol_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_username_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_username_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingAdsl,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingAdsl>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingAdsl::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::username\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_username_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_vci_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vci_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingAdsl,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingAdsl>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingAdsl::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vci\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vci_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_vpi_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vpi_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut nm_sys::NMSettingAdsl,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<SettingAdsl>,
        {
            let f: &F = &*(f as *const F);
            f(&SettingAdsl::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vpi\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vpi_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SettingAdsl {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SettingAdsl")
    }
}
