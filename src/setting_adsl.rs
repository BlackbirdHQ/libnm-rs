// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Setting;
use crate::SettingSecretFlags;
use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "NMSettingAdsl")]
    pub struct SettingAdsl(Object<ffi::NMSettingAdsl, ffi::NMSettingAdslClass>) @extends Setting;

    match fn {
        type_ => || ffi::nm_setting_adsl_get_type(),
    }
}

impl SettingAdsl {
    /// Creates a new [`SettingAdsl`][crate::SettingAdsl] object with default values.
    ///
    /// # Returns
    ///
    /// the new empty [`SettingAdsl`][crate::SettingAdsl] object
    #[doc(alias = "nm_setting_adsl_new")]
    pub fn new() -> SettingAdsl {
        unsafe { Setting::from_glib_full(ffi::nm_setting_adsl_new()).unsafe_cast() }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingAdsl::encapsulation` property of the setting
    #[doc(alias = "nm_setting_adsl_get_encapsulation")]
    #[doc(alias = "get_encapsulation")]
    pub fn encapsulation(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::nm_setting_adsl_get_encapsulation(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingAdsl::password` property of the setting
    #[doc(alias = "nm_setting_adsl_get_password")]
    #[doc(alias = "get_password")]
    pub fn password(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_adsl_get_password(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the [`SettingSecretFlags`][crate::SettingSecretFlags] pertaining to the `property::SettingAdsl::password`
    #[doc(alias = "nm_setting_adsl_get_password_flags")]
    #[doc(alias = "get_password_flags")]
    pub fn password_flags(&self) -> SettingSecretFlags {
        unsafe {
            from_glib(ffi::nm_setting_adsl_get_password_flags(
                self.to_glib_none().0,
            ))
        }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingAdsl::protocol` property of the setting
    #[doc(alias = "nm_setting_adsl_get_protocol")]
    #[doc(alias = "get_protocol")]
    pub fn protocol(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_adsl_get_protocol(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingAdsl::username` property of the setting
    #[doc(alias = "nm_setting_adsl_get_username")]
    #[doc(alias = "get_username")]
    pub fn username(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::nm_setting_adsl_get_username(self.to_glib_none().0)) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingAdsl::vci` property of the setting
    #[doc(alias = "nm_setting_adsl_get_vci")]
    #[doc(alias = "get_vci")]
    pub fn vci(&self) -> u32 {
        unsafe { ffi::nm_setting_adsl_get_vci(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// the `property::SettingAdsl::vpi` property of the setting
    #[doc(alias = "nm_setting_adsl_get_vpi")]
    #[doc(alias = "get_vpi")]
    pub fn vpi(&self) -> u32 {
        unsafe { ffi::nm_setting_adsl_get_vpi(self.to_glib_none().0) }
    }

    /// Encapsulation of ADSL connection. Can be "vcmux" or "llc".
    pub fn set_encapsulation(&self, encapsulation: Option<&str>) {
        glib::ObjectExt::set_property(self, "encapsulation", &encapsulation)
    }

    /// Password used to authenticate with the ADSL service.
    pub fn set_password(&self, password: Option<&str>) {
        glib::ObjectExt::set_property(self, "password", &password)
    }

    /// Flags indicating how to handle the `property::SettingAdsl::password` property.
    #[doc(alias = "password-flags")]
    pub fn set_password_flags(&self, password_flags: SettingSecretFlags) {
        glib::ObjectExt::set_property(self, "password-flags", &password_flags)
    }

    /// ADSL connection protocol. Can be "pppoa", "pppoe" or "ipoatm".
    pub fn set_protocol(&self, protocol: Option<&str>) {
        glib::ObjectExt::set_property(self, "protocol", &protocol)
    }

    /// Username used to authenticate with the ADSL service.
    pub fn set_username(&self, username: Option<&str>) {
        glib::ObjectExt::set_property(self, "username", &username)
    }

    /// VCI of ADSL connection
    pub fn set_vci(&self, vci: u32) {
        glib::ObjectExt::set_property(self, "vci", &vci)
    }

    /// VPI of ADSL connection
    pub fn set_vpi(&self, vpi: u32) {
        glib::ObjectExt::set_property(self, "vpi", &vpi)
    }

    #[doc(alias = "encapsulation")]
    pub fn connect_encapsulation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_encapsulation_trampoline<F: Fn(&SettingAdsl) + 'static>(
            this: *mut ffi::NMSettingAdsl,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::encapsulation\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_encapsulation_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "password")]
    pub fn connect_password_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_password_trampoline<F: Fn(&SettingAdsl) + 'static>(
            this: *mut ffi::NMSettingAdsl,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::password\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_password_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "password-flags")]
    pub fn connect_password_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_password_flags_trampoline<F: Fn(&SettingAdsl) + 'static>(
            this: *mut ffi::NMSettingAdsl,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::password-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_password_flags_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "protocol")]
    pub fn connect_protocol_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_protocol_trampoline<F: Fn(&SettingAdsl) + 'static>(
            this: *mut ffi::NMSettingAdsl,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::protocol\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_protocol_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "username")]
    pub fn connect_username_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_username_trampoline<F: Fn(&SettingAdsl) + 'static>(
            this: *mut ffi::NMSettingAdsl,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::username\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_username_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "vci")]
    pub fn connect_vci_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vci_trampoline<F: Fn(&SettingAdsl) + 'static>(
            this: *mut ffi::NMSettingAdsl,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vci\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vci_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "vpi")]
    pub fn connect_vpi_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vpi_trampoline<F: Fn(&SettingAdsl) + 'static>(
            this: *mut ffi::NMSettingAdsl,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::vpi\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_vpi_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for SettingAdsl {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for SettingAdsl {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SettingAdsl")
    }
}
